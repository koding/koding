{
  "id": "language:v1beta1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "description": "Google Cloud Natural Language API provides natural language understanding technologies to developers. Examples include sentiment analysis, entity recognition, and text annotations.",
  "protocol": "rest",
  "title": "Google Cloud Natural Language API",
  "resources": {
    "documents": {
      "methods": {
        "analyzeSentiment": {
          "id": "language.documents.analyzeSentiment",
          "response": {
            "$ref": "AnalyzeSentimentResponse"
          },
          "parameterOrder": [],
          "description": "Analyzes the sentiment of the provided text.",
          "request": {
            "$ref": "AnalyzeSentimentRequest"
          },
          "flatPath": "v1beta1/documents:analyzeSentiment",
          "httpMethod": "POST",
          "parameters": {},
          "path": "v1beta1/documents:analyzeSentiment",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "annotateText": {
          "id": "language.documents.annotateText",
          "response": {
            "$ref": "AnnotateTextResponse"
          },
          "parameterOrder": [],
          "description": "Advanced API that analyzes the document and provides a full set of text\nannotations, including semantic, syntactic, and sentiment information. This\nAPI is intended for users who are familiar with machine learning and need\nin-depth text features to build upon.",
          "request": {
            "$ref": "AnnotateTextRequest"
          },
          "flatPath": "v1beta1/documents:annotateText",
          "httpMethod": "POST",
          "parameters": {},
          "path": "v1beta1/documents:annotateText",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "analyzeEntities": {
          "id": "language.documents.analyzeEntities",
          "response": {
            "$ref": "AnalyzeEntitiesResponse"
          },
          "parameterOrder": [],
          "description": "Finds named entities (currently finds proper names) in the text,\nentity types, salience, mentions for each entity, and other properties.",
          "request": {
            "$ref": "AnalyzeEntitiesRequest"
          },
          "flatPath": "v1beta1/documents:analyzeEntities",
          "httpMethod": "POST",
          "parameters": {},
          "path": "v1beta1/documents:analyzeEntities",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      }
    }
  },
  "schemas": {
    "Document": {
      "description": "################################################################ #\n\nRepresents the input to API methods.",
      "type": "object",
      "properties": {
        "language": {
          "description": "The language of the document (if not specified, the language is\nautomatically detected). Both ISO and BCP-47 language codes are\naccepted.\u003cbr\u003e\n**Current Language Restrictions:**\n\n * Only English, Spanish, and Japanese textual content\n   are supported, with the following additional restriction:\n   * `analyzeSentiment` only supports English text.\nIf the language (either specified by the caller or automatically detected)\nis not supported by the called API method, an `INVALID_ARGUMENT` error\nis returned.",
          "type": "string"
        },
        "gcsContentUri": {
          "description": "The Google Cloud Storage URI where the file content is located.",
          "type": "string"
        },
        "type": {
          "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`,\nreturns an `INVALID_ARGUMENT` error.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "PLAIN_TEXT",
            "HTML"
          ],
          "enumDescriptions": [
            "The content type is not specified.",
            "Plain text",
            "HTML"
          ],
          "type": "string"
        },
        "content": {
          "description": "The content of the input in string format.",
          "type": "string"
        }
      },
      "id": "Document"
    },
    "TextSpan": {
      "description": "Represents an output piece of text.",
      "type": "object",
      "properties": {
        "beginOffset": {
          "description": "The API calculates the beginning offset of the content in the original\ndocument according to the EncodingType specified in the API request.",
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "description": "The content of the output text.",
          "type": "string"
        }
      },
      "id": "TextSpan"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting purpose.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "id": "Status"
    },
    "AnalyzeEntitiesRequest": {
      "description": "The entity analysis request message.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Input document.",
          "$ref": "Document"
        },
        "encodingType": {
          "description": "The encoding type used by the API to calculate offsets.",
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ],
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and Javascript are examples of\nlanguages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
          ],
          "type": "string"
        }
      },
      "id": "AnalyzeEntitiesRequest"
    },
    "EntityMention": {
      "description": "Represents a mention for an entity in the text. Currently, proper noun\nmentions are supported.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The mention text.",
          "$ref": "TextSpan"
        }
      },
      "id": "EntityMention"
    },
    "AnalyzeSentimentRequest": {
      "description": "The sentiment analysis request message.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Input document. Currently, `analyzeSentiment` only supports English text\n(Document.language=\"EN\").",
          "$ref": "Document"
        }
      },
      "id": "AnalyzeSentimentRequest"
    },
    "AnalyzeSentimentResponse": {
      "description": "The sentiment analysis response message.",
      "type": "object",
      "properties": {
        "documentSentiment": {
          "description": "The overall sentiment of the input document.",
          "$ref": "Sentiment"
        },
        "language": {
          "description": "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.",
          "type": "string"
        }
      },
      "id": "AnalyzeSentimentResponse"
    },
    "DependencyEdge": {
      "description": "Represents dependency parse tree information for a token.",
      "type": "object",
      "properties": {
        "headTokenIndex": {
          "description": "Represents the head of this token in the dependency tree.\nThis is the index of the token which has an arc going to this token.\nThe index is the position of the token in the array of tokens returned\nby the API method. If this token is a root token, then the\n`head_token_index` is its own index.",
          "type": "integer",
          "format": "int32"
        },
        "label": {
          "description": "The parse label for the token.",
          "enum": [
            "UNKNOWN",
            "ABBREV",
            "ACOMP",
            "ADVCL",
            "ADVMOD",
            "AMOD",
            "APPOS",
            "ATTR",
            "AUX",
            "AUXPASS",
            "CC",
            "CCOMP",
            "CONJ",
            "CSUBJ",
            "CSUBJPASS",
            "DEP",
            "DET",
            "DISCOURSE",
            "DOBJ",
            "EXPL",
            "GOESWITH",
            "IOBJ",
            "MARK",
            "MWE",
            "MWV",
            "NEG",
            "NN",
            "NPADVMOD",
            "NSUBJ",
            "NSUBJPASS",
            "NUM",
            "NUMBER",
            "P",
            "PARATAXIS",
            "PARTMOD",
            "PCOMP",
            "POBJ",
            "POSS",
            "POSTNEG",
            "PRECOMP",
            "PRECONJ",
            "PREDET",
            "PREF",
            "PREP",
            "PRONL",
            "PRT",
            "PS",
            "QUANTMOD",
            "RCMOD",
            "RCMODREL",
            "RDROP",
            "REF",
            "REMNANT",
            "REPARANDUM",
            "ROOT",
            "SNUM",
            "SUFF",
            "TMOD",
            "TOPIC",
            "VMOD",
            "VOCATIVE",
            "XCOMP",
            "SUFFIX",
            "TITLE",
            "ADVPHMOD",
            "AUXCAUS",
            "AUXVV",
            "DTMOD",
            "FOREIGN",
            "KW",
            "LIST",
            "NOMC",
            "NOMCSUBJ",
            "NOMCSUBJPASS",
            "NUMC",
            "COP",
            "DISLOCATED"
          ],
          "enumDescriptions": [
            "Unknown",
            "Abbreviation modifier",
            "Adjectival complement",
            "Adverbial clause modifier",
            "Adverbial modifier",
            "Adjectival modifier of an NP",
            "Appositional modifier of an NP",
            "Attribute dependent of a copular verb",
            "Auxiliary (non-main) verb",
            "Passive auxiliary",
            "Coordinating conjunction",
            "Clausal complement of a verb or adjective",
            "Conjunct",
            "Clausal subject",
            "Clausal passive subject",
            "Dependency (unable to determine)",
            "Determiner",
            "Discourse",
            "Direct object",
            "Expletive",
            "Goes with (part of a word in a text not well edited)",
            "Indirect object",
            "Marker (word introducing a subordinate clause)",
            "Multi-word expression",
            "Multi-word verbal expression",
            "Negation modifier",
            "Noun compound modifier",
            "Noun phrase used as an adverbial modifier",
            "Nominal subject",
            "Passive nominal subject",
            "Numeric modifier of a noun",
            "Element of compound number",
            "Punctuation mark",
            "Parataxis relation",
            "Participial modifier",
            "The complement of a preposition is a clause",
            "Object of a preposition",
            "Possession modifier",
            "Postverbal negative particle",
            "Predicate complement",
            "Preconjunt",
            "Predeterminer",
            "Prefix",
            "Prepositional modifier",
            "The relationship between a verb and verbal morpheme",
            "Particle",
            "Associative or possessive marker",
            "Quantifier phrase modifier",
            "Relative clause modifier",
            "Complementizer in relative clause",
            "Ellipsis without a preceding predicate",
            "Referent",
            "Remnant",
            "Reparandum",
            "Root",
            "Suffix specifying a unit of number",
            "Suffix",
            "Temporal modifier",
            "Topic marker",
            "Clause headed by an infinite form of the verb that modifies a noun",
            "Vocative",
            "Open clausal complement",
            "Name suffix",
            "Name title",
            "Adverbial phrase modifier",
            "Causative auxiliary",
            "Helper auxiliary",
            "Rentaishi (Prenominal modifier)",
            "Foreign words",
            "Keyword",
            "List for chains of comparable items",
            "Nominalized clause",
            "Nominalized clausal subject",
            "Nominalized clausal passive",
            "Compound of numeric modifier",
            "Copula",
            "Dislocated relation (for fronted/topicalized elements)"
          ],
          "type": "string"
        }
      },
      "id": "DependencyEdge"
    },
    "AnnotateTextRequest": {
      "description": "The request message for the advanced text annotation API, which performs all\nthe above plus syntactic analysis.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Input document.",
          "$ref": "Document"
        },
        "encodingType": {
          "description": "The encoding type used by the API to calculate offsets.",
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ],
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and Javascript are examples of\nlanguages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
          ],
          "type": "string"
        },
        "features": {
          "description": "The enabled features.",
          "$ref": "Features"
        }
      },
      "id": "AnnotateTextRequest"
    },
    "Sentence": {
      "description": "Represents a sentence in the input document.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The sentence text.",
          "$ref": "TextSpan"
        }
      },
      "id": "Sentence"
    },
    "Features": {
      "description": "All available features for sentiment, syntax, and semantic analysis.\nSetting each one to true will enable that specific analysis for the input.",
      "type": "object",
      "properties": {
        "extractDocumentSentiment": {
          "description": "Extract document-level sentiment.",
          "type": "boolean"
        },
        "extractEntities": {
          "description": "Extract entities.",
          "type": "boolean"
        },
        "extractSyntax": {
          "description": "Extract syntax information.",
          "type": "boolean"
        }
      },
      "id": "Features"
    },
    "PartOfSpeech": {
      "description": "Represents part of speech information for a token.",
      "type": "object",
      "properties": {
        "tag": {
          "description": "The part of speech tag.",
          "enum": [
            "UNKNOWN",
            "ADJ",
            "ADP",
            "ADV",
            "CONJ",
            "DET",
            "NOUN",
            "NUM",
            "PRON",
            "PRT",
            "PUNCT",
            "VERB",
            "X",
            "AFFIX"
          ],
          "enumDescriptions": [
            "Unknown",
            "Adjective",
            "Adposition (preposition and postposition)",
            "Adverb",
            "Conjunction",
            "Determiner",
            "Noun (common and proper)",
            "Cardinal number",
            "Pronoun",
            "Particle or other function word",
            "Punctuation",
            "Verb (all tenses and modes)",
            "Other: foreign words, typos, abbreviations",
            "Affix"
          ],
          "type": "string"
        }
      },
      "id": "PartOfSpeech"
    },
    "AnnotateTextResponse": {
      "description": "The text annotations response message.",
      "type": "object",
      "properties": {
        "entities": {
          "description": "Entities, along with their semantic information, in the input document.\nPopulated if the user enables\nAnnotateTextRequest.Features.extract_entities.",
          "type": "array",
          "items": {
            "$ref": "Entity"
          }
        },
        "documentSentiment": {
          "description": "The overall sentiment for the document. Populated if the user enables\nAnnotateTextRequest.Features.extract_document_sentiment.",
          "$ref": "Sentiment"
        },
        "language": {
          "description": "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.",
          "type": "string"
        },
        "tokens": {
          "description": "Tokens, along with their syntactic information, in the input document.\nPopulated if the user enables\nAnnotateTextRequest.Features.extract_syntax.",
          "type": "array",
          "items": {
            "$ref": "Token"
          }
        },
        "sentences": {
          "description": "Sentences in the input document. Populated if the user enables\nAnnotateTextRequest.Features.extract_syntax.",
          "type": "array",
          "items": {
            "$ref": "Sentence"
          }
        }
      },
      "id": "AnnotateTextResponse"
    },
    "Entity": {
      "description": "Represents a phrase in the text that is a known entity, such as\na person, an organization, or location. The API associates information, such\nas salience and mentions, with entities.",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata associated with the entity.\n\nCurrently, only Wikipedia URLs are provided, if available.\nThe associated key is \"wikipedia_url\".",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "salience": {
          "description": "The salience score associated with the entity in the [0, 1.0] range.\n\nThe salience score for an entity provides information about the\nimportance or centrality of that entity to the entire document text.\nScores closer to 0 are less salient, while scores closer to 1.0 are highly\nsalient.",
          "type": "number",
          "format": "float"
        },
        "type": {
          "description": "The entity type.",
          "enum": [
            "UNKNOWN",
            "PERSON",
            "LOCATION",
            "ORGANIZATION",
            "EVENT",
            "WORK_OF_ART",
            "CONSUMER_GOOD",
            "OTHER"
          ],
          "enumDescriptions": [
            "Unknown",
            "Person",
            "Location",
            "Organization",
            "Event",
            "Work of art",
            "Consumer goods",
            "Other types"
          ],
          "type": "string"
        },
        "mentions": {
          "description": "The mentions of this entity in the input document. The API currently\nsupports proper noun mentions.",
          "type": "array",
          "items": {
            "$ref": "EntityMention"
          }
        },
        "name": {
          "description": "The representative name for the entity.",
          "type": "string"
        }
      },
      "id": "Entity"
    },
    "Sentiment": {
      "description": "Represents the feeling associated with the entire text or entities in\nthe text.",
      "type": "object",
      "properties": {
        "polarity": {
          "description": "Polarity of the sentiment in the [-1.0, 1.0] range. Larger numbers\nrepresent more positive sentiments.",
          "type": "number",
          "format": "float"
        },
        "magnitude": {
          "description": "A non-negative number in the [0, +inf) range, which represents\nthe absolute magnitude of sentiment regardless of polarity (positive or\nnegative).",
          "type": "number",
          "format": "float"
        }
      },
      "id": "Sentiment"
    },
    "Token": {
      "description": "Represents the smallest syntactic building block of the text.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The token text.",
          "$ref": "TextSpan"
        },
        "partOfSpeech": {
          "description": "Parts of speech tag for this token.",
          "$ref": "PartOfSpeech"
        },
        "dependencyEdge": {
          "description": "Dependency tree parse for this token.",
          "$ref": "DependencyEdge"
        },
        "lemma": {
          "description": "[Lemma](https://en.wikipedia.org/wiki/Lemma_(morphology))\nof the token.",
          "type": "string"
        }
      },
      "id": "Token"
    },
    "AnalyzeEntitiesResponse": {
      "description": "The entity analysis response message.",
      "type": "object",
      "properties": {
        "entities": {
          "description": "The recognized entities in the input document.",
          "type": "array",
          "items": {
            "$ref": "Entity"
          }
        },
        "language": {
          "description": "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.",
          "type": "string"
        }
      },
      "id": "AnalyzeEntitiesResponse"
    }
  },
  "revision": "20160801",
  "basePath": "",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "version_module": "True",
  "canonicalName": "Cloud Natural Language API",
  "discoveryVersion": "v1",
  "baseUrl": "https://language.googleapis.com/",
  "name": "language",
  "parameters": {
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "pp": {
      "description": "Pretty-print response.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "bearer_token": {
      "description": "OAuth bearer token.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    }
  },
  "documentationLink": "https://cloud.google.com/natural-language/",
  "ownerDomain": "google.com",
  "batchPath": "batch",
  "servicePath": "",
  "ownerName": "Google",
  "version": "v1beta1",
  "rootUrl": "https://language.googleapis.com/",
  "kind": "discovery#restDescription"
}

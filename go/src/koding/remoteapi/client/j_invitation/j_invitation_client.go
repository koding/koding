package j_invitation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j invitation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j invitation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJInvitationAcceptID Method JInvitation.accept
*/
func (a *Client) PostRemoteAPIJInvitationAcceptID(params *PostRemoteAPIJInvitationAcceptIDParams) (*PostRemoteAPIJInvitationAcceptIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJInvitationAcceptIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJInvitationAcceptID",
		Method:             "POST",
		PathPattern:        "/remote.api/JInvitation.accept/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJInvitationAcceptIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJInvitationAcceptIDOK), nil

}

/*
PostRemoteAPIJInvitationByCode byCode fetches an invitation by its code
*/
func (a *Client) PostRemoteAPIJInvitationByCode(params *PostRemoteAPIJInvitationByCodeParams) (*PostRemoteAPIJInvitationByCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJInvitationByCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJInvitationByCode",
		Method:             "POST",
		PathPattern:        "/remote.api/JInvitation.byCode",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJInvitationByCodeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJInvitationByCodeOK), nil

}

/*
PostRemoteAPIJInvitationCreate post remote API j invitation create API
*/
func (a *Client) PostRemoteAPIJInvitationCreate(params *PostRemoteAPIJInvitationCreateParams) (*PostRemoteAPIJInvitationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJInvitationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJInvitationCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/JInvitation.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJInvitationCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJInvitationCreateOK), nil

}

/*
PostRemoteAPIJInvitationRemoveID post remote API j invitation remove ID API
*/
func (a *Client) PostRemoteAPIJInvitationRemoveID(params *PostRemoteAPIJInvitationRemoveIDParams) (*PostRemoteAPIJInvitationRemoveIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJInvitationRemoveIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJInvitationRemoveID",
		Method:             "POST",
		PathPattern:        "/remote.api/JInvitation.remove/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJInvitationRemoveIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJInvitationRemoveIDOK), nil

}

/*
PostRemoteAPIJInvitationRevokeInvitation post remote API j invitation revoke invitation API
*/
func (a *Client) PostRemoteAPIJInvitationRevokeInvitation(params *PostRemoteAPIJInvitationRevokeInvitationParams) (*PostRemoteAPIJInvitationRevokeInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJInvitationRevokeInvitationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJInvitationRevokeInvitation",
		Method:             "POST",
		PathPattern:        "/remote.api/JInvitation.revokeInvitation",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJInvitationRevokeInvitationReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJInvitationRevokeInvitationOK), nil

}

/*
PostRemoteAPIJInvitationSearch post remote API j invitation search API
*/
func (a *Client) PostRemoteAPIJInvitationSearch(params *PostRemoteAPIJInvitationSearchParams) (*PostRemoteAPIJInvitationSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJInvitationSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJInvitationSearch",
		Method:             "POST",
		PathPattern:        "/remote.api/JInvitation.search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJInvitationSearchReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJInvitationSearchOK), nil

}

/*
PostRemoteAPIJInvitationSendInvitationByCode post remote API j invitation send invitation by code API
*/
func (a *Client) PostRemoteAPIJInvitationSendInvitationByCode(params *PostRemoteAPIJInvitationSendInvitationByCodeParams) (*PostRemoteAPIJInvitationSendInvitationByCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJInvitationSendInvitationByCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJInvitationSendInvitationByCode",
		Method:             "POST",
		PathPattern:        "/remote.api/JInvitation.sendInvitationByCode",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJInvitationSendInvitationByCodeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJInvitationSendInvitationByCodeOK), nil

}

/*
PostRemoteAPIJInvitationSome post remote API j invitation some API
*/
func (a *Client) PostRemoteAPIJInvitationSome(params *PostRemoteAPIJInvitationSomeParams) (*PostRemoteAPIJInvitationSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJInvitationSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJInvitationSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JInvitation.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJInvitationSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJInvitationSomeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

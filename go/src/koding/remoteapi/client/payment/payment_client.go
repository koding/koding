package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new payment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIPaymentCanChangePlan post remote API payment can change plan API
*/
func (a *Client) PostRemoteAPIPaymentCanChangePlan(params *PostRemoteAPIPaymentCanChangePlanParams) (*PostRemoteAPIPaymentCanChangePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentCanChangePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentCanChangePlan",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.canChangePlan",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentCanChangePlanReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentCanChangePlanOK), nil

}

/*
PostRemoteAPIPaymentCanUserPurchase post remote API payment can user purchase API
*/
func (a *Client) PostRemoteAPIPaymentCanUserPurchase(params *PostRemoteAPIPaymentCanUserPurchaseParams) (*PostRemoteAPIPaymentCanUserPurchaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentCanUserPurchaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentCanUserPurchase",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.canUserPurchase",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentCanUserPurchaseReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentCanUserPurchaseOK), nil

}

/*
PostRemoteAPIPaymentCancelGroupPlan post remote API payment cancel group plan API
*/
func (a *Client) PostRemoteAPIPaymentCancelGroupPlan(params *PostRemoteAPIPaymentCancelGroupPlanParams) (*PostRemoteAPIPaymentCancelGroupPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentCancelGroupPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentCancelGroupPlan",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.cancelGroupPlan",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentCancelGroupPlanReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentCancelGroupPlanOK), nil

}

/*
PostRemoteAPIPaymentCreditCard post remote API payment credit card API
*/
func (a *Client) PostRemoteAPIPaymentCreditCard(params *PostRemoteAPIPaymentCreditCardParams) (*PostRemoteAPIPaymentCreditCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentCreditCardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentCreditCard",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.creditCard",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentCreditCardReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentCreditCardOK), nil

}

/*
PostRemoteAPIPaymentFetchGroupCreditCard post remote API payment fetch group credit card API
*/
func (a *Client) PostRemoteAPIPaymentFetchGroupCreditCard(params *PostRemoteAPIPaymentFetchGroupCreditCardParams) (*PostRemoteAPIPaymentFetchGroupCreditCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentFetchGroupCreditCardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentFetchGroupCreditCard",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.fetchGroupCreditCard",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentFetchGroupCreditCardReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentFetchGroupCreditCardOK), nil

}

/*
PostRemoteAPIPaymentFetchGroupInvoices post remote API payment fetch group invoices API
*/
func (a *Client) PostRemoteAPIPaymentFetchGroupInvoices(params *PostRemoteAPIPaymentFetchGroupInvoicesParams) (*PostRemoteAPIPaymentFetchGroupInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentFetchGroupInvoicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentFetchGroupInvoices",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.fetchGroupInvoices",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentFetchGroupInvoicesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentFetchGroupInvoicesOK), nil

}

/*
PostRemoteAPIPaymentFetchGroupPlan post remote API payment fetch group plan API
*/
func (a *Client) PostRemoteAPIPaymentFetchGroupPlan(params *PostRemoteAPIPaymentFetchGroupPlanParams) (*PostRemoteAPIPaymentFetchGroupPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentFetchGroupPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentFetchGroupPlan",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.fetchGroupPlan",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentFetchGroupPlanReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentFetchGroupPlanOK), nil

}

/*
PostRemoteAPIPaymentGetToken post remote API payment get token API
*/
func (a *Client) PostRemoteAPIPaymentGetToken(params *PostRemoteAPIPaymentGetTokenParams) (*PostRemoteAPIPaymentGetTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentGetTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentGetToken",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.getToken",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentGetTokenReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentGetTokenOK), nil

}

/*
PostRemoteAPIPaymentInvoices post remote API payment invoices API
*/
func (a *Client) PostRemoteAPIPaymentInvoices(params *PostRemoteAPIPaymentInvoicesParams) (*PostRemoteAPIPaymentInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentInvoicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentInvoices",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.invoices",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentInvoicesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentInvoicesOK), nil

}

/*
PostRemoteAPIPaymentLogOrder post remote API payment log order API
*/
func (a *Client) PostRemoteAPIPaymentLogOrder(params *PostRemoteAPIPaymentLogOrderParams) (*PostRemoteAPIPaymentLogOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentLogOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentLogOrder",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.logOrder",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentLogOrderReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentLogOrderOK), nil

}

/*
PostRemoteAPIPaymentSubscribe post remote API payment subscribe API
*/
func (a *Client) PostRemoteAPIPaymentSubscribe(params *PostRemoteAPIPaymentSubscribeParams) (*PostRemoteAPIPaymentSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentSubscribe",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.subscribe",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentSubscribeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentSubscribeOK), nil

}

/*
PostRemoteAPIPaymentSubscribeGroup post remote API payment subscribe group API
*/
func (a *Client) PostRemoteAPIPaymentSubscribeGroup(params *PostRemoteAPIPaymentSubscribeGroupParams) (*PostRemoteAPIPaymentSubscribeGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentSubscribeGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentSubscribeGroup",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.subscribeGroup",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentSubscribeGroupReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentSubscribeGroupOK), nil

}

/*
PostRemoteAPIPaymentSubscriptions post remote API payment subscriptions API
*/
func (a *Client) PostRemoteAPIPaymentSubscriptions(params *PostRemoteAPIPaymentSubscriptionsParams) (*PostRemoteAPIPaymentSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentSubscriptions",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.subscriptions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentSubscriptionsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentSubscriptionsOK), nil

}

/*
PostRemoteAPIPaymentUpdateCreditCard post remote API payment update credit card API
*/
func (a *Client) PostRemoteAPIPaymentUpdateCreditCard(params *PostRemoteAPIPaymentUpdateCreditCardParams) (*PostRemoteAPIPaymentUpdateCreditCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentUpdateCreditCardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentUpdateCreditCard",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.updateCreditCard",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentUpdateCreditCardReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentUpdateCreditCardOK), nil

}

/*
PostRemoteAPIPaymentUpdateGroupCreditCard post remote API payment update group credit card API
*/
func (a *Client) PostRemoteAPIPaymentUpdateGroupCreditCard(params *PostRemoteAPIPaymentUpdateGroupCreditCardParams) (*PostRemoteAPIPaymentUpdateGroupCreditCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIPaymentUpdateGroupCreditCardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIPaymentUpdateGroupCreditCard",
		Method:             "POST",
		PathPattern:        "/remote.api/Payment.updateGroupCreditCard",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIPaymentUpdateGroupCreditCardReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIPaymentUpdateGroupCreditCardOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

package j_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJUserAuthenticateWithOauth post remote API j user authenticate with oauth API
*/
func (a *Client) PostRemoteAPIJUserAuthenticateWithOauth(params *PostRemoteAPIJUserAuthenticateWithOauthParams) (*PostRemoteAPIJUserAuthenticateWithOauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserAuthenticateWithOauthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserAuthenticateWithOauth",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.authenticateWithOauth",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserAuthenticateWithOauthReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserAuthenticateWithOauthOK), nil

}

/*
PostRemoteAPIJUserChangeEmail post remote API j user change email API
*/
func (a *Client) PostRemoteAPIJUserChangeEmail(params *PostRemoteAPIJUserChangeEmailParams) (*PostRemoteAPIJUserChangeEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserChangeEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserChangeEmail",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.changeEmail",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserChangeEmailReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserChangeEmailOK), nil

}

/*
PostRemoteAPIJUserChangePassword post remote API j user change password API
*/
func (a *Client) PostRemoteAPIJUserChangePassword(params *PostRemoteAPIJUserChangePasswordParams) (*PostRemoteAPIJUserChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserChangePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserChangePassword",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.changePassword",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserChangePasswordReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserChangePasswordOK), nil

}

/*
PostRemoteAPIJUserConvert post remote API j user convert API
*/
func (a *Client) PostRemoteAPIJUserConvert(params *PostRemoteAPIJUserConvertParams) (*PostRemoteAPIJUserConvertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserConvertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserConvert",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.convert",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserConvertReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserConvertOK), nil

}

/*
PostRemoteAPIJUserEmailAvailable Method JUser.emailAvailable
*/
func (a *Client) PostRemoteAPIJUserEmailAvailable(params *PostRemoteAPIJUserEmailAvailableParams) (*PostRemoteAPIJUserEmailAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserEmailAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserEmailAvailable",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.emailAvailable",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserEmailAvailableReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserEmailAvailableOK), nil

}

/*
PostRemoteAPIJUserFetchUser post remote API j user fetch user API
*/
func (a *Client) PostRemoteAPIJUserFetchUser(params *PostRemoteAPIJUserFetchUserParams) (*PostRemoteAPIJUserFetchUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserFetchUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserFetchUser",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.fetchUser",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserFetchUserReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserFetchUserOK), nil

}

/*
PostRemoteAPIJUserGetSSHKeys post remote API j user get SSH keys API
*/
func (a *Client) PostRemoteAPIJUserGetSSHKeys(params *PostRemoteAPIJUserGetSSHKeysParams) (*PostRemoteAPIJUserGetSSHKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserGetSSHKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserGetSSHKeys",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.getSSHKeys",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserGetSSHKeysReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserGetSSHKeysOK), nil

}

/*
PostRemoteAPIJUserLogin Method JUser.login
*/
func (a *Client) PostRemoteAPIJUserLogin(params *PostRemoteAPIJUserLoginParams) (*PostRemoteAPIJUserLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserLogin",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.login",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserLoginReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserLoginOK), nil

}

/*
PostRemoteAPIJUserLogout post remote API j user logout API
*/
func (a *Client) PostRemoteAPIJUserLogout(params *PostRemoteAPIJUserLogoutParams) (*PostRemoteAPIJUserLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserLogout",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.logout",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserLogoutReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserLogoutOK), nil

}

/*
PostRemoteAPIJUserSetSSHKeys post remote API j user set SSH keys API
*/
func (a *Client) PostRemoteAPIJUserSetSSHKeys(params *PostRemoteAPIJUserSetSSHKeysParams) (*PostRemoteAPIJUserSetSSHKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserSetSSHKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserSetSSHKeys",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.setSSHKeys",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserSetSSHKeysReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserSetSSHKeysOK), nil

}

/*
PostRemoteAPIJUserUnregister post remote API j user unregister API
*/
func (a *Client) PostRemoteAPIJUserUnregister(params *PostRemoteAPIJUserUnregisterParams) (*PostRemoteAPIJUserUnregisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserUnregisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserUnregister",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.unregister",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserUnregisterReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserUnregisterOK), nil

}

/*
PostRemoteAPIJUserUsernameAvailable Method JUser.usernameAvailable
*/
func (a *Client) PostRemoteAPIJUserUsernameAvailable(params *PostRemoteAPIJUserUsernameAvailableParams) (*PostRemoteAPIJUserUsernameAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserUsernameAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserUsernameAvailable",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.usernameAvailable",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserUsernameAvailableReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserUsernameAvailableOK), nil

}

/*
PostRemoteAPIJUserVerifyByPin post remote API j user verify by pin API
*/
func (a *Client) PostRemoteAPIJUserVerifyByPin(params *PostRemoteAPIJUserVerifyByPinParams) (*PostRemoteAPIJUserVerifyByPinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserVerifyByPinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserVerifyByPin",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.verifyByPin",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserVerifyByPinReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserVerifyByPinOK), nil

}

/*
PostRemoteAPIJUserVerifyPassword post remote API j user verify password API
*/
func (a *Client) PostRemoteAPIJUserVerifyPassword(params *PostRemoteAPIJUserVerifyPasswordParams) (*PostRemoteAPIJUserVerifyPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserVerifyPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserVerifyPassword",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.verifyPassword",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserVerifyPasswordReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserVerifyPasswordOK), nil

}

/*
PostRemoteAPIJUserWhoami whoami

Returns your JAccount instance based on the session data
*/
func (a *Client) PostRemoteAPIJUserWhoami(params *PostRemoteAPIJUserWhoamiParams) (*PostRemoteAPIJUserWhoamiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJUserWhoamiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJUserWhoami",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.whoami",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJUserWhoamiReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJUserWhoamiOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

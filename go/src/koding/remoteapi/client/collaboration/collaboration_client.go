package collaboration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new collaboration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for collaboration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPICollaborationAdd post remote API collaboration add API
*/
func (a *Client) PostRemoteAPICollaborationAdd(params *PostRemoteAPICollaborationAddParams) (*PostRemoteAPICollaborationAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPICollaborationAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPICollaborationAdd",
		Method:             "POST",
		PathPattern:        "/remote.api/Collaboration.add",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPICollaborationAddReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPICollaborationAddOK), nil

}

/*
PostRemoteAPICollaborationKick post remote API collaboration kick API
*/
func (a *Client) PostRemoteAPICollaborationKick(params *PostRemoteAPICollaborationKickParams) (*PostRemoteAPICollaborationKickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPICollaborationKickParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPICollaborationKick",
		Method:             "POST",
		PathPattern:        "/remote.api/Collaboration.kick",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPICollaborationKickReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPICollaborationKickOK), nil

}

/*
PostRemoteAPICollaborationStop post remote API collaboration stop API
*/
func (a *Client) PostRemoteAPICollaborationStop(params *PostRemoteAPICollaborationStopParams) (*PostRemoteAPICollaborationStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPICollaborationStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPICollaborationStop",
		Method:             "POST",
		PathPattern:        "/remote.api/Collaboration.stop",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPICollaborationStopReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPICollaborationStopOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

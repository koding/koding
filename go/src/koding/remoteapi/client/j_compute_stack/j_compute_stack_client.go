package j_compute_stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j compute stack API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j compute stack API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJComputeStackCheckRevisionID post remote API j compute stack check revision ID API
*/
func (a *Client) PostRemoteAPIJComputeStackCheckRevisionID(params *PostRemoteAPIJComputeStackCheckRevisionIDParams) (*PostRemoteAPIJComputeStackCheckRevisionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackCheckRevisionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackCheckRevisionID",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.checkRevision/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackCheckRevisionIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackCheckRevisionIDOK), nil

}

/*
PostRemoteAPIJComputeStackCreate JComputeStack::create
*/
func (a *Client) PostRemoteAPIJComputeStackCreate(params *PostRemoteAPIJComputeStackCreateParams) (*PostRemoteAPIJComputeStackCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackCreateOK), nil

}

/*
PostRemoteAPIJComputeStackCreateAdminMessageID Method JComputeStack.createAdminMessage
*/
func (a *Client) PostRemoteAPIJComputeStackCreateAdminMessageID(params *PostRemoteAPIJComputeStackCreateAdminMessageIDParams) (*PostRemoteAPIJComputeStackCreateAdminMessageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackCreateAdminMessageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackCreateAdminMessageID",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.createAdminMessage/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackCreateAdminMessageIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackCreateAdminMessageIDOK), nil

}

/*
PostRemoteAPIJComputeStackDeleteAdminMessageID Method JComputeStack.deleteAdminMessage
*/
func (a *Client) PostRemoteAPIJComputeStackDeleteAdminMessageID(params *PostRemoteAPIJComputeStackDeleteAdminMessageIDParams) (*PostRemoteAPIJComputeStackDeleteAdminMessageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackDeleteAdminMessageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackDeleteAdminMessageID",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.deleteAdminMessage/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackDeleteAdminMessageIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackDeleteAdminMessageIDOK), nil

}

/*
PostRemoteAPIJComputeStackDeleteID Method JComputeStack.delete
*/
func (a *Client) PostRemoteAPIJComputeStackDeleteID(params *PostRemoteAPIJComputeStackDeleteIDParams) (*PostRemoteAPIJComputeStackDeleteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackDeleteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackDeleteID",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.delete/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackDeleteIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackDeleteIDOK), nil

}

/*
PostRemoteAPIJComputeStackDestroyID Method JComputeStack.destroy
*/
func (a *Client) PostRemoteAPIJComputeStackDestroyID(params *PostRemoteAPIJComputeStackDestroyIDParams) (*PostRemoteAPIJComputeStackDestroyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackDestroyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackDestroyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.destroy/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackDestroyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackDestroyIDOK), nil

}

/*
PostRemoteAPIJComputeStackMaintenanceID post remote API j compute stack maintenance ID API
*/
func (a *Client) PostRemoteAPIJComputeStackMaintenanceID(params *PostRemoteAPIJComputeStackMaintenanceIDParams) (*PostRemoteAPIJComputeStackMaintenanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackMaintenanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackMaintenanceID",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.maintenance/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackMaintenanceIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackMaintenanceIDOK), nil

}

/*
PostRemoteAPIJComputeStackModifyID post remote API j compute stack modify ID API
*/
func (a *Client) PostRemoteAPIJComputeStackModifyID(params *PostRemoteAPIJComputeStackModifyIDParams) (*PostRemoteAPIJComputeStackModifyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackModifyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackModifyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.modify/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackModifyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackModifyIDOK), nil

}

/*
PostRemoteAPIJComputeStackOne post remote API j compute stack one API
*/
func (a *Client) PostRemoteAPIJComputeStackOne(params *PostRemoteAPIJComputeStackOneParams) (*PostRemoteAPIJComputeStackOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackOneOK), nil

}

/*
PostRemoteAPIJComputeStackSome post remote API j compute stack some API
*/
func (a *Client) PostRemoteAPIJComputeStackSome(params *PostRemoteAPIJComputeStackSomeParams) (*PostRemoteAPIJComputeStackSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJComputeStackSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJComputeStackSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJComputeStackSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJComputeStackSomeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

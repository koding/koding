package j_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j tag API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j tag API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJTagByRelevance post remote API j tag by relevance API
*/
func (a *Client) PostRemoteAPIJTagByRelevance(params *PostRemoteAPIJTagByRelevanceParams) (*PostRemoteAPIJTagByRelevanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagByRelevanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagByRelevance",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.byRelevance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagByRelevanceReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagByRelevanceOK), nil

}

/*
PostRemoteAPIJTagByRelevanceForSkills post remote API j tag by relevance for skills API
*/
func (a *Client) PostRemoteAPIJTagByRelevanceForSkills(params *PostRemoteAPIJTagByRelevanceForSkillsParams) (*PostRemoteAPIJTagByRelevanceForSkillsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagByRelevanceForSkillsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagByRelevanceForSkills",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.byRelevanceForSkills",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagByRelevanceForSkillsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagByRelevanceForSkillsOK), nil

}

/*
PostRemoteAPIJTagCount post remote API j tag count API
*/
func (a *Client) PostRemoteAPIJTagCount(params *PostRemoteAPIJTagCountParams) (*PostRemoteAPIJTagCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagCount",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.count",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagCountReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagCountOK), nil

}

/*
PostRemoteAPIJTagCreate post remote API j tag create API
*/
func (a *Client) PostRemoteAPIJTagCreate(params *PostRemoteAPIJTagCreateParams) (*PostRemoteAPIJTagCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagCreateOK), nil

}

/*
PostRemoteAPIJTagCreateSynonymID post remote API j tag create synonym ID API
*/
func (a *Client) PostRemoteAPIJTagCreateSynonymID(params *PostRemoteAPIJTagCreateSynonymIDParams) (*PostRemoteAPIJTagCreateSynonymIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagCreateSynonymIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagCreateSynonymID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.createSynonym/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagCreateSynonymIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagCreateSynonymIDOK), nil

}

/*
PostRemoteAPIJTagCreateSystemTag post remote API j tag create system tag API
*/
func (a *Client) PostRemoteAPIJTagCreateSystemTag(params *PostRemoteAPIJTagCreateSystemTagParams) (*PostRemoteAPIJTagCreateSystemTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagCreateSystemTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagCreateSystemTag",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.createSystemTag",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagCreateSystemTagReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagCreateSystemTagOK), nil

}

/*
PostRemoteAPIJTagCursor post remote API j tag cursor API
*/
func (a *Client) PostRemoteAPIJTagCursor(params *PostRemoteAPIJTagCursorParams) (*PostRemoteAPIJTagCursorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagCursorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagCursor",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.cursor",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagCursorReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagCursorOK), nil

}

/*
PostRemoteAPIJTagCursorWithRelationship post remote API j tag cursor with relationship API
*/
func (a *Client) PostRemoteAPIJTagCursorWithRelationship(params *PostRemoteAPIJTagCursorWithRelationshipParams) (*PostRemoteAPIJTagCursorWithRelationshipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagCursorWithRelationshipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagCursorWithRelationship",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.cursorWithRelationship",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagCursorWithRelationshipReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagCursorWithRelationshipOK), nil

}

/*
PostRemoteAPIJTagDeleteID post remote API j tag delete ID API
*/
func (a *Client) PostRemoteAPIJTagDeleteID(params *PostRemoteAPIJTagDeleteIDParams) (*PostRemoteAPIJTagDeleteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagDeleteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagDeleteID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.delete/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagDeleteIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagDeleteIDOK), nil

}

/*
PostRemoteAPIJTagEach post remote API j tag each API
*/
func (a *Client) PostRemoteAPIJTagEach(params *PostRemoteAPIJTagEachParams) (*PostRemoteAPIJTagEachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagEachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagEach",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.each",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagEachReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagEachOK), nil

}

/*
PostRemoteAPIJTagFetchContentTeasersID Method JTag.fetchContentTeasers
*/
func (a *Client) PostRemoteAPIJTagFetchContentTeasersID(params *PostRemoteAPIJTagFetchContentTeasersIDParams) (*PostRemoteAPIJTagFetchContentTeasersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchContentTeasersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchContentTeasersID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchContentTeasers/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchContentTeasersIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchContentTeasersIDOK), nil

}

/*
PostRemoteAPIJTagFetchContentsID post remote API j tag fetch contents ID API
*/
func (a *Client) PostRemoteAPIJTagFetchContentsID(params *PostRemoteAPIJTagFetchContentsIDParams) (*PostRemoteAPIJTagFetchContentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchContentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchContentsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchContents/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchContentsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchContentsIDOK), nil

}

/*
PostRemoteAPIJTagFetchCount post remote API j tag fetch count API
*/
func (a *Client) PostRemoteAPIJTagFetchCount(params *PostRemoteAPIJTagFetchCountParams) (*PostRemoteAPIJTagFetchCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchCount",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchCount",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchCountReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchCountOK), nil

}

/*
PostRemoteAPIJTagFetchFollowersWithRelationshipID post remote API j tag fetch followers with relationship ID API
*/
func (a *Client) PostRemoteAPIJTagFetchFollowersWithRelationshipID(params *PostRemoteAPIJTagFetchFollowersWithRelationshipIDParams) (*PostRemoteAPIJTagFetchFollowersWithRelationshipIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchFollowersWithRelationshipIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchFollowersWithRelationshipID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchFollowersWithRelationship/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchFollowersWithRelationshipIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchFollowersWithRelationshipIDOK), nil

}

/*
PostRemoteAPIJTagFetchFollowingWithRelationshipID post remote API j tag fetch following with relationship ID API
*/
func (a *Client) PostRemoteAPIJTagFetchFollowingWithRelationshipID(params *PostRemoteAPIJTagFetchFollowingWithRelationshipIDParams) (*PostRemoteAPIJTagFetchFollowingWithRelationshipIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchFollowingWithRelationshipIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchFollowingWithRelationshipID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchFollowingWithRelationship/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchFollowingWithRelationshipIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchFollowingWithRelationshipIDOK), nil

}

/*
PostRemoteAPIJTagFetchLastInteractorsID post remote API j tag fetch last interactors ID API
*/
func (a *Client) PostRemoteAPIJTagFetchLastInteractorsID(params *PostRemoteAPIJTagFetchLastInteractorsIDParams) (*PostRemoteAPIJTagFetchLastInteractorsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchLastInteractorsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchLastInteractorsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchLastInteractors/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchLastInteractorsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchLastInteractorsIDOK), nil

}

/*
PostRemoteAPIJTagFetchMyFollowees post remote API j tag fetch my followees API
*/
func (a *Client) PostRemoteAPIJTagFetchMyFollowees(params *PostRemoteAPIJTagFetchMyFolloweesParams) (*PostRemoteAPIJTagFetchMyFolloweesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchMyFolloweesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchMyFollowees",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchMyFollowees",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchMyFolloweesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchMyFolloweesOK), nil

}

/*
PostRemoteAPIJTagFetchSkillTags Method JTag.fetchSkillTags
*/
func (a *Client) PostRemoteAPIJTagFetchSkillTags(params *PostRemoteAPIJTagFetchSkillTagsParams) (*PostRemoteAPIJTagFetchSkillTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchSkillTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchSkillTags",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchSkillTags",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchSkillTagsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchSkillTagsOK), nil

}

/*
PostRemoteAPIJTagFetchSynonymID post remote API j tag fetch synonym ID API
*/
func (a *Client) PostRemoteAPIJTagFetchSynonymID(params *PostRemoteAPIJTagFetchSynonymIDParams) (*PostRemoteAPIJTagFetchSynonymIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchSynonymIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchSynonymID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchSynonym/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchSynonymIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchSynonymIDOK), nil

}

/*
PostRemoteAPIJTagFetchSystemTags post remote API j tag fetch system tags API
*/
func (a *Client) PostRemoteAPIJTagFetchSystemTags(params *PostRemoteAPIJTagFetchSystemTagsParams) (*PostRemoteAPIJTagFetchSystemTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFetchSystemTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFetchSystemTags",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.fetchSystemTags",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFetchSystemTagsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFetchSystemTagsOK), nil

}

/*
PostRemoteAPIJTagFollowID post remote API j tag follow ID API
*/
func (a *Client) PostRemoteAPIJTagFollowID(params *PostRemoteAPIJTagFollowIDParams) (*PostRemoteAPIJTagFollowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagFollowIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagFollowID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.follow/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagFollowIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagFollowIDOK), nil

}

/*
PostRemoteAPIJTagModifyID post remote API j tag modify ID API
*/
func (a *Client) PostRemoteAPIJTagModifyID(params *PostRemoteAPIJTagModifyIDParams) (*PostRemoteAPIJTagModifyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagModifyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagModifyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.modify/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagModifyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagModifyIDOK), nil

}

/*
PostRemoteAPIJTagOn post remote API j tag on API
*/
func (a *Client) PostRemoteAPIJTagOn(params *PostRemoteAPIJTagOnParams) (*PostRemoteAPIJTagOnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagOnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagOn",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.on",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagOnReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagOnOK), nil

}

/*
PostRemoteAPIJTagOne post remote API j tag one API
*/
func (a *Client) PostRemoteAPIJTagOne(params *PostRemoteAPIJTagOneParams) (*PostRemoteAPIJTagOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagOneOK), nil

}

/*
PostRemoteAPIJTagSome post remote API j tag some API
*/
func (a *Client) PostRemoteAPIJTagSome(params *PostRemoteAPIJTagSomeParams) (*PostRemoteAPIJTagSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagSomeOK), nil

}

/*
PostRemoteAPIJTagUnfollowID post remote API j tag unfollow ID API
*/
func (a *Client) PostRemoteAPIJTagUnfollowID(params *PostRemoteAPIJTagUnfollowIDParams) (*PostRemoteAPIJTagUnfollowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTagUnfollowIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTagUnfollowID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTag.unfollow/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTagUnfollowIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTagUnfollowIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

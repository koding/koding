package j_proposed_domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j proposed domain API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j proposed domain API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJProposedDomainActivateDomainID post remote API j proposed domain activate domain ID API
*/
func (a *Client) PostRemoteAPIJProposedDomainActivateDomainID(params *PostRemoteAPIJProposedDomainActivateDomainIDParams) (*PostRemoteAPIJProposedDomainActivateDomainIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProposedDomainActivateDomainIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProposedDomainActivateDomainID",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.activateDomain/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProposedDomainActivateDomainIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProposedDomainActivateDomainIDOK), nil

}

/*
PostRemoteAPIJProposedDomainBindMachineID Method JProposedDomain.bindMachine
*/
func (a *Client) PostRemoteAPIJProposedDomainBindMachineID(params *PostRemoteAPIJProposedDomainBindMachineIDParams) (*PostRemoteAPIJProposedDomainBindMachineIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProposedDomainBindMachineIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProposedDomainBindMachineID",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.bindMachine/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProposedDomainBindMachineIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProposedDomainBindMachineIDOK), nil

}

/*
PostRemoteAPIJProposedDomainCreateDomain Method JProposedDomain.createDomain
*/
func (a *Client) PostRemoteAPIJProposedDomainCreateDomain(params *PostRemoteAPIJProposedDomainCreateDomainParams) (*PostRemoteAPIJProposedDomainCreateDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProposedDomainCreateDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProposedDomainCreateDomain",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.createDomain",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProposedDomainCreateDomainReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProposedDomainCreateDomainOK), nil

}

/*
PostRemoteAPIJProposedDomainDeactivateDomainID post remote API j proposed domain deactivate domain ID API
*/
func (a *Client) PostRemoteAPIJProposedDomainDeactivateDomainID(params *PostRemoteAPIJProposedDomainDeactivateDomainIDParams) (*PostRemoteAPIJProposedDomainDeactivateDomainIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProposedDomainDeactivateDomainIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProposedDomainDeactivateDomainID",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.deactivateDomain/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProposedDomainDeactivateDomainIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProposedDomainDeactivateDomainIDOK), nil

}

/*
PostRemoteAPIJProposedDomainFetchDomains post remote API j proposed domain fetch domains API
*/
func (a *Client) PostRemoteAPIJProposedDomainFetchDomains(params *PostRemoteAPIJProposedDomainFetchDomainsParams) (*PostRemoteAPIJProposedDomainFetchDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProposedDomainFetchDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProposedDomainFetchDomains",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.fetchDomains",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProposedDomainFetchDomainsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProposedDomainFetchDomainsOK), nil

}

/*
PostRemoteAPIJProposedDomainOne post remote API j proposed domain one API
*/
func (a *Client) PostRemoteAPIJProposedDomainOne(params *PostRemoteAPIJProposedDomainOneParams) (*PostRemoteAPIJProposedDomainOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProposedDomainOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProposedDomainOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProposedDomainOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProposedDomainOneOK), nil

}

/*
PostRemoteAPIJProposedDomainRemoveID post remote API j proposed domain remove ID API
*/
func (a *Client) PostRemoteAPIJProposedDomainRemoveID(params *PostRemoteAPIJProposedDomainRemoveIDParams) (*PostRemoteAPIJProposedDomainRemoveIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProposedDomainRemoveIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProposedDomainRemoveID",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.remove/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProposedDomainRemoveIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProposedDomainRemoveIDOK), nil

}

/*
PostRemoteAPIJProposedDomainUnbindMachineID Method JProposedDomain.unbindMachine
*/
func (a *Client) PostRemoteAPIJProposedDomainUnbindMachineID(params *PostRemoteAPIJProposedDomainUnbindMachineIDParams) (*PostRemoteAPIJProposedDomainUnbindMachineIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProposedDomainUnbindMachineIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProposedDomainUnbindMachineID",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.unbindMachine/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProposedDomainUnbindMachineIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProposedDomainUnbindMachineIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

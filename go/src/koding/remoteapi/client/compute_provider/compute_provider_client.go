package compute_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new compute provider API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compute provider API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIComputeProviderCreate creates a JMachine for requested provider with the provided options
*/
func (a *Client) PostRemoteAPIComputeProviderCreate(params *PostRemoteAPIComputeProviderCreateParams) (*PostRemoteAPIComputeProviderCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderCreateOK), nil

}

/*
PostRemoteAPIComputeProviderCreateGroupStack Method ComputeProvider.createGroupStack
*/
func (a *Client) PostRemoteAPIComputeProviderCreateGroupStack(params *PostRemoteAPIComputeProviderCreateGroupStackParams) (*PostRemoteAPIComputeProviderCreateGroupStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderCreateGroupStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderCreateGroupStack",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.createGroupStack",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderCreateGroupStackReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderCreateGroupStackOK), nil

}

/*
PostRemoteAPIComputeProviderFetchAvailable post remote API compute provider fetch available API
*/
func (a *Client) PostRemoteAPIComputeProviderFetchAvailable(params *PostRemoteAPIComputeProviderFetchAvailableParams) (*PostRemoteAPIComputeProviderFetchAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderFetchAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderFetchAvailable",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.fetchAvailable",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderFetchAvailableReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderFetchAvailableOK), nil

}

/*
PostRemoteAPIComputeProviderFetchProviders post remote API compute provider fetch providers API
*/
func (a *Client) PostRemoteAPIComputeProviderFetchProviders(params *PostRemoteAPIComputeProviderFetchProvidersParams) (*PostRemoteAPIComputeProviderFetchProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderFetchProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderFetchProviders",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.fetchProviders",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderFetchProvidersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderFetchProvidersOK), nil

}

/*
PostRemoteAPIComputeProviderFetchSoloMachines post remote API compute provider fetch solo machines API
*/
func (a *Client) PostRemoteAPIComputeProviderFetchSoloMachines(params *PostRemoteAPIComputeProviderFetchSoloMachinesParams) (*PostRemoteAPIComputeProviderFetchSoloMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderFetchSoloMachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderFetchSoloMachines",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.fetchSoloMachines",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderFetchSoloMachinesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderFetchSoloMachinesOK), nil

}

/*
PostRemoteAPIComputeProviderFetchUsage post remote API compute provider fetch usage API
*/
func (a *Client) PostRemoteAPIComputeProviderFetchUsage(params *PostRemoteAPIComputeProviderFetchUsageParams) (*PostRemoteAPIComputeProviderFetchUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderFetchUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderFetchUsage",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.fetchUsage",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderFetchUsageReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderFetchUsageOK), nil

}

/*
PostRemoteAPIComputeProviderPing pings to requested provider implementation
*/
func (a *Client) PostRemoteAPIComputeProviderPing(params *PostRemoteAPIComputeProviderPingParams) (*PostRemoteAPIComputeProviderPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderPing",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.ping",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderPingReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderPingOK), nil

}

/*
PostRemoteAPIComputeProviderRemove post remote API compute provider remove API
*/
func (a *Client) PostRemoteAPIComputeProviderRemove(params *PostRemoteAPIComputeProviderRemoveParams) (*PostRemoteAPIComputeProviderRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderRemove",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.remove",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderRemoveReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderRemoveOK), nil

}

/*
PostRemoteAPIComputeProviderUpdate post remote API compute provider update API
*/
func (a *Client) PostRemoteAPIComputeProviderUpdate(params *PostRemoteAPIComputeProviderUpdateParams) (*PostRemoteAPIComputeProviderUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderUpdate",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.update",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderUpdateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderUpdateOK), nil

}

/*
PostRemoteAPIComputeProviderUpdateTeamCounters Method ComputeProvider.updateTeamCounters
*/
func (a *Client) PostRemoteAPIComputeProviderUpdateTeamCounters(params *PostRemoteAPIComputeProviderUpdateTeamCountersParams) (*PostRemoteAPIComputeProviderUpdateTeamCountersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIComputeProviderUpdateTeamCountersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIComputeProviderUpdateTeamCounters",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.updateTeamCounters",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIComputeProviderUpdateTeamCountersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIComputeProviderUpdateTeamCountersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

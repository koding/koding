package j_provisioner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j provisioner API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j provisioner API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJProvisionerCreate post remote API j provisioner create API
*/
func (a *Client) PostRemoteAPIJProvisionerCreate(params *PostRemoteAPIJProvisionerCreateParams) (*PostRemoteAPIJProvisionerCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProvisionerCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProvisionerCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProvisionerCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProvisionerCreateOK), nil

}

/*
PostRemoteAPIJProvisionerDeleteID post remote API j provisioner delete ID API
*/
func (a *Client) PostRemoteAPIJProvisionerDeleteID(params *PostRemoteAPIJProvisionerDeleteIDParams) (*PostRemoteAPIJProvisionerDeleteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProvisionerDeleteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProvisionerDeleteID",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.delete/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProvisionerDeleteIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProvisionerDeleteIDOK), nil

}

/*
PostRemoteAPIJProvisionerOne post remote API j provisioner one API
*/
func (a *Client) PostRemoteAPIJProvisionerOne(params *PostRemoteAPIJProvisionerOneParams) (*PostRemoteAPIJProvisionerOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProvisionerOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProvisionerOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProvisionerOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProvisionerOneOK), nil

}

/*
PostRemoteAPIJProvisionerSetAccessID post remote API j provisioner set access ID API
*/
func (a *Client) PostRemoteAPIJProvisionerSetAccessID(params *PostRemoteAPIJProvisionerSetAccessIDParams) (*PostRemoteAPIJProvisionerSetAccessIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProvisionerSetAccessIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProvisionerSetAccessID",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.setAccess/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProvisionerSetAccessIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProvisionerSetAccessIDOK), nil

}

/*
PostRemoteAPIJProvisionerSome post remote API j provisioner some API
*/
func (a *Client) PostRemoteAPIJProvisionerSome(params *PostRemoteAPIJProvisionerSomeParams) (*PostRemoteAPIJProvisionerSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProvisionerSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProvisionerSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProvisionerSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProvisionerSomeOK), nil

}

/*
PostRemoteAPIJProvisionerUpdateID post remote API j provisioner update ID API
*/
func (a *Client) PostRemoteAPIJProvisionerUpdateID(params *PostRemoteAPIJProvisionerUpdateIDParams) (*PostRemoteAPIJProvisionerUpdateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProvisionerUpdateIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProvisionerUpdateID",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.update/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProvisionerUpdateIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProvisionerUpdateIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

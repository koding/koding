package j_team_invitation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j team invitation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j team invitation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJTeamInvitationByCode Method JTeamInvitation.byCode
*/
func (a *Client) PostRemoteAPIJTeamInvitationByCode(params *PostRemoteAPIJTeamInvitationByCodeParams) (*PostRemoteAPIJTeamInvitationByCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTeamInvitationByCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTeamInvitationByCode",
		Method:             "POST",
		PathPattern:        "/remote.api/JTeamInvitation.byCode",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTeamInvitationByCodeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTeamInvitationByCodeOK), nil

}

/*
PostRemoteAPIJTeamInvitationCreate Method JTeamInvitation.create
*/
func (a *Client) PostRemoteAPIJTeamInvitationCreate(params *PostRemoteAPIJTeamInvitationCreateParams) (*PostRemoteAPIJTeamInvitationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTeamInvitationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTeamInvitationCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/JTeamInvitation.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTeamInvitationCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTeamInvitationCreateOK), nil

}

/*
PostRemoteAPIJTeamInvitationRemoveID post remote API j team invitation remove ID API
*/
func (a *Client) PostRemoteAPIJTeamInvitationRemoveID(params *PostRemoteAPIJTeamInvitationRemoveIDParams) (*PostRemoteAPIJTeamInvitationRemoveIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTeamInvitationRemoveIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTeamInvitationRemoveID",
		Method:             "POST",
		PathPattern:        "/remote.api/JTeamInvitation.remove/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTeamInvitationRemoveIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTeamInvitationRemoveIDOK), nil

}

/*
PostRemoteAPIJTeamInvitationSendInvitationEmails post remote API j team invitation send invitation emails API
*/
func (a *Client) PostRemoteAPIJTeamInvitationSendInvitationEmails(params *PostRemoteAPIJTeamInvitationSendInvitationEmailsParams) (*PostRemoteAPIJTeamInvitationSendInvitationEmailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJTeamInvitationSendInvitationEmailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJTeamInvitationSendInvitationEmails",
		Method:             "POST",
		PathPattern:        "/remote.api/JTeamInvitation.sendInvitationEmails",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJTeamInvitationSendInvitationEmailsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJTeamInvitationSendInvitationEmailsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

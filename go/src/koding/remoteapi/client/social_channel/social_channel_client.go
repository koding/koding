package social_channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new social channel API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for social channel API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPISocialChannelAcceptInvite post remote API social channel accept invite API
*/
func (a *Client) PostRemoteAPISocialChannelAcceptInvite(params *PostRemoteAPISocialChannelAcceptInviteParams) (*PostRemoteAPISocialChannelAcceptInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelAcceptInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelAcceptInvite",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.acceptInvite",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelAcceptInviteReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelAcceptInviteOK), nil

}

/*
PostRemoteAPISocialChannelAddParticipants post remote API social channel add participants API
*/
func (a *Client) PostRemoteAPISocialChannelAddParticipants(params *PostRemoteAPISocialChannelAddParticipantsParams) (*PostRemoteAPISocialChannelAddParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelAddParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelAddParticipants",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.addParticipants",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelAddParticipantsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelAddParticipantsOK), nil

}

/*
PostRemoteAPISocialChannelByID post remote API social channel by ID API
*/
func (a *Client) PostRemoteAPISocialChannelByID(params *PostRemoteAPISocialChannelByIDParams) (*PostRemoteAPISocialChannelByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelByID",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.byId",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelByIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelByIDOK), nil

}

/*
PostRemoteAPISocialChannelByName post remote API social channel by name API
*/
func (a *Client) PostRemoteAPISocialChannelByName(params *PostRemoteAPISocialChannelByNameParams) (*PostRemoteAPISocialChannelByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelByName",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.byName",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelByNameReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelByNameOK), nil

}

/*
PostRemoteAPISocialChannelCreate post remote API social channel create API
*/
func (a *Client) PostRemoteAPISocialChannelCreate(params *PostRemoteAPISocialChannelCreateParams) (*PostRemoteAPISocialChannelCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelCreateOK), nil

}

/*
PostRemoteAPISocialChannelCreateChannelWithParticipants post remote API social channel create channel with participants API
*/
func (a *Client) PostRemoteAPISocialChannelCreateChannelWithParticipants(params *PostRemoteAPISocialChannelCreateChannelWithParticipantsParams) (*PostRemoteAPISocialChannelCreateChannelWithParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelCreateChannelWithParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelCreateChannelWithParticipants",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.createChannelWithParticipants",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelCreateChannelWithParticipantsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelCreateChannelWithParticipantsOK), nil

}

/*
PostRemoteAPISocialChannelDelete post remote API social channel delete API
*/
func (a *Client) PostRemoteAPISocialChannelDelete(params *PostRemoteAPISocialChannelDeleteParams) (*PostRemoteAPISocialChannelDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelDelete",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.delete",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelDeleteReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelDeleteOK), nil

}

/*
PostRemoteAPISocialChannelFetchActivities post remote API social channel fetch activities API
*/
func (a *Client) PostRemoteAPISocialChannelFetchActivities(params *PostRemoteAPISocialChannelFetchActivitiesParams) (*PostRemoteAPISocialChannelFetchActivitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchActivitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchActivities",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchActivities",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchActivitiesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchActivitiesOK), nil

}

/*
PostRemoteAPISocialChannelFetchActivityCount Method SocialChannel.fetchActivityCount
*/
func (a *Client) PostRemoteAPISocialChannelFetchActivityCount(params *PostRemoteAPISocialChannelFetchActivityCountParams) (*PostRemoteAPISocialChannelFetchActivityCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchActivityCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchActivityCount",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchActivityCount",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchActivityCountReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchActivityCountOK), nil

}

/*
PostRemoteAPISocialChannelFetchChannels post remote API social channel fetch channels API
*/
func (a *Client) PostRemoteAPISocialChannelFetchChannels(params *PostRemoteAPISocialChannelFetchChannelsParams) (*PostRemoteAPISocialChannelFetchChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchChannels",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchChannels",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchChannelsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchChannelsOK), nil

}

/*
PostRemoteAPISocialChannelFetchFollowedChannelCount post remote API social channel fetch followed channel count API
*/
func (a *Client) PostRemoteAPISocialChannelFetchFollowedChannelCount(params *PostRemoteAPISocialChannelFetchFollowedChannelCountParams) (*PostRemoteAPISocialChannelFetchFollowedChannelCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchFollowedChannelCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchFollowedChannelCount",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchFollowedChannelCount",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchFollowedChannelCountReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchFollowedChannelCountOK), nil

}

/*
PostRemoteAPISocialChannelFetchFollowedChannels post remote API social channel fetch followed channels API
*/
func (a *Client) PostRemoteAPISocialChannelFetchFollowedChannels(params *PostRemoteAPISocialChannelFetchFollowedChannelsParams) (*PostRemoteAPISocialChannelFetchFollowedChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchFollowedChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchFollowedChannels",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchFollowedChannels",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchFollowedChannelsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchFollowedChannelsOK), nil

}

/*
PostRemoteAPISocialChannelFetchParticipants post remote API social channel fetch participants API
*/
func (a *Client) PostRemoteAPISocialChannelFetchParticipants(params *PostRemoteAPISocialChannelFetchParticipantsParams) (*PostRemoteAPISocialChannelFetchParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchParticipants",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchParticipants",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchParticipantsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchParticipantsOK), nil

}

/*
PostRemoteAPISocialChannelFetchPinnedMessages post remote API social channel fetch pinned messages API
*/
func (a *Client) PostRemoteAPISocialChannelFetchPinnedMessages(params *PostRemoteAPISocialChannelFetchPinnedMessagesParams) (*PostRemoteAPISocialChannelFetchPinnedMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchPinnedMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchPinnedMessages",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchPinnedMessages",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchPinnedMessagesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchPinnedMessagesOK), nil

}

/*
PostRemoteAPISocialChannelFetchPopularPosts post remote API social channel fetch popular posts API
*/
func (a *Client) PostRemoteAPISocialChannelFetchPopularPosts(params *PostRemoteAPISocialChannelFetchPopularPostsParams) (*PostRemoteAPISocialChannelFetchPopularPostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchPopularPostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchPopularPosts",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchPopularPosts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchPopularPostsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchPopularPostsOK), nil

}

/*
PostRemoteAPISocialChannelFetchPopularTopics post remote API social channel fetch popular topics API
*/
func (a *Client) PostRemoteAPISocialChannelFetchPopularTopics(params *PostRemoteAPISocialChannelFetchPopularTopicsParams) (*PostRemoteAPISocialChannelFetchPopularTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchPopularTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchPopularTopics",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchPopularTopics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchPopularTopicsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchPopularTopicsOK), nil

}

/*
PostRemoteAPISocialChannelFetchProfileFeed post remote API social channel fetch profile feed API
*/
func (a *Client) PostRemoteAPISocialChannelFetchProfileFeed(params *PostRemoteAPISocialChannelFetchProfileFeedParams) (*PostRemoteAPISocialChannelFetchProfileFeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchProfileFeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchProfileFeed",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchProfileFeed",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchProfileFeedReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchProfileFeedOK), nil

}

/*
PostRemoteAPISocialChannelFetchProfileFeedCount post remote API social channel fetch profile feed count API
*/
func (a *Client) PostRemoteAPISocialChannelFetchProfileFeedCount(params *PostRemoteAPISocialChannelFetchProfileFeedCountParams) (*PostRemoteAPISocialChannelFetchProfileFeedCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelFetchProfileFeedCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelFetchProfileFeedCount",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.fetchProfileFeedCount",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelFetchProfileFeedCountReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelFetchProfileFeedCountOK), nil

}

/*
PostRemoteAPISocialChannelGlancePinnedPost post remote API social channel glance pinned post API
*/
func (a *Client) PostRemoteAPISocialChannelGlancePinnedPost(params *PostRemoteAPISocialChannelGlancePinnedPostParams) (*PostRemoteAPISocialChannelGlancePinnedPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelGlancePinnedPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelGlancePinnedPost",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.glancePinnedPost",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelGlancePinnedPostReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelGlancePinnedPostOK), nil

}

/*
PostRemoteAPISocialChannelLeave post remote API social channel leave API
*/
func (a *Client) PostRemoteAPISocialChannelLeave(params *PostRemoteAPISocialChannelLeaveParams) (*PostRemoteAPISocialChannelLeaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelLeaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelLeave",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.leave",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelLeaveReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelLeaveOK), nil

}

/*
PostRemoteAPISocialChannelListParticipants post remote API social channel list participants API
*/
func (a *Client) PostRemoteAPISocialChannelListParticipants(params *PostRemoteAPISocialChannelListParticipantsParams) (*PostRemoteAPISocialChannelListParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelListParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelListParticipants",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.listParticipants",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelListParticipantsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelListParticipantsOK), nil

}

/*
PostRemoteAPISocialChannelPinMessage post remote API social channel pin message API
*/
func (a *Client) PostRemoteAPISocialChannelPinMessage(params *PostRemoteAPISocialChannelPinMessageParams) (*PostRemoteAPISocialChannelPinMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelPinMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelPinMessage",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.pinMessage",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelPinMessageReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelPinMessageOK), nil

}

/*
PostRemoteAPISocialChannelRejectInvite post remote API social channel reject invite API
*/
func (a *Client) PostRemoteAPISocialChannelRejectInvite(params *PostRemoteAPISocialChannelRejectInviteParams) (*PostRemoteAPISocialChannelRejectInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelRejectInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelRejectInvite",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.rejectInvite",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelRejectInviteReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelRejectInviteOK), nil

}

/*
PostRemoteAPISocialChannelRemoveParticipants post remote API social channel remove participants API
*/
func (a *Client) PostRemoteAPISocialChannelRemoveParticipants(params *PostRemoteAPISocialChannelRemoveParticipantsParams) (*PostRemoteAPISocialChannelRemoveParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelRemoveParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelRemoveParticipants",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.removeParticipants",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelRemoveParticipantsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelRemoveParticipantsOK), nil

}

/*
PostRemoteAPISocialChannelSearchTopics post remote API social channel search topics API
*/
func (a *Client) PostRemoteAPISocialChannelSearchTopics(params *PostRemoteAPISocialChannelSearchTopicsParams) (*PostRemoteAPISocialChannelSearchTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelSearchTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelSearchTopics",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.searchTopics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelSearchTopicsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelSearchTopicsOK), nil

}

/*
PostRemoteAPISocialChannelUnpinMessage post remote API social channel unpin message API
*/
func (a *Client) PostRemoteAPISocialChannelUnpinMessage(params *PostRemoteAPISocialChannelUnpinMessageParams) (*PostRemoteAPISocialChannelUnpinMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelUnpinMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelUnpinMessage",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.unpinMessage",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelUnpinMessageReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelUnpinMessageOK), nil

}

/*
PostRemoteAPISocialChannelUpdate post remote API social channel update API
*/
func (a *Client) PostRemoteAPISocialChannelUpdate(params *PostRemoteAPISocialChannelUpdateParams) (*PostRemoteAPISocialChannelUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelUpdate",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.update",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelUpdateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelUpdateOK), nil

}

/*
PostRemoteAPISocialChannelUpdateLastSeenTime post remote API social channel update last seen time API
*/
func (a *Client) PostRemoteAPISocialChannelUpdateLastSeenTime(params *PostRemoteAPISocialChannelUpdateLastSeenTimeParams) (*PostRemoteAPISocialChannelUpdateLastSeenTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialChannelUpdateLastSeenTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialChannelUpdateLastSeenTime",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialChannel.updateLastSeenTime",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialChannelUpdateLastSeenTimeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialChannelUpdateLastSeenTimeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

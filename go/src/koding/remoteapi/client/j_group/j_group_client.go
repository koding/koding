package j_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJGroupAddSubscriptionID post remote API j group add subscription ID API
*/
func (a *Client) PostRemoteAPIJGroupAddSubscriptionID(params *PostRemoteAPIJGroupAddSubscriptionIDParams) (*PostRemoteAPIJGroupAddSubscriptionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupAddSubscriptionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupAddSubscriptionID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.addSubscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupAddSubscriptionIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupAddSubscriptionIDOK), nil

}

/*
PostRemoteAPIJGroupByRelevance post remote API j group by relevance API
*/
func (a *Client) PostRemoteAPIJGroupByRelevance(params *PostRemoteAPIJGroupByRelevanceParams) (*PostRemoteAPIJGroupByRelevanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupByRelevanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupByRelevance",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.byRelevance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupByRelevanceReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupByRelevanceOK), nil

}

/*
PostRemoteAPIJGroupCanEditGroupID post remote API j group can edit group ID API
*/
func (a *Client) PostRemoteAPIJGroupCanEditGroupID(params *PostRemoteAPIJGroupCanEditGroupIDParams) (*PostRemoteAPIJGroupCanEditGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupCanEditGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupCanEditGroupID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.canEditGroup/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupCanEditGroupIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupCanEditGroupIDOK), nil

}

/*
PostRemoteAPIJGroupChangeMemberRolesID post remote API j group change member roles ID API
*/
func (a *Client) PostRemoteAPIJGroupChangeMemberRolesID(params *PostRemoteAPIJGroupChangeMemberRolesIDParams) (*PostRemoteAPIJGroupChangeMemberRolesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupChangeMemberRolesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupChangeMemberRolesID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.changeMemberRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupChangeMemberRolesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupChangeMemberRolesIDOK), nil

}

/*
PostRemoteAPIJGroupCount post remote API j group count API
*/
func (a *Client) PostRemoteAPIJGroupCount(params *PostRemoteAPIJGroupCountParams) (*PostRemoteAPIJGroupCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupCount",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.count",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupCountReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupCountOK), nil

}

/*
PostRemoteAPIJGroupCreate Method JGroup.create
*/
func (a *Client) PostRemoteAPIJGroupCreate(params *PostRemoteAPIJGroupCreateParams) (*PostRemoteAPIJGroupCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupCreateOK), nil

}

/*
PostRemoteAPIJGroupDestroyID post remote API j group destroy ID API
*/
func (a *Client) PostRemoteAPIJGroupDestroyID(params *PostRemoteAPIJGroupDestroyIDParams) (*PostRemoteAPIJGroupDestroyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupDestroyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupDestroyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.destroy/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupDestroyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupDestroyIDOK), nil

}

/*
PostRemoteAPIJGroupEach post remote API j group each API
*/
func (a *Client) PostRemoteAPIJGroupEach(params *PostRemoteAPIJGroupEachParams) (*PostRemoteAPIJGroupEachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupEachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupEach",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.each",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupEachReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupEachOK), nil

}

/*
PostRemoteAPIJGroupFetchAPITokensID post remote API j group fetch API tokens ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchAPITokensID(params *PostRemoteAPIJGroupFetchAPITokensIDParams) (*PostRemoteAPIJGroupFetchAPITokensIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchAPITokensIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchAPITokensID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchApiTokens/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchAPITokensIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchAPITokensIDOK), nil

}

/*
PostRemoteAPIJGroupFetchAdminsID post remote API j group fetch admins ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchAdminsID(params *PostRemoteAPIJGroupFetchAdminsIDParams) (*PostRemoteAPIJGroupFetchAdminsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchAdminsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchAdminsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchAdmins/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchAdminsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchAdminsIDOK), nil

}

/*
PostRemoteAPIJGroupFetchAdminsWithEmailID post remote API j group fetch admins with email ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchAdminsWithEmailID(params *PostRemoteAPIJGroupFetchAdminsWithEmailIDParams) (*PostRemoteAPIJGroupFetchAdminsWithEmailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchAdminsWithEmailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchAdminsWithEmailID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchAdminsWithEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchAdminsWithEmailIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchAdminsWithEmailIDOK), nil

}

/*
PostRemoteAPIJGroupFetchBlockedAccountsID post remote API j group fetch blocked accounts ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchBlockedAccountsID(params *PostRemoteAPIJGroupFetchBlockedAccountsIDParams) (*PostRemoteAPIJGroupFetchBlockedAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchBlockedAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchBlockedAccountsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchBlockedAccounts/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchBlockedAccountsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchBlockedAccountsIDOK), nil

}

/*
PostRemoteAPIJGroupFetchBlockedAccountsWithEmailID post remote API j group fetch blocked accounts with email ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchBlockedAccountsWithEmailID(params *PostRemoteAPIJGroupFetchBlockedAccountsWithEmailIDParams) (*PostRemoteAPIJGroupFetchBlockedAccountsWithEmailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchBlockedAccountsWithEmailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchBlockedAccountsWithEmailID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchBlockedAccountsWithEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchBlockedAccountsWithEmailIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchBlockedAccountsWithEmailIDOK), nil

}

/*
PostRemoteAPIJGroupFetchDataAtID Method JGroup.fetchDataAt
*/
func (a *Client) PostRemoteAPIJGroupFetchDataAtID(params *PostRemoteAPIJGroupFetchDataAtIDParams) (*PostRemoteAPIJGroupFetchDataAtIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchDataAtIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchDataAtID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchDataAt/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchDataAtIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchDataAtIDOK), nil

}

/*
PostRemoteAPIJGroupFetchMembersID post remote API j group fetch members ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchMembersID(params *PostRemoteAPIJGroupFetchMembersIDParams) (*PostRemoteAPIJGroupFetchMembersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchMembersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchMembersID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchMembers/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchMembersIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchMembersIDOK), nil

}

/*
PostRemoteAPIJGroupFetchMembersWithEmailID Method JGroup.fetchMembersWithEmail
*/
func (a *Client) PostRemoteAPIJGroupFetchMembersWithEmailID(params *PostRemoteAPIJGroupFetchMembersWithEmailIDParams) (*PostRemoteAPIJGroupFetchMembersWithEmailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchMembersWithEmailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchMembersWithEmailID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchMembersWithEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchMembersWithEmailIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchMembersWithEmailIDOK), nil

}

/*
PostRemoteAPIJGroupFetchModeratorsID post remote API j group fetch moderators ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchModeratorsID(params *PostRemoteAPIJGroupFetchModeratorsIDParams) (*PostRemoteAPIJGroupFetchModeratorsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchModeratorsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchModeratorsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchModerators/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchModeratorsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchModeratorsIDOK), nil

}

/*
PostRemoteAPIJGroupFetchModeratorsWithEmailID post remote API j group fetch moderators with email ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchModeratorsWithEmailID(params *PostRemoteAPIJGroupFetchModeratorsWithEmailIDParams) (*PostRemoteAPIJGroupFetchModeratorsWithEmailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchModeratorsWithEmailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchModeratorsWithEmailID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchModeratorsWithEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchModeratorsWithEmailIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchModeratorsWithEmailIDOK), nil

}

/*
PostRemoteAPIJGroupFetchMyMemberships post remote API j group fetch my memberships API
*/
func (a *Client) PostRemoteAPIJGroupFetchMyMemberships(params *PostRemoteAPIJGroupFetchMyMembershipsParams) (*PostRemoteAPIJGroupFetchMyMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchMyMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchMyMemberships",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchMyMemberships",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchMyMembershipsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchMyMembershipsOK), nil

}

/*
PostRemoteAPIJGroupFetchMyRolesID post remote API j group fetch my roles ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchMyRolesID(params *PostRemoteAPIJGroupFetchMyRolesIDParams) (*PostRemoteAPIJGroupFetchMyRolesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchMyRolesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchMyRolesID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchMyRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchMyRolesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchMyRolesIDOK), nil

}

/*
PostRemoteAPIJGroupFetchPermissionSetOrDefaultID Method JGroup.fetchPermissionSetOrDefault
*/
func (a *Client) PostRemoteAPIJGroupFetchPermissionSetOrDefaultID(params *PostRemoteAPIJGroupFetchPermissionSetOrDefaultIDParams) (*PostRemoteAPIJGroupFetchPermissionSetOrDefaultIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchPermissionSetOrDefaultIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchPermissionSetOrDefaultID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchPermissionSetOrDefault/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchPermissionSetOrDefaultIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchPermissionSetOrDefaultIDOK), nil

}

/*
PostRemoteAPIJGroupFetchPermissionsID post remote API j group fetch permissions ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchPermissionsID(params *PostRemoteAPIJGroupFetchPermissionsIDParams) (*PostRemoteAPIJGroupFetchPermissionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchPermissionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchPermissionsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchPermissions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchPermissionsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchPermissionsIDOK), nil

}

/*
PostRemoteAPIJGroupFetchResourcesID post remote API j group fetch resources ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchResourcesID(params *PostRemoteAPIJGroupFetchResourcesIDParams) (*PostRemoteAPIJGroupFetchResourcesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchResourcesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchResourcesID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchResources/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchResourcesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchResourcesIDOK), nil

}

/*
PostRemoteAPIJGroupFetchRolesID post remote API j group fetch roles ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchRolesID(params *PostRemoteAPIJGroupFetchRolesIDParams) (*PostRemoteAPIJGroupFetchRolesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchRolesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchRolesID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchRolesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchRolesIDOK), nil

}

/*
PostRemoteAPIJGroupFetchSubscriptionID post remote API j group fetch subscription ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchSubscriptionID(params *PostRemoteAPIJGroupFetchSubscriptionIDParams) (*PostRemoteAPIJGroupFetchSubscriptionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchSubscriptionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchSubscriptionID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchSubscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchSubscriptionIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchSubscriptionIDOK), nil

}

/*
PostRemoteAPIJGroupFetchUserRolesID post remote API j group fetch user roles ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchUserRolesID(params *PostRemoteAPIJGroupFetchUserRolesIDParams) (*PostRemoteAPIJGroupFetchUserRolesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchUserRolesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchUserRolesID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchUserRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchUserRolesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchUserRolesIDOK), nil

}

/*
PostRemoteAPIJGroupFetchUserStatusID post remote API j group fetch user status ID API
*/
func (a *Client) PostRemoteAPIJGroupFetchUserStatusID(params *PostRemoteAPIJGroupFetchUserStatusIDParams) (*PostRemoteAPIJGroupFetchUserStatusIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupFetchUserStatusIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupFetchUserStatusID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchUserStatus/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupFetchUserStatusIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupFetchUserStatusIDOK), nil

}

/*
PostRemoteAPIJGroupIsMemberID Method JGroup.isMember
*/
func (a *Client) PostRemoteAPIJGroupIsMemberID(params *PostRemoteAPIJGroupIsMemberIDParams) (*PostRemoteAPIJGroupIsMemberIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupIsMemberIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupIsMemberID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.isMember/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupIsMemberIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupIsMemberIDOK), nil

}

/*
PostRemoteAPIJGroupJoinID post remote API j group join ID API
*/
func (a *Client) PostRemoteAPIJGroupJoinID(params *PostRemoteAPIJGroupJoinIDParams) (*PostRemoteAPIJGroupJoinIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupJoinIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupJoinID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.join/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupJoinIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupJoinIDOK), nil

}

/*
PostRemoteAPIJGroupKickMemberID post remote API j group kick member ID API
*/
func (a *Client) PostRemoteAPIJGroupKickMemberID(params *PostRemoteAPIJGroupKickMemberIDParams) (*PostRemoteAPIJGroupKickMemberIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupKickMemberIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupKickMemberID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.kickMember/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupKickMemberIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupKickMemberIDOK), nil

}

/*
PostRemoteAPIJGroupLeaveID Method JGroup.leave
*/
func (a *Client) PostRemoteAPIJGroupLeaveID(params *PostRemoteAPIJGroupLeaveIDParams) (*PostRemoteAPIJGroupLeaveIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupLeaveIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupLeaveID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.leave/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupLeaveIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupLeaveIDOK), nil

}

/*
PostRemoteAPIJGroupModifyID post remote API j group modify ID API
*/
func (a *Client) PostRemoteAPIJGroupModifyID(params *PostRemoteAPIJGroupModifyIDParams) (*PostRemoteAPIJGroupModifyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupModifyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupModifyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.modify/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupModifyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupModifyIDOK), nil

}

/*
PostRemoteAPIJGroupOne post remote API j group one API
*/
func (a *Client) PostRemoteAPIJGroupOne(params *PostRemoteAPIJGroupOneParams) (*PostRemoteAPIJGroupOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupOneOK), nil

}

/*
PostRemoteAPIJGroupSearchMembersID post remote API j group search members ID API
*/
func (a *Client) PostRemoteAPIJGroupSearchMembersID(params *PostRemoteAPIJGroupSearchMembersIDParams) (*PostRemoteAPIJGroupSearchMembersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupSearchMembersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupSearchMembersID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.searchMembers/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupSearchMembersIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupSearchMembersIDOK), nil

}

/*
PostRemoteAPIJGroupSendNotificationID Method JGroup.sendNotification
*/
func (a *Client) PostRemoteAPIJGroupSendNotificationID(params *PostRemoteAPIJGroupSendNotificationIDParams) (*PostRemoteAPIJGroupSendNotificationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupSendNotificationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupSendNotificationID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.sendNotification/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupSendNotificationIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupSendNotificationIDOK), nil

}

/*
PostRemoteAPIJGroupSetLimitID post remote API j group set limit ID API
*/
func (a *Client) PostRemoteAPIJGroupSetLimitID(params *PostRemoteAPIJGroupSetLimitIDParams) (*PostRemoteAPIJGroupSetLimitIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupSetLimitIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupSetLimitID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.setLimit/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupSetLimitIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupSetLimitIDOK), nil

}

/*
PostRemoteAPIJGroupSetOAuthID post remote API j group set o auth ID API
*/
func (a *Client) PostRemoteAPIJGroupSetOAuthID(params *PostRemoteAPIJGroupSetOAuthIDParams) (*PostRemoteAPIJGroupSetOAuthIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupSetOAuthIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupSetOAuthID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.setOAuth/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupSetOAuthIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupSetOAuthIDOK), nil

}

/*
PostRemoteAPIJGroupSomeWithRelationship post remote API j group some with relationship API
*/
func (a *Client) PostRemoteAPIJGroupSomeWithRelationship(params *PostRemoteAPIJGroupSomeWithRelationshipParams) (*PostRemoteAPIJGroupSomeWithRelationshipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupSomeWithRelationshipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupSomeWithRelationship",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.someWithRelationship",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupSomeWithRelationshipReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupSomeWithRelationshipOK), nil

}

/*
PostRemoteAPIJGroupSuggestUniqueSlug post remote API j group suggest unique slug API
*/
func (a *Client) PostRemoteAPIJGroupSuggestUniqueSlug(params *PostRemoteAPIJGroupSuggestUniqueSlugParams) (*PostRemoteAPIJGroupSuggestUniqueSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupSuggestUniqueSlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupSuggestUniqueSlug",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.suggestUniqueSlug",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupSuggestUniqueSlugReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupSuggestUniqueSlugOK), nil

}

/*
PostRemoteAPIJGroupToggleFeatureID post remote API j group toggle feature ID API
*/
func (a *Client) PostRemoteAPIJGroupToggleFeatureID(params *PostRemoteAPIJGroupToggleFeatureIDParams) (*PostRemoteAPIJGroupToggleFeatureIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupToggleFeatureIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupToggleFeatureID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.toggleFeature/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupToggleFeatureIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupToggleFeatureIDOK), nil

}

/*
PostRemoteAPIJGroupTransferOwnershipID post remote API j group transfer ownership ID API
*/
func (a *Client) PostRemoteAPIJGroupTransferOwnershipID(params *PostRemoteAPIJGroupTransferOwnershipIDParams) (*PostRemoteAPIJGroupTransferOwnershipIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupTransferOwnershipIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupTransferOwnershipID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.transferOwnership/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupTransferOwnershipIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupTransferOwnershipIDOK), nil

}

/*
PostRemoteAPIJGroupUnblockMemberID post remote API j group unblock member ID API
*/
func (a *Client) PostRemoteAPIJGroupUnblockMemberID(params *PostRemoteAPIJGroupUnblockMemberIDParams) (*PostRemoteAPIJGroupUnblockMemberIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupUnblockMemberIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupUnblockMemberID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.unblockMember/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupUnblockMemberIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupUnblockMemberIDOK), nil

}

/*
PostRemoteAPIJGroupUpdatePermissionsID post remote API j group update permissions ID API
*/
func (a *Client) PostRemoteAPIJGroupUpdatePermissionsID(params *PostRemoteAPIJGroupUpdatePermissionsIDParams) (*PostRemoteAPIJGroupUpdatePermissionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJGroupUpdatePermissionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJGroupUpdatePermissionsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.updatePermissions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJGroupUpdatePermissionsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJGroupUpdatePermissionsIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

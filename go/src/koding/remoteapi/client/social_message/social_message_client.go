package social_message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new social message API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for social message API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPISocialMessageByID post remote API social message by ID API
*/
func (a *Client) PostRemoteAPISocialMessageByID(params *PostRemoteAPISocialMessageByIDParams) (*PostRemoteAPISocialMessageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageByID",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.byId",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageByIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageByIDOK), nil

}

/*
PostRemoteAPISocialMessageBySlug post remote API social message by slug API
*/
func (a *Client) PostRemoteAPISocialMessageBySlug(params *PostRemoteAPISocialMessageBySlugParams) (*PostRemoteAPISocialMessageBySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageBySlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageBySlug",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.bySlug",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageBySlugReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageBySlugOK), nil

}

/*
PostRemoteAPISocialMessageDelete post remote API social message delete API
*/
func (a *Client) PostRemoteAPISocialMessageDelete(params *PostRemoteAPISocialMessageDeleteParams) (*PostRemoteAPISocialMessageDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageDelete",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.delete",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageDeleteReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageDeleteOK), nil

}

/*
PostRemoteAPISocialMessageEdit post remote API social message edit API
*/
func (a *Client) PostRemoteAPISocialMessageEdit(params *PostRemoteAPISocialMessageEditParams) (*PostRemoteAPISocialMessageEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageEditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageEdit",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.edit",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageEditReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageEditOK), nil

}

/*
PostRemoteAPISocialMessageFetch post remote API social message fetch API
*/
func (a *Client) PostRemoteAPISocialMessageFetch(params *PostRemoteAPISocialMessageFetchParams) (*PostRemoteAPISocialMessageFetchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageFetchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageFetch",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.fetch",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageFetchReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageFetchOK), nil

}

/*
PostRemoteAPISocialMessageFetchDataFromEmbedly Method SocialMessage.fetchDataFromEmbedly
*/
func (a *Client) PostRemoteAPISocialMessageFetchDataFromEmbedly(params *PostRemoteAPISocialMessageFetchDataFromEmbedlyParams) (*PostRemoteAPISocialMessageFetchDataFromEmbedlyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageFetchDataFromEmbedlyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageFetchDataFromEmbedly",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.fetchDataFromEmbedly",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageFetchDataFromEmbedlyReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageFetchDataFromEmbedlyOK), nil

}

/*
PostRemoteAPISocialMessageFetchPrivateMessageCount post remote API social message fetch private message count API
*/
func (a *Client) PostRemoteAPISocialMessageFetchPrivateMessageCount(params *PostRemoteAPISocialMessageFetchPrivateMessageCountParams) (*PostRemoteAPISocialMessageFetchPrivateMessageCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageFetchPrivateMessageCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageFetchPrivateMessageCount",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.fetchPrivateMessageCount",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageFetchPrivateMessageCountReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageFetchPrivateMessageCountOK), nil

}

/*
PostRemoteAPISocialMessageFetchPrivateMessages post remote API social message fetch private messages API
*/
func (a *Client) PostRemoteAPISocialMessageFetchPrivateMessages(params *PostRemoteAPISocialMessageFetchPrivateMessagesParams) (*PostRemoteAPISocialMessageFetchPrivateMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageFetchPrivateMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageFetchPrivateMessages",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.fetchPrivateMessages",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageFetchPrivateMessagesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageFetchPrivateMessagesOK), nil

}

/*
PostRemoteAPISocialMessageInitPrivateMessage post remote API social message init private message API
*/
func (a *Client) PostRemoteAPISocialMessageInitPrivateMessage(params *PostRemoteAPISocialMessageInitPrivateMessageParams) (*PostRemoteAPISocialMessageInitPrivateMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageInitPrivateMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageInitPrivateMessage",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.initPrivateMessage",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageInitPrivateMessageReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageInitPrivateMessageOK), nil

}

/*
PostRemoteAPISocialMessageLike post remote API social message like API
*/
func (a *Client) PostRemoteAPISocialMessageLike(params *PostRemoteAPISocialMessageLikeParams) (*PostRemoteAPISocialMessageLikeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageLikeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageLike",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.like",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageLikeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageLikeOK), nil

}

/*
PostRemoteAPISocialMessageListLikers post remote API social message list likers API
*/
func (a *Client) PostRemoteAPISocialMessageListLikers(params *PostRemoteAPISocialMessageListLikersParams) (*PostRemoteAPISocialMessageListLikersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageListLikersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageListLikers",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.listLikers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageListLikersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageListLikersOK), nil

}

/*
PostRemoteAPISocialMessageListReplies post remote API social message list replies API
*/
func (a *Client) PostRemoteAPISocialMessageListReplies(params *PostRemoteAPISocialMessageListRepliesParams) (*PostRemoteAPISocialMessageListRepliesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageListRepliesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageListReplies",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.listReplies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageListRepliesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageListRepliesOK), nil

}

/*
PostRemoteAPISocialMessagePaymentSubscribe post remote API social message payment subscribe API
*/
func (a *Client) PostRemoteAPISocialMessagePaymentSubscribe(params *PostRemoteAPISocialMessagePaymentSubscribeParams) (*PostRemoteAPISocialMessagePaymentSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessagePaymentSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessagePaymentSubscribe",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.paymentSubscribe",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessagePaymentSubscribeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessagePaymentSubscribeOK), nil

}

/*
PostRemoteAPISocialMessagePost post remote API social message post API
*/
func (a *Client) PostRemoteAPISocialMessagePost(params *PostRemoteAPISocialMessagePostParams) (*PostRemoteAPISocialMessagePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessagePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessagePost",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.post",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessagePostReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessagePostOK), nil

}

/*
PostRemoteAPISocialMessageReply post remote API social message reply API
*/
func (a *Client) PostRemoteAPISocialMessageReply(params *PostRemoteAPISocialMessageReplyParams) (*PostRemoteAPISocialMessageReplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageReplyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageReply",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.reply",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageReplyReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageReplyOK), nil

}

/*
PostRemoteAPISocialMessageSearch post remote API social message search API
*/
func (a *Client) PostRemoteAPISocialMessageSearch(params *PostRemoteAPISocialMessageSearchParams) (*PostRemoteAPISocialMessageSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageSearch",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageSearchReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageSearchOK), nil

}

/*
PostRemoteAPISocialMessageSendPrivateMessage post remote API social message send private message API
*/
func (a *Client) PostRemoteAPISocialMessageSendPrivateMessage(params *PostRemoteAPISocialMessageSendPrivateMessageParams) (*PostRemoteAPISocialMessageSendPrivateMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageSendPrivateMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageSendPrivateMessage",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.sendPrivateMessage",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageSendPrivateMessageReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageSendPrivateMessageOK), nil

}

/*
PostRemoteAPISocialMessageUnlike post remote API social message unlike API
*/
func (a *Client) PostRemoteAPISocialMessageUnlike(params *PostRemoteAPISocialMessageUnlikeParams) (*PostRemoteAPISocialMessageUnlikeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPISocialMessageUnlikeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPISocialMessageUnlike",
		Method:             "POST",
		PathPattern:        "/remote.api/SocialMessage.unlike",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPISocialMessageUnlikeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPISocialMessageUnlikeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

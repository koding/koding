package j_stack_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j stack template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j stack template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJStackTemplateCloneID post remote API j stack template clone ID API
*/
func (a *Client) PostRemoteAPIJStackTemplateCloneID(params *PostRemoteAPIJStackTemplateCloneIDParams) (*PostRemoteAPIJStackTemplateCloneIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateCloneIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateCloneID",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.clone/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateCloneIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateCloneIDOK), nil

}

/*
PostRemoteAPIJStackTemplateCreate post remote API j stack template create API
*/
func (a *Client) PostRemoteAPIJStackTemplateCreate(params *PostRemoteAPIJStackTemplateCreateParams) (*PostRemoteAPIJStackTemplateCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateCreateOK), nil

}

/*
PostRemoteAPIJStackTemplateDeleteID post remote API j stack template delete ID API
*/
func (a *Client) PostRemoteAPIJStackTemplateDeleteID(params *PostRemoteAPIJStackTemplateDeleteIDParams) (*PostRemoteAPIJStackTemplateDeleteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateDeleteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateDeleteID",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.delete/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateDeleteIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateDeleteIDOK), nil

}

/*
PostRemoteAPIJStackTemplateForceStacksToReinitID post remote API j stack template force stacks to reinit ID API
*/
func (a *Client) PostRemoteAPIJStackTemplateForceStacksToReinitID(params *PostRemoteAPIJStackTemplateForceStacksToReinitIDParams) (*PostRemoteAPIJStackTemplateForceStacksToReinitIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateForceStacksToReinitIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateForceStacksToReinitID",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.forceStacksToReinit/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateForceStacksToReinitIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateForceStacksToReinitIDOK), nil

}

/*
PostRemoteAPIJStackTemplateGenerateStackID post remote API j stack template generate stack ID API
*/
func (a *Client) PostRemoteAPIJStackTemplateGenerateStackID(params *PostRemoteAPIJStackTemplateGenerateStackIDParams) (*PostRemoteAPIJStackTemplateGenerateStackIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateGenerateStackIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateGenerateStackID",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.generateStack/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateGenerateStackIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateGenerateStackIDOK), nil

}

/*
PostRemoteAPIJStackTemplateHasStacksID post remote API j stack template has stacks ID API
*/
func (a *Client) PostRemoteAPIJStackTemplateHasStacksID(params *PostRemoteAPIJStackTemplateHasStacksIDParams) (*PostRemoteAPIJStackTemplateHasStacksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateHasStacksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateHasStacksID",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.hasStacks/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateHasStacksIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateHasStacksIDOK), nil

}

/*
PostRemoteAPIJStackTemplateOne post remote API j stack template one API
*/
func (a *Client) PostRemoteAPIJStackTemplateOne(params *PostRemoteAPIJStackTemplateOneParams) (*PostRemoteAPIJStackTemplateOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateOneOK), nil

}

/*
PostRemoteAPIJStackTemplateSetAccessID post remote API j stack template set access ID API
*/
func (a *Client) PostRemoteAPIJStackTemplateSetAccessID(params *PostRemoteAPIJStackTemplateSetAccessIDParams) (*PostRemoteAPIJStackTemplateSetAccessIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateSetAccessIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateSetAccessID",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.setAccess/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateSetAccessIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateSetAccessIDOK), nil

}

/*
PostRemoteAPIJStackTemplateSome post remote API j stack template some API
*/
func (a *Client) PostRemoteAPIJStackTemplateSome(params *PostRemoteAPIJStackTemplateSomeParams) (*PostRemoteAPIJStackTemplateSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateSomeOK), nil

}

/*
PostRemoteAPIJStackTemplateUpdateID post remote API j stack template update ID API
*/
func (a *Client) PostRemoteAPIJStackTemplateUpdateID(params *PostRemoteAPIJStackTemplateUpdateIDParams) (*PostRemoteAPIJStackTemplateUpdateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJStackTemplateUpdateIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJStackTemplateUpdateID",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.update/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJStackTemplateUpdateIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJStackTemplateUpdateIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

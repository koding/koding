package git_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new git provider API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for git provider API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIGitProviderCreateImportedStackTemplate post remote API git provider create imported stack template API
*/
func (a *Client) PostRemoteAPIGitProviderCreateImportedStackTemplate(params *PostRemoteAPIGitProviderCreateImportedStackTemplateParams) (*PostRemoteAPIGitProviderCreateImportedStackTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIGitProviderCreateImportedStackTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIGitProviderCreateImportedStackTemplate",
		Method:             "POST",
		PathPattern:        "/remote.api/GitProvider.createImportedStackTemplate",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIGitProviderCreateImportedStackTemplateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIGitProviderCreateImportedStackTemplateOK), nil

}

/*
PostRemoteAPIGitProviderFetchConfig post remote API git provider fetch config API
*/
func (a *Client) PostRemoteAPIGitProviderFetchConfig(params *PostRemoteAPIGitProviderFetchConfigParams) (*PostRemoteAPIGitProviderFetchConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIGitProviderFetchConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIGitProviderFetchConfig",
		Method:             "POST",
		PathPattern:        "/remote.api/GitProvider.fetchConfig",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIGitProviderFetchConfigReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIGitProviderFetchConfigOK), nil

}

/*
PostRemoteAPIGitProviderImportStackTemplateData post remote API git provider import stack template data API
*/
func (a *Client) PostRemoteAPIGitProviderImportStackTemplateData(params *PostRemoteAPIGitProviderImportStackTemplateDataParams) (*PostRemoteAPIGitProviderImportStackTemplateDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIGitProviderImportStackTemplateDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIGitProviderImportStackTemplateData",
		Method:             "POST",
		PathPattern:        "/remote.api/GitProvider.importStackTemplateData",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIGitProviderImportStackTemplateDataReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIGitProviderImportStackTemplateDataOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

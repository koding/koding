package j_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJAccountAcceptInvitationID post remote API j account accept invitation ID API
*/
func (a *Client) PostRemoteAPIJAccountAcceptInvitationID(params *PostRemoteAPIJAccountAcceptInvitationIDParams) (*PostRemoteAPIJAccountAcceptInvitationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountAcceptInvitationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountAcceptInvitationID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.acceptInvitation/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountAcceptInvitationIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountAcceptInvitationIDOK), nil

}

/*
PostRemoteAPIJAccountBlockUserID post remote API j account block user ID API
*/
func (a *Client) PostRemoteAPIJAccountBlockUserID(params *PostRemoteAPIJAccountBlockUserIDParams) (*PostRemoteAPIJAccountBlockUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountBlockUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountBlockUserID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.blockUser/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountBlockUserIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountBlockUserIDOK), nil

}

/*
PostRemoteAPIJAccountByRelevance post remote API j account by relevance API
*/
func (a *Client) PostRemoteAPIJAccountByRelevance(params *PostRemoteAPIJAccountByRelevanceParams) (*PostRemoteAPIJAccountByRelevanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountByRelevanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountByRelevance",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.byRelevance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountByRelevanceReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountByRelevanceOK), nil

}

/*
PostRemoteAPIJAccountCancelRequestID post remote API j account cancel request ID API
*/
func (a *Client) PostRemoteAPIJAccountCancelRequestID(params *PostRemoteAPIJAccountCancelRequestIDParams) (*PostRemoteAPIJAccountCancelRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountCancelRequestIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountCancelRequestID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.cancelRequest/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountCancelRequestIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountCancelRequestIDOK), nil

}

/*
PostRemoteAPIJAccountCheckGroupMembershipID post remote API j account check group membership ID API
*/
func (a *Client) PostRemoteAPIJAccountCheckGroupMembershipID(params *PostRemoteAPIJAccountCheckGroupMembershipIDParams) (*PostRemoteAPIJAccountCheckGroupMembershipIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountCheckGroupMembershipIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountCheckGroupMembershipID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.checkGroupMembership/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountCheckGroupMembershipIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountCheckGroupMembershipIDOK), nil

}

/*
PostRemoteAPIJAccountCount post remote API j account count API
*/
func (a *Client) PostRemoteAPIJAccountCount(params *PostRemoteAPIJAccountCountParams) (*PostRemoteAPIJAccountCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountCount",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.count",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountCountReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountCountOK), nil

}

/*
PostRemoteAPIJAccountExpireSubscriptionID post remote API j account expire subscription ID API
*/
func (a *Client) PostRemoteAPIJAccountExpireSubscriptionID(params *PostRemoteAPIJAccountExpireSubscriptionIDParams) (*PostRemoteAPIJAccountExpireSubscriptionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountExpireSubscriptionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountExpireSubscriptionID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.expireSubscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountExpireSubscriptionIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountExpireSubscriptionIDOK), nil

}

/*
PostRemoteAPIJAccountFetchAppStorageID post remote API j account fetch app storage ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchAppStorageID(params *PostRemoteAPIJAccountFetchAppStorageIDParams) (*PostRemoteAPIJAccountFetchAppStorageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchAppStorageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchAppStorageID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchAppStorage/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchAppStorageIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchAppStorageIDOK), nil

}

/*
PostRemoteAPIJAccountFetchBlockedUsers post remote API j account fetch blocked users API
*/
func (a *Client) PostRemoteAPIJAccountFetchBlockedUsers(params *PostRemoteAPIJAccountFetchBlockedUsersParams) (*PostRemoteAPIJAccountFetchBlockedUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchBlockedUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchBlockedUsers",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchBlockedUsers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchBlockedUsersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchBlockedUsersOK), nil

}

/*
PostRemoteAPIJAccountFetchEmailAndStatusID post remote API j account fetch email and status ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchEmailAndStatusID(params *PostRemoteAPIJAccountFetchEmailAndStatusIDParams) (*PostRemoteAPIJAccountFetchEmailAndStatusIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchEmailAndStatusIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchEmailAndStatusID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchEmailAndStatus/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchEmailAndStatusIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchEmailAndStatusIDOK), nil

}

/*
PostRemoteAPIJAccountFetchEmailFrequencyID post remote API j account fetch email frequency ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchEmailFrequencyID(params *PostRemoteAPIJAccountFetchEmailFrequencyIDParams) (*PostRemoteAPIJAccountFetchEmailFrequencyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchEmailFrequencyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchEmailFrequencyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchEmailFrequency/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchEmailFrequencyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchEmailFrequencyIDOK), nil

}

/*
PostRemoteAPIJAccountFetchEmailID Method JAccount.fetchEmail
*/
func (a *Client) PostRemoteAPIJAccountFetchEmailID(params *PostRemoteAPIJAccountFetchEmailIDParams) (*PostRemoteAPIJAccountFetchEmailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchEmailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchEmailID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchEmailIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchEmailIDOK), nil

}

/*
PostRemoteAPIJAccountFetchEmailsByUsername post remote API j account fetch emails by username API
*/
func (a *Client) PostRemoteAPIJAccountFetchEmailsByUsername(params *PostRemoteAPIJAccountFetchEmailsByUsernameParams) (*PostRemoteAPIJAccountFetchEmailsByUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchEmailsByUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchEmailsByUsername",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchEmailsByUsername",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchEmailsByUsernameReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchEmailsByUsernameOK), nil

}

/*
PostRemoteAPIJAccountFetchFromUserID post remote API j account fetch from user ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchFromUserID(params *PostRemoteAPIJAccountFetchFromUserIDParams) (*PostRemoteAPIJAccountFetchFromUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchFromUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchFromUserID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchFromUser/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchFromUserIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchFromUserIDOK), nil

}

/*
PostRemoteAPIJAccountFetchGroupsID post remote API j account fetch groups ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchGroupsID(params *PostRemoteAPIJAccountFetchGroupsIDParams) (*PostRemoteAPIJAccountFetchGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchGroupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchGroupsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchGroups/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchGroupsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchGroupsIDOK), nil

}

/*
PostRemoteAPIJAccountFetchKitesID post remote API j account fetch kites ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchKitesID(params *PostRemoteAPIJAccountFetchKitesIDParams) (*PostRemoteAPIJAccountFetchKitesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchKitesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchKitesID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchKites/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchKitesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchKitesIDOK), nil

}

/*
PostRemoteAPIJAccountFetchMetaInformationID post remote API j account fetch meta information ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchMetaInformationID(params *PostRemoteAPIJAccountFetchMetaInformationIDParams) (*PostRemoteAPIJAccountFetchMetaInformationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchMetaInformationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchMetaInformationID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchMetaInformation/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchMetaInformationIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchMetaInformationIDOK), nil

}

/*
PostRemoteAPIJAccountFetchMyPermissionsAndRolesID post remote API j account fetch my permissions and roles ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchMyPermissionsAndRolesID(params *PostRemoteAPIJAccountFetchMyPermissionsAndRolesIDParams) (*PostRemoteAPIJAccountFetchMyPermissionsAndRolesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchMyPermissionsAndRolesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchMyPermissionsAndRolesID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchMyPermissionsAndRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchMyPermissionsAndRolesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchMyPermissionsAndRolesIDOK), nil

}

/*
PostRemoteAPIJAccountFetchMyPermissionsID post remote API j account fetch my permissions ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchMyPermissionsID(params *PostRemoteAPIJAccountFetchMyPermissionsIDParams) (*PostRemoteAPIJAccountFetchMyPermissionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchMyPermissionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchMyPermissionsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchMyPermissions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchMyPermissionsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchMyPermissionsIDOK), nil

}

/*
PostRemoteAPIJAccountFetchMySessionsID post remote API j account fetch my sessions ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchMySessionsID(params *PostRemoteAPIJAccountFetchMySessionsIDParams) (*PostRemoteAPIJAccountFetchMySessionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchMySessionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchMySessionsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchMySessions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchMySessionsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchMySessionsIDOK), nil

}

/*
PostRemoteAPIJAccountFetchOAuthInfoID post remote API j account fetch o auth info ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchOAuthInfoID(params *PostRemoteAPIJAccountFetchOAuthInfoIDParams) (*PostRemoteAPIJAccountFetchOAuthInfoIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchOAuthInfoIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchOAuthInfoID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchOAuthInfo/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchOAuthInfoIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchOAuthInfoIDOK), nil

}

/*
PostRemoteAPIJAccountFetchOtaTokenID post remote API j account fetch ota token ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchOtaTokenID(params *PostRemoteAPIJAccountFetchOtaTokenIDParams) (*PostRemoteAPIJAccountFetchOtaTokenIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchOtaTokenIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchOtaTokenID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchOtaToken/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchOtaTokenIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchOtaTokenIDOK), nil

}

/*
PostRemoteAPIJAccountFetchPaymentMethodsID post remote API j account fetch payment methods ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchPaymentMethodsID(params *PostRemoteAPIJAccountFetchPaymentMethodsIDParams) (*PostRemoteAPIJAccountFetchPaymentMethodsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchPaymentMethodsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchPaymentMethodsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchPaymentMethods/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchPaymentMethodsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchPaymentMethodsIDOK), nil

}

/*
PostRemoteAPIJAccountFetchRelativeGroupsID Method JAccount.fetchRelativeGroups
*/
func (a *Client) PostRemoteAPIJAccountFetchRelativeGroupsID(params *PostRemoteAPIJAccountFetchRelativeGroupsIDParams) (*PostRemoteAPIJAccountFetchRelativeGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchRelativeGroupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchRelativeGroupsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchRelativeGroups/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchRelativeGroupsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchRelativeGroupsIDOK), nil

}

/*
PostRemoteAPIJAccountFetchRoleID post remote API j account fetch role ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchRoleID(params *PostRemoteAPIJAccountFetchRoleIDParams) (*PostRemoteAPIJAccountFetchRoleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchRoleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchRoleID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchRole/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchRoleIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchRoleIDOK), nil

}

/*
PostRemoteAPIJAccountFetchSubscriptionsID post remote API j account fetch subscriptions ID API
*/
func (a *Client) PostRemoteAPIJAccountFetchSubscriptionsID(params *PostRemoteAPIJAccountFetchSubscriptionsIDParams) (*PostRemoteAPIJAccountFetchSubscriptionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountFetchSubscriptionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountFetchSubscriptionsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchSubscriptions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountFetchSubscriptionsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountFetchSubscriptionsIDOK), nil

}

/*
PostRemoteAPIJAccountGenerate2FactorAuthKeyID post remote API j account generate2 factor auth key ID API
*/
func (a *Client) PostRemoteAPIJAccountGenerate2FactorAuthKeyID(params *PostRemoteAPIJAccountGenerate2FactorAuthKeyIDParams) (*PostRemoteAPIJAccountGenerate2FactorAuthKeyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountGenerate2FactorAuthKeyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountGenerate2FactorAuthKeyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.generate2FactorAuthKey/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountGenerate2FactorAuthKeyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountGenerate2FactorAuthKeyIDOK), nil

}

/*
PostRemoteAPIJAccountIgnoreInvitationID post remote API j account ignore invitation ID API
*/
func (a *Client) PostRemoteAPIJAccountIgnoreInvitationID(params *PostRemoteAPIJAccountIgnoreInvitationIDParams) (*PostRemoteAPIJAccountIgnoreInvitationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountIgnoreInvitationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountIgnoreInvitationID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.ignoreInvitation/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountIgnoreInvitationIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountIgnoreInvitationIDOK), nil

}

/*
PostRemoteAPIJAccountIsEmailVerifiedID Method JAccount.isEmailVerified
*/
func (a *Client) PostRemoteAPIJAccountIsEmailVerifiedID(params *PostRemoteAPIJAccountIsEmailVerifiedIDParams) (*PostRemoteAPIJAccountIsEmailVerifiedIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountIsEmailVerifiedIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountIsEmailVerifiedID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.isEmailVerified/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountIsEmailVerifiedIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountIsEmailVerifiedIDOK), nil

}

/*
PostRemoteAPIJAccountIsFollowingID post remote API j account is following ID API
*/
func (a *Client) PostRemoteAPIJAccountIsFollowingID(params *PostRemoteAPIJAccountIsFollowingIDParams) (*PostRemoteAPIJAccountIsFollowingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountIsFollowingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountIsFollowingID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.isFollowing/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountIsFollowingIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountIsFollowingIDOK), nil

}

/*
PostRemoteAPIJAccountMarkUserAsExemptID post remote API j account mark user as exempt ID API
*/
func (a *Client) PostRemoteAPIJAccountMarkUserAsExemptID(params *PostRemoteAPIJAccountMarkUserAsExemptIDParams) (*PostRemoteAPIJAccountMarkUserAsExemptIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountMarkUserAsExemptIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountMarkUserAsExemptID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.markUserAsExempt/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountMarkUserAsExemptIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountMarkUserAsExemptIDOK), nil

}

/*
PostRemoteAPIJAccountModifyID post remote API j account modify ID API
*/
func (a *Client) PostRemoteAPIJAccountModifyID(params *PostRemoteAPIJAccountModifyIDParams) (*PostRemoteAPIJAccountModifyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountModifyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountModifyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.modify/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountModifyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountModifyIDOK), nil

}

/*
PostRemoteAPIJAccountOne post remote API j account one API
*/
func (a *Client) PostRemoteAPIJAccountOne(params *PostRemoteAPIJAccountOneParams) (*PostRemoteAPIJAccountOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountOneOK), nil

}

/*
PostRemoteAPIJAccountPushNotificationID post remote API j account push notification ID API
*/
func (a *Client) PostRemoteAPIJAccountPushNotificationID(params *PostRemoteAPIJAccountPushNotificationIDParams) (*PostRemoteAPIJAccountPushNotificationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountPushNotificationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountPushNotificationID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.pushNotification/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountPushNotificationIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountPushNotificationIDOK), nil

}

/*
PostRemoteAPIJAccountSetEmailPreferencesID Method JAccount.setEmailPreferences
*/
func (a *Client) PostRemoteAPIJAccountSetEmailPreferencesID(params *PostRemoteAPIJAccountSetEmailPreferencesIDParams) (*PostRemoteAPIJAccountSetEmailPreferencesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountSetEmailPreferencesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountSetEmailPreferencesID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.setEmailPreferences/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountSetEmailPreferencesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountSetEmailPreferencesIDOK), nil

}

/*
PostRemoteAPIJAccountSetup2FactorAuthID post remote API j account setup2 factor auth ID API
*/
func (a *Client) PostRemoteAPIJAccountSetup2FactorAuthID(params *PostRemoteAPIJAccountSetup2FactorAuthIDParams) (*PostRemoteAPIJAccountSetup2FactorAuthIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountSetup2FactorAuthIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountSetup2FactorAuthID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.setup2FactorAuth/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountSetup2FactorAuthIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountSetup2FactorAuthIDOK), nil

}

/*
PostRemoteAPIJAccountSome post remote API j account some API
*/
func (a *Client) PostRemoteAPIJAccountSome(params *PostRemoteAPIJAccountSomeParams) (*PostRemoteAPIJAccountSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountSomeOK), nil

}

/*
PostRemoteAPIJAccountSomeWithRelationship post remote API j account some with relationship API
*/
func (a *Client) PostRemoteAPIJAccountSomeWithRelationship(params *PostRemoteAPIJAccountSomeWithRelationshipParams) (*PostRemoteAPIJAccountSomeWithRelationshipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountSomeWithRelationshipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountSomeWithRelationship",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.someWithRelationship",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountSomeWithRelationshipReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountSomeWithRelationshipOK), nil

}

/*
PostRemoteAPIJAccountUnblockUserID post remote API j account unblock user ID API
*/
func (a *Client) PostRemoteAPIJAccountUnblockUserID(params *PostRemoteAPIJAccountUnblockUserIDParams) (*PostRemoteAPIJAccountUnblockUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountUnblockUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountUnblockUserID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.unblockUser/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountUnblockUserIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountUnblockUserIDOK), nil

}

/*
PostRemoteAPIJAccountUnlinkOauthID post remote API j account unlink oauth ID API
*/
func (a *Client) PostRemoteAPIJAccountUnlinkOauthID(params *PostRemoteAPIJAccountUnlinkOauthIDParams) (*PostRemoteAPIJAccountUnlinkOauthIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountUnlinkOauthIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountUnlinkOauthID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.unlinkOauth/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountUnlinkOauthIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountUnlinkOauthIDOK), nil

}

/*
PostRemoteAPIJAccountUpdateFlagsID post remote API j account update flags ID API
*/
func (a *Client) PostRemoteAPIJAccountUpdateFlagsID(params *PostRemoteAPIJAccountUpdateFlagsIDParams) (*PostRemoteAPIJAccountUpdateFlagsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountUpdateFlagsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountUpdateFlagsID",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.updateFlags/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountUpdateFlagsIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountUpdateFlagsIDOK), nil

}

/*
PostRemoteAPIJAccountVerifyEmailByUsername post remote API j account verify email by username API
*/
func (a *Client) PostRemoteAPIJAccountVerifyEmailByUsername(params *PostRemoteAPIJAccountVerifyEmailByUsernameParams) (*PostRemoteAPIJAccountVerifyEmailByUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJAccountVerifyEmailByUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJAccountVerifyEmailByUsername",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.verifyEmailByUsername",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJAccountVerifyEmailByUsernameReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJAccountVerifyEmailByUsernameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

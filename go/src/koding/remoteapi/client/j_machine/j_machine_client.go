package j_machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j machine API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j machine API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJMachineApproveID post remote API j machine approve ID API
*/
func (a *Client) PostRemoteAPIJMachineApproveID(params *PostRemoteAPIJMachineApproveIDParams) (*PostRemoteAPIJMachineApproveIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineApproveIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineApproveID",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.approve/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineApproveIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineApproveIDOK), nil

}

/*
PostRemoteAPIJMachineDenyID post remote API j machine deny ID API
*/
func (a *Client) PostRemoteAPIJMachineDenyID(params *PostRemoteAPIJMachineDenyIDParams) (*PostRemoteAPIJMachineDenyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineDenyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineDenyID",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.deny/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineDenyIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineDenyIDOK), nil

}

/*
PostRemoteAPIJMachineOne post remote API j machine one API
*/
func (a *Client) PostRemoteAPIJMachineOne(params *PostRemoteAPIJMachineOneParams) (*PostRemoteAPIJMachineOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineOneOK), nil

}

/*
PostRemoteAPIJMachineReviveUsersID post remote API j machine revive users ID API
*/
func (a *Client) PostRemoteAPIJMachineReviveUsersID(params *PostRemoteAPIJMachineReviveUsersIDParams) (*PostRemoteAPIJMachineReviveUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineReviveUsersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineReviveUsersID",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.reviveUsers/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineReviveUsersIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineReviveUsersIDOK), nil

}

/*
PostRemoteAPIJMachineSetLabelID post remote API j machine set label ID API
*/
func (a *Client) PostRemoteAPIJMachineSetLabelID(params *PostRemoteAPIJMachineSetLabelIDParams) (*PostRemoteAPIJMachineSetLabelIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineSetLabelIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineSetLabelID",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.setLabel/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineSetLabelIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineSetLabelIDOK), nil

}

/*
PostRemoteAPIJMachineSetProvisionerID post remote API j machine set provisioner ID API
*/
func (a *Client) PostRemoteAPIJMachineSetProvisionerID(params *PostRemoteAPIJMachineSetProvisionerIDParams) (*PostRemoteAPIJMachineSetProvisionerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineSetProvisionerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineSetProvisionerID",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.setProvisioner/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineSetProvisionerIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineSetProvisionerIDOK), nil

}

/*
PostRemoteAPIJMachineShareID post remote API j machine share ID API
*/
func (a *Client) PostRemoteAPIJMachineShareID(params *PostRemoteAPIJMachineShareIDParams) (*PostRemoteAPIJMachineShareIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineShareIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineShareID",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.share/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineShareIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineShareIDOK), nil

}

/*
PostRemoteAPIJMachineShareWithID Method JMachine.shareWith
*/
func (a *Client) PostRemoteAPIJMachineShareWithID(params *PostRemoteAPIJMachineShareWithIDParams) (*PostRemoteAPIJMachineShareWithIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineShareWithIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineShareWithID",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.shareWith/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineShareWithIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineShareWithIDOK), nil

}

/*
PostRemoteAPIJMachineSome post remote API j machine some API
*/
func (a *Client) PostRemoteAPIJMachineSome(params *PostRemoteAPIJMachineSomeParams) (*PostRemoteAPIJMachineSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineSomeOK), nil

}

/*
PostRemoteAPIJMachineUnshareID post remote API j machine unshare ID API
*/
func (a *Client) PostRemoteAPIJMachineUnshareID(params *PostRemoteAPIJMachineUnshareIDParams) (*PostRemoteAPIJMachineUnshareIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJMachineUnshareIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJMachineUnshareID",
		Method:             "POST",
		PathPattern:        "/remote.api/JMachine.unshare/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJMachineUnshareIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJMachineUnshareIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

package j_location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j location API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j location API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJLocationFetchStatesByCountryCode Method JLocation.fetchStatesByCountryCode
*/
func (a *Client) PostRemoteAPIJLocationFetchStatesByCountryCode(params *PostRemoteAPIJLocationFetchStatesByCountryCodeParams) (*PostRemoteAPIJLocationFetchStatesByCountryCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJLocationFetchStatesByCountryCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJLocationFetchStatesByCountryCode",
		Method:             "POST",
		PathPattern:        "/remote.api/JLocation.fetchStatesByCountryCode",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJLocationFetchStatesByCountryCodeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJLocationFetchStatesByCountryCodeOK), nil

}

/*
PostRemoteAPIJLocationImportAll post remote API j location import all API
*/
func (a *Client) PostRemoteAPIJLocationImportAll(params *PostRemoteAPIJLocationImportAllParams) (*PostRemoteAPIJLocationImportAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJLocationImportAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJLocationImportAll",
		Method:             "POST",
		PathPattern:        "/remote.api/JLocation.importAll",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJLocationImportAllReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJLocationImportAllOK), nil

}

/*
PostRemoteAPIJLocationImportStates post remote API j location import states API
*/
func (a *Client) PostRemoteAPIJLocationImportStates(params *PostRemoteAPIJLocationImportStatesParams) (*PostRemoteAPIJLocationImportStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJLocationImportStatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJLocationImportStates",
		Method:             "POST",
		PathPattern:        "/remote.api/JLocation.importStates",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJLocationImportStatesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJLocationImportStatesOK), nil

}

/*
PostRemoteAPIJLocationOne post remote API j location one API
*/
func (a *Client) PostRemoteAPIJLocationOne(params *PostRemoteAPIJLocationOneParams) (*PostRemoteAPIJLocationOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJLocationOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJLocationOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JLocation.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJLocationOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJLocationOneOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

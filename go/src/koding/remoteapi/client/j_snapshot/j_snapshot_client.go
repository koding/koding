package j_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j snapshot API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j snapshot API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJSnapshotOne post remote API j snapshot one API
*/
func (a *Client) PostRemoteAPIJSnapshotOne(params *PostRemoteAPIJSnapshotOneParams) (*PostRemoteAPIJSnapshotOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJSnapshotOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJSnapshotOne",
		Method:             "POST",
		PathPattern:        "/remote.api/JSnapshot.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJSnapshotOneReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJSnapshotOneOK), nil

}

/*
PostRemoteAPIJSnapshotRenameID post remote API j snapshot rename ID API
*/
func (a *Client) PostRemoteAPIJSnapshotRenameID(params *PostRemoteAPIJSnapshotRenameIDParams) (*PostRemoteAPIJSnapshotRenameIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJSnapshotRenameIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJSnapshotRenameID",
		Method:             "POST",
		PathPattern:        "/remote.api/JSnapshot.rename/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJSnapshotRenameIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJSnapshotRenameIDOK), nil

}

/*
PostRemoteAPIJSnapshotSome post remote API j snapshot some API
*/
func (a *Client) PostRemoteAPIJSnapshotSome(params *PostRemoteAPIJSnapshotSomeParams) (*PostRemoteAPIJSnapshotSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJSnapshotSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJSnapshotSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JSnapshot.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJSnapshotSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJSnapshotSomeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

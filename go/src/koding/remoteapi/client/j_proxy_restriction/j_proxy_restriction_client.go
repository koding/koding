package j_proxy_restriction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j proxy restriction API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j proxy restriction API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRemoteAPIJProxyRestrictionClear post remote API j proxy restriction clear API
*/
func (a *Client) PostRemoteAPIJProxyRestrictionClear(params *PostRemoteAPIJProxyRestrictionClearParams) (*PostRemoteAPIJProxyRestrictionClearOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProxyRestrictionClearParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProxyRestrictionClear",
		Method:             "POST",
		PathPattern:        "/remote.api/JProxyRestriction.clear",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProxyRestrictionClearReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProxyRestrictionClearOK), nil

}

/*
PostRemoteAPIJProxyRestrictionCreate post remote API j proxy restriction create API
*/
func (a *Client) PostRemoteAPIJProxyRestrictionCreate(params *PostRemoteAPIJProxyRestrictionCreateParams) (*PostRemoteAPIJProxyRestrictionCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProxyRestrictionCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProxyRestrictionCreate",
		Method:             "POST",
		PathPattern:        "/remote.api/JProxyRestriction.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProxyRestrictionCreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProxyRestrictionCreateOK), nil

}

/*
PostRemoteAPIJProxyRestrictionRemove post remote API j proxy restriction remove API
*/
func (a *Client) PostRemoteAPIJProxyRestrictionRemove(params *PostRemoteAPIJProxyRestrictionRemoveParams) (*PostRemoteAPIJProxyRestrictionRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProxyRestrictionRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProxyRestrictionRemove",
		Method:             "POST",
		PathPattern:        "/remote.api/JProxyRestriction.remove",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProxyRestrictionRemoveReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProxyRestrictionRemoveOK), nil

}

/*
PostRemoteAPIJProxyRestrictionSome post remote API j proxy restriction some API
*/
func (a *Client) PostRemoteAPIJProxyRestrictionSome(params *PostRemoteAPIJProxyRestrictionSomeParams) (*PostRemoteAPIJProxyRestrictionSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRemoteAPIJProxyRestrictionSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRemoteAPIJProxyRestrictionSome",
		Method:             "POST",
		PathPattern:        "/remote.api/JProxyRestriction.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRemoteAPIJProxyRestrictionSomeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRemoteAPIJProxyRestrictionSomeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

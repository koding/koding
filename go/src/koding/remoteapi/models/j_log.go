package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JLog j log
// swagger:model JLog
type JLog struct {

	// created at
	CreatedAt strfmt.Date `json:"createdAt,omitempty"`

	// ip
	// Required: true
	IP *string `json:"ip"`

	// payload
	Payload string `json:"payload,omitempty"`

	// severity
	Severity float64 `json:"severity,omitempty"`

	// success
	Success bool `json:"success,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this j log
func (m *JLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JLog) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *JLog) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *JLog) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

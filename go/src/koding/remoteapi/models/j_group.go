package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JGroup j group
// swagger:model JGroup
type JGroup struct {

	// id
	ID string `json:"_id,omitempty"`

	// allowed domains
	AllowedDomains []string `json:"allowedDomains"`

	// avatar
	Avatar string `json:"avatar,omitempty"`

	// body
	Body string `json:"body,omitempty"`

	// config
	Config interface{} `json:"config,omitempty"`

	// customize
	Customize *JGroupCustomize `json:"customize,omitempty"`

	// default channels
	DefaultChannels []string `json:"defaultChannels"`

	// disabled features
	DisabledFeatures interface{} `json:"disabledFeatures,omitempty"`

	// is Api enabled
	IsAPIEnabled bool `json:"isApiEnabled,omitempty"`

	// payment
	Payment interface{} `json:"payment,omitempty"`

	// privacy
	Privacy string `json:"privacy,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// social Api announcement channel Id
	SocialAPIAnnouncementChannelID string `json:"socialApiAnnouncementChannelId,omitempty"`

	// social Api channel Id
	SocialAPIChannelID string `json:"socialApiChannelId,omitempty"`

	// social Api default channel Id
	SocialAPIDefaultChannelID string `json:"socialApiDefaultChannelId,omitempty"`

	// stack templates
	StackTemplates []string `json:"stackTemplates"`

	// title
	// Required: true
	Title *string `json:"title"`

	// visibility
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this j group
func (m *JGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedDomains(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCustomize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultChannels(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStackTemplates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JGroup) validateAllowedDomains(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedDomains) { // not required
		return nil
	}

	return nil
}

func (m *JGroup) validateCustomize(formats strfmt.Registry) error {

	if swag.IsZero(m.Customize) { // not required
		return nil
	}

	if m.Customize != nil {

		if err := m.Customize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customize")
			}
			return err
		}
	}

	return nil
}

func (m *JGroup) validateDefaultChannels(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultChannels) { // not required
		return nil
	}

	return nil
}

func (m *JGroup) validateStackTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.StackTemplates) { // not required
		return nil
	}

	return nil
}

func (m *JGroup) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// JGroupCustomize j group customize
// swagger:model JGroupCustomize
type JGroupCustomize struct {

	// chatlio Id
	ChatlioID string `json:"chatlioId,omitempty"`

	// cover photo
	CoverPhoto string `json:"coverPhoto,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`
}

// Validate validates this j group customize
func (m *JGroupCustomize) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JComputeStack j compute stack
// swagger:model JComputeStack
type JComputeStack struct {

	// id
	ID string `json:"_id,omitempty"`

	// base stack Id
	BaseStackID string `json:"baseStackId,omitempty"`

	// config
	Config interface{} `json:"config,omitempty"`

	// credentials
	Credentials interface{} `json:"credentials,omitempty"`

	// group
	// Required: true
	Group *string `json:"group"`

	// machines
	Machines interface{} `json:"machines,omitempty"`

	// meta
	Meta interface{} `json:"meta,omitempty"`

	// origin Id
	// Required: true
	OriginID *string `json:"originId"`

	// stack revision
	StackRevision string `json:"stackRevision,omitempty"`

	// status
	Status *JComputeStackStatus `json:"status,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this j compute stack
func (m *JComputeStack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOriginID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JComputeStack) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *JComputeStack) validateOriginID(formats strfmt.Registry) error {

	if err := validate.Required("originId", "body", m.OriginID); err != nil {
		return err
	}

	return nil
}

func (m *JComputeStack) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *JComputeStack) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// JComputeStackStatus j compute stack status
// swagger:model JComputeStackStatus
type JComputeStackStatus struct {

	// modified at
	ModifiedAt strfmt.Date `json:"modifiedAt,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this j compute stack status
func (m *JComputeStackStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

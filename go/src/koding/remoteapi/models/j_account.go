package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// JAccount j account
// swagger:model JAccount
type JAccount struct {

	// id
	ID string `json:"_id,omitempty"`

	// environment is created
	EnvironmentIsCreated bool `json:"environmentIsCreated,omitempty"`

	// global flags
	GlobalFlags []string `json:"globalFlags"`

	// is exempt
	IsExempt bool `json:"isExempt,omitempty"`

	// meta
	Meta interface{} `json:"meta,omitempty"`

	// profile
	Profile *JAccountProfile `json:"profile,omitempty"`

	// referral used
	ReferralUsed bool `json:"referralUsed,omitempty"`

	// referrer username
	ReferrerUsername string `json:"referrerUsername,omitempty"`

	// social Api Id
	SocialAPIID string `json:"socialApiId,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this j account
func (m *JAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGlobalFlags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JAccount) validateGlobalFlags(formats strfmt.Registry) error {

	if swag.IsZero(m.GlobalFlags) { // not required
		return nil
	}

	return nil
}

func (m *JAccount) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {

		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

// JAccountProfile j account profile
// swagger:model JAccountProfile
type JAccountProfile struct {

	// avatar
	Avatar string `json:"avatar,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// hash
	Hash string `json:"hash,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// nickname
	Nickname string `json:"nickname,omitempty"`
}

// Validate validates this j account profile
func (m *JAccountProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

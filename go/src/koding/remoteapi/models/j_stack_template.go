package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JStackTemplate j stack template
// swagger:model JStackTemplate
type JStackTemplate struct {

	// id
	ID string `json:"_id,omitempty"`

	// access level
	AccessLevel string `json:"accessLevel,omitempty"`

	// Private config data for stack template
	Config interface{} `json:"config,omitempty"`

	// credentials
	Credentials interface{} `json:"credentials,omitempty"`

	// Stack template description
	Description string `json:"description,omitempty"`

	// group
	// Required: true
	Group *string `json:"group"`

	// machines
	Machines []interface{} `json:"machines"`

	// meta
	Meta interface{} `json:"meta,omitempty"`

	// origin Id
	// Required: true
	OriginID *string `json:"originId"`

	// Unique slug of stack template
	// Required: true
	Slug *string `json:"slug"`

	// template
	Template *JStackTemplateTemplate `json:"template,omitempty"`

	// Title of this stack template
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this j stack template
func (m *JStackTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMachines(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOriginID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JStackTemplate) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *JStackTemplate) validateMachines(formats strfmt.Registry) error {

	if swag.IsZero(m.Machines) { // not required
		return nil
	}

	for i := 0; i < len(m.Machines); i++ {

	}

	return nil
}

func (m *JStackTemplate) validateOriginID(formats strfmt.Registry) error {

	if err := validate.Required("originId", "body", m.OriginID); err != nil {
		return err
	}

	return nil
}

func (m *JStackTemplate) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

func (m *JStackTemplate) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {

		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *JStackTemplate) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// JStackTemplateTemplate j stack template template
// swagger:model JStackTemplateTemplate
type JStackTemplateTemplate struct {

	// Stack template content in JSON format
	Content string `json:"content,omitempty"`

	// Details data for stack template
	Details interface{} `json:"details,omitempty"`

	// Stack template content in YAML format
	RawContent string `json:"rawContent,omitempty"`

	// Sum of stringified JSON content, auto-generated
	Sum string `json:"sum,omitempty"`
}

// Validate validates this j stack template template
func (m *JStackTemplateTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

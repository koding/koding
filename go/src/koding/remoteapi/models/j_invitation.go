package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JInvitation j invitation
// swagger:model JInvitation
type JInvitation struct {

	// code
	// Required: true
	Code *string `json:"code"`

	// created at
	CreatedAt strfmt.Date `json:"createdAt,omitempty"`

	// email
	// Required: true
	Email *string `json:"email"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// group name
	// Required: true
	GroupName *string `json:"groupName"`

	// hash
	// Required: true
	Hash *string `json:"hash"`

	// inviter Id
	InviterID string `json:"inviterId,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// modified at
	ModifiedAt strfmt.Date `json:"modifiedAt,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this j invitation
func (m *JInvitation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JInvitation) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *JInvitation) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *JInvitation) validateGroupName(formats strfmt.Registry) error {

	if err := validate.Required("groupName", "body", m.GroupName); err != nil {
		return err
	}

	return nil
}

func (m *JInvitation) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JProvisioner j provisioner
// swagger:model JProvisioner
type JProvisioner struct {

	// access level
	AccessLevel string `json:"accessLevel,omitempty"`

	// content
	Content interface{} `json:"content,omitempty"`

	// content sum
	ContentSum string `json:"contentSum,omitempty"`

	// group
	Group string `json:"group,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// meta
	Meta interface{} `json:"meta,omitempty"`

	// origin Id
	// Required: true
	OriginID *string `json:"originId"`

	// slug
	// Required: true
	Slug *string `json:"slug"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this j provisioner
func (m *JProvisioner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JProvisioner) validateOriginID(formats strfmt.Registry) error {

	if err := validate.Required("originId", "body", m.OriginID); err != nil {
		return err
	}

	return nil
}

func (m *JProvisioner) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

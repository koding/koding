package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JForeignAuth j foreign auth
// swagger:model JForeignAuth
type JForeignAuth struct {

	// foreign data
	ForeignData interface{} `json:"foreignData,omitempty"`

	// foreign Id
	// Required: true
	ForeignID *string `json:"foreignId"`

	// group
	// Required: true
	Group *string `json:"group"`

	// provider
	// Required: true
	Provider *string `json:"provider"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this j foreign auth
func (m *JForeignAuth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForeignID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JForeignAuth) validateForeignID(formats strfmt.Registry) error {

	if err := validate.Required("foreignId", "body", m.ForeignID); err != nil {
		return err
	}

	return nil
}

func (m *JForeignAuth) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *JForeignAuth) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *JForeignAuth) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x94\xcb\x6a\xf3\x30\x10\x85\xf7\x7e\x0a\xa1\xb5\x2d\x25\xd9\xfc\xa0\x57\xf9\xc9\xc2\x91\x06\x47\x58\x1e\x09\x5d\x4c\xa1\xe4\xdd\x8b\x9c\x8b\x65\x43\x4a\xdb\x45\xea\xae\x8c\xcf\x99\x19\x7f\x9c\x19\xfc\x5e\x11\x42\xbd\x4d\x11\x02\x15\x24\xbf\x11\x42\x15\x8c\xac\xb7\x4a\x63\xc7\xa4\x1d\xa8\x20\x74\x7f\xf8\xc7\x76\x6c\xc7\xf6\xb4\x22\xe4\x52\xe7\xa6\x53\x92\x3d\xc4\xa2\xcb\xa5\x93\xd1\xd2\xd8\x2e\x6b\xff\x27\x8d\xdc\xbc\xc9\x07\x1c\xb5\xb7\x38\x00\xc6\xa2\xe0\xda\xea\xad\x4a\x32\x6a\x8b\xb4\x2e\xf5\xa1\xc5\xb6\x03\x45\x1f\xda\x71\xb6\x29\xb6\x03\x64\xb6\x2b\x69\x53\x7c\xbe\x28\xf2\xd0\xe5\xa9\x82\xd0\x14\x1a\x68\x43\x6c\xf6\xf7\x69\x97\xfa\x5b\x8c\x0a\x46\x30\xd6\x4d\x56\xbd\x32\xee\x9c\x0b\x3d\xb4\xa8\x4e\xf6\xed\x2b\xf0\x0a\xc6\x1f\xf0\x4f\xcf\xe3\x63\x21\x80\xca\x59\x8d\xe5\x4a\x7a\x63\x93\x7a\xcd\x36\x92\x37\x99\xf2\x1c\xa3\x0b\x82\xf3\xf9\x7c\xf8\x04\xc1\x7b\x1d\x61\x13\xc9\xaf\x40\x6f\xb5\xec\x73\xe0\xaa\x98\x42\x63\x42\x04\x13\xc0\x8f\xe0\x5f\x1e\xae\xe0\x3c\x2e\x60\x37\x98\xab\xe0\x3c\x5f\xf4\x73\xce\x45\x9c\xda\xfd\xca\x85\xba\x92\xae\xe1\xda\x6d\x2d\xc5\x70\x8b\xd1\x1d\x9e\x92\xae\x72\x94\x67\x90\xfd\x36\xc2\xbc\xa2\xfc\x99\x44\x97\xb8\xf3\x8f\xb5\xba\x54\x1f\x01\x00\x00\xff\xff\xcf\x2d\x3b\x5e\x22\x07\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 1826, mode: os.FileMode(420), modTime: time.Unix(1446555960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


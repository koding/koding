// Code generated by go-bindata.
// sources:
// fullchain.pem
// privkey.pem
// DO NOT EDIT!

package pem

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullchainPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x96\xc9\xba\xaa\x48\x90\xc7\xf7\x3c\x45\xef\xfd\xfa\x13\x10\x54\x16\xbd\xc8\x64\x46\x12\x4c\x06\x11\x76\x0c\x0a\x87\x59\x11\x19\x9e\xbe\xd3\x73\xab\xea\xde\xba\x55\xdd\xbd\xeb\xb3\x39\x10\x99\x61\x46\x44\xfe\x23\x7e\xfc\xe7\xe7\x0f\xca\xaa\x6e\xfd\x87\x28\x3b\x9e\xae\xe8\x22\xf0\xe4\x6f\x2b\x85\x74\x5d\xde\x94\xa2\x08\x36\xa7\x1c\x4c\x3a\x04\xb9\xee\x82\x70\x58\x38\x3e\xd6\xc6\x23\x1f\x79\x66\x61\x1d\x0e\x97\xf7\x86\xa1\x05\x04\x68\x55\x74\x1f\xaa\xab\x27\x3b\x09\xcb\x50\x9c\x7c\x40\x21\xb9\x9b\xc5\x15\x18\x30\xb7\x2e\x10\x84\x1e\xa8\x2f\x1e\x72\xc2\x49\x01\xa1\x74\xc1\xf8\x24\x4f\x0c\x8a\xae\xb8\x4d\x17\xa8\x24\x8d\xb5\xdc\xae\x90\x46\x2e\x9a\x74\xfc\xbd\x2e\x51\xf2\xdc\xff\x63\x83\x2e\x2b\x4c\xa6\x16\xef\xb4\xa9\xe9\x9b\x0b\x43\xe4\x81\x9b\x32\xd1\xb3\x55\x82\x15\x95\x3e\xf9\xaf\xf3\x48\x82\xf1\xc7\x46\x11\x23\x8b\x4a\xf4\x97\x11\xc1\x70\x56\x24\xe0\xfe\x88\x08\x79\x22\xeb\xd4\xd9\x17\xff\x4c\x58\xa7\x37\x1b\xbe\x25\x29\x43\xbd\x04\x16\xcc\xab\x47\x51\x7d\xa9\x94\x30\xd1\x10\x60\x59\x01\xc0\x16\x01\x3e\x82\xcf\x06\x31\x3f\x91\x67\x19\xbc\x61\x27\x0e\x5c\xcc\x73\x43\x55\xdf\xdd\x9b\xb6\xad\xae\x36\x73\x7c\xbd\x2d\xbf\x9c\xb2\x62\x3e\x6e\xd8\x34\xa3\xb2\xe7\x75\x39\x70\xfb\xc2\xce\xf5\xd7\x49\xbe\x09\xf4\xbd\x2c\x77\xe3\xab\x6b\xb3\x60\xb7\xac\x63\xcf\x6d\x04\xb9\x72\xc6\x47\xf3\x68\xda\x22\xda\x1f\xe1\xeb\x68\x37\x42\x62\x3e\x37\xcc\x53\xaa\xe3\x17\xb5\x5c\xec\x44\x1e\x45\xfc\x5c\x17\x2e\x2b\x37\xef\xb7\x48\xaf\x0f\xf8\x75\x33\x8f\x3b\x53\x2f\x58\x50\x6d\xea\x2d\xbd\xc5\x27\x65\xdc\x6b\x49\x12\x48\x6e\x05\x4e\x78\x0e\x8b\xd3\xd0\xf3\xec\x71\x93\x50\x9e\xea\xd3\xce\xae\xb5\x95\xeb\x71\x32\x46\x5e\xe9\xb4\x8a\x19\x77\xd6\xa6\x2b\xa3\x43\xa3\x45\x23\xd8\xe7\xc9\x23\x29\x04\x55\xb4\x19\xc3\xc9\xe6\x93\xbe\x94\x6d\xe2\xa6\xfb\xfa\x99\x36\x23\x53\x51\x67\x05\xec\xbf\x82\xfe\x6e\x4b\xc5\xc2\x2f\xe3\x95\xbe\x3d\xb2\xf1\xa2\x26\x9b\x44\x28\x78\x55\xa5\xe1\xb3\x7a\xcf\x91\xaa\x05\xbd\x87\x4e\x07\xe6\x9c\xdf\xb7\x09\x7c\x15\x8f\xf0\x5e\x4f\xb6\xac\xdc\xa9\xde\xcd\x59\xb4\x83\xb9\xd1\x64\x7a\x5d\x17\xe8\xe0\xae\x83\x12\xf1\x74\x90\x78\xf5\xc6\xc9\x1e\xcf\xc0\x36\x9c\x75\xbb\x2e\x2d\x57\x04\xae\x3f\x55\x58\x97\x00\x06\xb0\xe3\x74\x51\x92\x44\x91\x02\x79\x3e\x49\x39\x11\x85\x43\x9f\x01\xd6\xb6\xe4\x4a\x24\x90\x07\x39\x82\xb4\x0a\x18\x3f\x33\x30\x0e\x10\xc4\xaa\x28\x0e\x2a\xc0\xbe\x02\x27\x04\x61\x9e\x3f\x61\x2e\x2b\x10\xa7\x12\x05\x4a\x80\x3e\x77\xae\x39\x08\x82\xfb\x51\x26\xef\xe0\x4f\x67\x29\xc7\x01\x84\x8e\xd2\xcf\xbb\x9d\x75\x1d\xdd\x49\x84\xf8\x7c\x5b\x5a\xa9\x42\x2c\xbf\x17\x2f\x67\x0f\xdc\xa9\x6f\x67\x17\xc9\xaa\x04\x82\x1c\xba\x9d\xdb\xf4\x25\xd4\x76\xd9\x38\x26\x8e\x9d\xdc\x1a\x27\xb8\xbe\x8f\xfb\x72\xe8\x3c\x38\xfd\x72\x32\x09\xd4\xa9\x90\xaa\x4f\x94\x39\x85\xfa\x69\x0a\x21\xc4\xbe\x86\x80\xaa\xea\x6c\x41\x67\x1a\xd8\x9b\x8b\xf0\x0e\x77\xd6\x64\x36\xf5\x98\x89\x0c\x87\x5c\x7e\x88\xae\xce\x1a\x05\x7c\x99\xb6\xf5\x94\x89\x3c\x91\x7a\xfa\xa6\x90\x78\xfc\x99\xdf\x0a\xc4\xe2\xcb\xea\x32\xcd\x99\xec\xaf\xe3\x3b\x64\x2f\x0b\xd9\xd8\x27\x2d\x7e\xdd\x24\x79\x4c\xd4\x0b\x9d\xb2\x97\x31\xdc\x19\x7c\xaa\xe1\x31\xd9\x19\x2d\x65\xae\x20\xf8\x51\x03\x59\x96\x56\x60\xe5\xf9\xab\x8a\xae\xe1\x18\xb3\x42\x15\xbb\xfc\x18\xad\x22\xdc\xfe\x28\x72\x0e\x75\x8d\x45\xba\xb6\x22\x90\xab\xb0\xb9\x41\x09\xc8\xe4\x16\x3c\x11\xf2\x79\x68\x7e\xa7\x01\x54\x71\x37\xa3\x4f\x6f\x4c\x79\x16\x4e\x46\xfe\x33\x3d\x90\xcb\x81\xda\xfc\x95\x5e\x99\x6a\xe8\x3b\x22\xea\xf7\x90\x90\xae\x3e\x7f\x29\x96\x08\x4a\x11\xb6\xf9\x02\x1b\xc6\xe9\xe2\x2b\xca\xf1\x27\x2d\xb5\x6e\xe2\xc0\x2a\x32\xd5\xcf\xa9\x24\x50\x78\x5d\x15\xc6\x44\xab\xf2\xb0\xf1\xf3\xb4\xb9\x0c\x71\x70\xa9\x74\xed\x32\x25\x2c\x97\x87\x6d\x95\xfb\xc4\x76\x0b\xea\x31\x5a\x20\x0e\xaf\x06\x4d\xd6\x57\x5d\x55\xc6\x48\x84\x6f\x2a\x69\x66\xf2\x03\xf5\x48\x0c\x65\xc8\x0a\x4b\x44\x16\x42\xd6\xcf\x33\xb6\xa6\x63\x11\xd2\x31\x39\xe5\xf7\x53\x7d\x55\x20\x87\x58\xc4\x2f\x7a\x53\x59\xc0\x57\xc4\x99\xd6\xd5\x4f\x7e\x70\xfd\x54\xff\xdf\xaa\x6d\xee\x8c\x3a\x55\x85\x35\xbe\x3a\xef\xb4\xad\xde\x7f\xce\x47\xea\xd7\x01\x09\x38\x32\x54\x31\x6c\x87\xd1\x3c\x3f\x67\xb6\x6a\x79\x69\x55\x59\xe3\x2c\xad\x8e\x6c\x7a\xce\xc6\x19\xb4\x26\x8e\xa1\xf2\x15\x56\x57\xb0\xe3\xd8\x63\xb6\x55\xa8\x8e\x9f\x99\xfa\xd5\xbd\xb6\xba\x67\xbb\xd7\x07\xa7\x6f\x59\x7f\xa2\x4f\x8b\x59\xc9\x9b\xfb\x05\x32\x33\xdf\x69\x3b\x6f\x91\xe3\x0b\x13\x8f\x8b\x58\xb5\x47\x2f\xbd\x17\xf8\xf4\x40\x53\x98\x8c\xc3\x42\x25\x7b\xf9\x86\x36\x9c\x3a\x76\x65\x66\xd2\xc6\xf6\x90\xf7\xcc\xe8\x85\x2a\x76\xaf\x92\x5f\xbe\xaf\xaf\xd2\x53\xca\x47\x21\x35\x05\x83\x6f\x49\x70\xcd\x91\x59\x5b\x95\x5d\xd0\x56\xff\x50\xcd\xcc\xa0\xde\xd5\xbe\xc2\x4d\xb5\x0d\x5a\x5a\x3c\x9d\x8f\xbc\x6c\x08\xde\x18\x8a\xfa\x59\xc9\x19\xeb\xa9\xb3\xae\x0b\x2a\x7f\x90\xb9\xf3\x16\x87\x7d\xc9\x4a\xed\x79\xdf\xdc\xf5\xe1\x60\x48\x59\xe1\x19\x0f\x4c\xd1\xe9\x2e\xe3\x85\x42\xb5\x2e\xb5\x36\xcb\xbe\xe3\x2b\x74\x61\x47\xbb\x6d\x16\x99\xa5\xe5\xde\xde\x9b\x7e\xb8\x9a\x27\xba\x29\xdb\x35\x9d\x58\x4b\xa2\x95\xa7\x66\xf8\x97\x73\x13\x76\xe1\x6e\xdc\xf1\x94\x9c\xd0\xf7\x3c\x5a\x43\xee\xc1\xdb\xae\x97\x3e\x3c\x10\xc2\x33\x1b\xd5\x15\x3d\x87\x2f\x7f\x2b\x5f\x90\x50\x85\x17\x20\x50\xdf\x20\x93\x2d\xe9\x9f\x70\xfb\xbf\xc0\xf7\x20\x73\x07\xf0\xe2\x9f\xe0\x73\x80\x91\x7b\x82\xe6\x7b\xfc\xd5\x37\xf1\x26\x93\xb4\x3e\xbd\x39\x26\x3d\x49\x38\x34\x4e\x5d\xa4\x13\x20\x59\xa4\x19\x4c\x88\xc1\x44\x9d\x57\xb9\x42\xa2\xfe\x19\x2f\xb2\x58\xa0\xc4\x51\xeb\x96\x28\xa1\x48\x44\xe8\xc5\x41\x36\x86\x57\x87\x49\x89\x7e\x2f\x9a\xc1\xa4\x3b\x4c\x24\x77\x1c\x91\x93\x4e\xca\x5f\xe0\x9b\x78\xd9\x67\x30\x11\xb3\xf0\xce\x44\x28\xe1\x0f\xe8\xd6\x3f\x40\xe7\xc9\x13\xf2\xaa\x85\x70\x6d\x45\x6b\xf4\x01\xdd\x82\xa4\xbf\xdb\xfe\xbf\xd0\x4b\x6a\xe4\xea\xbf\xd7\x80\x0c\x01\x20\x51\x79\x2e\x9f\xc1\xa7\x88\xb8\x13\xc9\x33\x04\xc6\xea\x49\x67\x18\xf3\x2e\xaf\xbd\x76\x46\x66\x71\xf6\x1a\xab\x68\xda\xbf\x52\xc6\x28\xaa\x9a\x4b\xd8\x8d\x75\x57\xa6\xea\x6b\xb3\x1b\xe5\x17\xa4\x60\x3c\xf6\x6d\xe9\xeb\x81\xbd\xcc\xa7\xc1\xe9\x8a\x69\x2c\xb9\xdd\xb5\xe2\xdf\x76\x1b\xb6\xea\xfe\x16\x2a\xb9\x26\xdc\x9c\xa6\xdf\xae\xb4\x56\xb4\x69\x5a\xf4\x52\x1f\x10\x90\x1c\x9a\xe6\x56\xe7\xd4\x59\x2e\xd1\x7d\xe8\xad\x6c\xd6\xab\xd6\x4f\x93\x60\x1c\xf9\x03\xe4\x76\x00\x2e\xe9\x53\x1b\x5b\x78\x7b\xda\xee\x38\x0a\xf8\xe6\xb3\x8d\xd9\x9a\xdb\x80\x3e\xd6\x4d\x79\xd7\x97\x5e\xac\xc0\xa2\x52\x99\x7a\xd7\xef\xfb\x20\x1e\x15\xa3\x50\x20\xda\x46\xb7\x46\x2c\x48\xbf\x6f\x72\x3e\x10\xba\xd8\x38\x72\xfe\xb6\xe6\xe2\xf7\x60\x4d\xf1\x81\x1d\xac\xda\x89\x84\x59\x1c\xf3\x28\x39\x45\x50\x8a\x18\x2a\x57\xc7\xc1\x7d\xa3\xa4\x92\x6b\xce\xdc\x9f\x02\x6f\xe9\x72\xc3\xad\xe4\xb9\xf5\x00\x2d\x69\x56\xb9\xca\x5c\xed\xc4\xfb\x87\x64\x73\x78\xab\xce\xda\x11\x4d\xf7\xbd\xc1\x23\x07\x09\xa6\x97\x70\x14\x47\xa0\x88\x58\xa2\x72\x4f\x53\x9e\x47\xd7\x92\x1c\xa6\x52\x4a\xfb\xb1\xe9\x70\xff\x7a\x61\x73\xb2\x0a\x61\xe2\x91\x08\x26\x19\x80\x98\x7c\xa2\x44\xfa\x94\xe7\xaa\x8d\xe0\xb7\xf8\x32\x22\x24\x19\x6e\x27\xac\x23\xd2\x21\x04\x7c\xe4\x36\xc0\xbf\x90\x54\x55\x91\xf6\x0b\x5d\x88\x0f\xd4\xd0\x94\x7a\x60\xa1\x7e\x99\xcf\x13\x08\xc3\x26\xd6\x1c\x3a\x95\xba\xb7\xc9\xd6\x2b\xe1\xd2\x98\x7d\x4b\xd8\xe9\x23\xc2\xa9\x3f\x38\x56\x11\x76\xd1\x69\x7b\x59\x09\x92\x4a\x2a\x61\xe9\xc9\xfe\x1b\xfc\x4e\xaa\xf9\x13\x7e\x45\x4a\xa6\xe8\xef\x4e\xc4\x87\x88\x8c\x48\x5f\x43\x6f\x2a\xd2\x2c\xfa\xfb\x45\xb5\x8a\x9b\x84\xc6\x54\xca\x4a\x04\x8f\xdf\xf9\xe9\x13\x0e\x11\x8c\x81\x82\xdc\x76\x88\x9d\x83\xa9\x69\x7b\x76\xa3\x98\x95\x76\xdd\xce\xf0\x92\x17\x61\x85\x29\xa4\xe0\x1f\x9b\x81\x63\x21\x79\x98\x44\x10\xaa\x11\x27\x23\x80\x75\x88\x24\x92\xf7\xf2\xc9\x1b\xc3\xfc\x75\xf4\x3e\xf2\x45\x12\x98\xcc\x5f\x78\x46\x7d\x80\xa6\xff\x06\xb4\xef\x88\xfe\x67\x5e\x4f\x67\xf0\x5d\xe4\x3b\x94\xfc\x89\x22\xad\x3b\x77\xe2\x26\x37\xc3\xf0\xf9\xb3\x80\xd6\x92\x10\x66\x47\xea\xe5\x8f\x22\x62\x82\x22\xe1\x65\xd2\x8e\x77\x51\x8c\xb3\xc7\x38\x12\xbe\xe4\x2b\x66\x0c\x44\x99\xa4\x03\x13\x09\x78\x3f\xf8\xcd\xc9\x92\x04\x4e\x1d\xce\x27\xd8\xe9\xb2\xd9\x30\x3d\x59\xcb\xbe\xd7\x30\x27\x2b\x39\xf6\x1f\x72\xff\x08\x27\x47\xd8\x25\xcf\x86\xf6\x9a\x1d\xd5\x57\x97\xfa\xb0\xb5\xbb\x03\xe9\xfc\x7f\x19\x59\xd2\x77\x87\x5a\x9a\xae\x57\xe3\x70\xd8\x20\xe3\x2b\x8a\xf0\x10\x32\x5c\x2a\x76\x50\x65\x8a\x8c\x7a\xd3\x06\x4b\x6f\x95\x25\xe8\xf8\xbe\x6f\xef\xa5\x79\x38\xba\x6c\xc5\x0d\xac\x6a\x3a\xc6\xe1\x4b\x12\x22\xe9\x24\x3f\xdb\xec\x9d\x58\x8a\x9a\x0e\xc1\x46\xa8\x4e\xa7\xad\xd7\x86\x2c\x53\xf4\x9c\x94\x51\xba\xf7\x3e\xba\x42\x14\xe2\x43\x17\x77\x8f\xe1\xa0\x4d\x85\x8c\x42\x61\xf8\x4a\x64\x89\x8b\xaf\x13\x2d\xcc\x4f\x23\xf2\x44\x61\x3d\x31\xa3\x7e\x0f\xf6\x2f\x3e\xd3\x70\x39\xda\xc1\x7b\xa3\x69\x5d\x40\x45\xed\xd8\x2f\x73\x3f\xc8\x7e\x2d\xc7\x4a\xb2\xd9\xba\xa2\xce\x9d\x44\x17\x66\x60\x08\x67\x90\x0e\x5a\xa8\xf3\xf3\x2c\xeb\x9c\x39\xbe\xb4\x7e\x3f\xec\x6c\x8f\x55\x46\x5b\xa0\x83\x7b\x36\xe8\x15\xb5\x7f\x1c\x8e\x36\x72\xb3\xf6\x78\xe0\x13\xab\xcc\x60\x08\x1e\xb3\xdf\xb3\x5b\x53\xd6\xb5\xbb\x04\x2b\xb3\xc3\x2b\x5d\x28\x46\x33\x81\x24\x8c\x8b\xc7\x29\x36\xdb\xc3\xee\x0c\x40\xc3\x5c\xd9\xaa\xa4\xee\xcc\x74\x94\xb2\xb6\x8a\x13\xdb\x54\x6f\xf6\x25\x2d\x05\xc2\x82\x61\x7f\x78\xc3\xa5\x9a\xb9\xb8\xf5\x4a\xdf\xa9\x92\x47\x34\xd4\xbe\xec\x0f\x2d\x5b\xf1\xf3\x8d\x7c\x5f\xad\x7e\xf5\x5f\xff\x0b\x8a\xfe\x3b\x00\x00\xff\xff\x4a\x2a\xe1\xbc\x84\x0d\x00\x00")

func fullchainPemBytes() ([]byte, error) {
	return bindataRead(
		_fullchainPem,
		"fullchain.pem",
	)
}

func fullchainPem() (*asset, error) {
	bytes, err := fullchainPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullchain.pem", size: 3460, mode: os.FileMode(420), modTime: time.Unix(1461015797, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _privkeyPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x95\xb7\x0e\xab\x6a\x02\x84\x7b\x9e\xe2\xf6\x68\x45\x4e\xc5\x16\x3f\x26\xe7\x9c\x3a\x72\x32\x60\x0c\x26\x3d\xfd\x9e\x3d\xed\x9d\x72\x34\xc5\x27\x4d\xf1\xfd\xe7\xff\xe1\x45\x59\xb5\xfe\x71\x3c\x35\x02\x81\xf8\x8f\x2e\xa6\x7f\x5b\xc8\x54\x55\xf1\x70\x55\x1e\x08\xc0\xe2\xdb\x71\xed\xc6\x5e\xe6\x4e\x94\x07\xae\x28\x01\xe0\xbf\x78\xbd\x3c\xdb\xd6\x1f\x40\x2b\x02\xb0\xfc\xd9\xb9\x2f\x56\x6e\xf5\xa7\xfb\xce\xfd\xed\x47\x1c\xa4\x91\x0d\xec\x95\x4c\x72\xe3\x2c\xe6\x3b\x3c\xae\x28\x0f\x93\x5d\x18\xbe\x37\xc6\x31\xac\x22\x0d\x7a\x74\xf1\x18\xc2\x83\x6d\xa7\xa6\xf1\xbe\xc2\x8a\xc6\xb0\xe9\x79\x60\x50\xdf\x93\xe9\x35\x87\xd6\xbc\x96\xe6\xef\x29\x13\x27\x5d\x60\xdb\xef\x60\xe2\xcd\x8e\x56\x42\x0b\xa9\xcd\x27\xb5\xd7\xe1\x18\x1d\xee\xd0\x30\x6b\x04\xf6\x22\x6b\xe4\xf1\x94\x5b\xaf\xa4\xaf\x80\x4e\x90\x80\x03\x4b\x0c\x31\x4b\xb5\xef\xa9\xa5\xbb\xe0\x23\x48\xbd\xb8\xde\xf3\x5c\x3c\xd4\x6e\x66\x81\xa7\xd4\x25\x19\x35\x0f\x98\x98\x31\x6e\xeb\x20\x66\x4a\x82\xee\xad\xf9\x97\x56\x13\x29\xac\xfc\xef\xf3\x53\xd0\x14\x52\x99\xf0\x2d\x11\xe2\x32\xe8\x76\xb5\x6b\xcf\x1a\xef\x77\xce\xc4\x2e\x1b\x0a\xab\x96\xbf\x59\xd2\x56\x8c\x59\xa7\x1a\x8f\xfe\xe0\x54\x98\x1d\xd4\x81\x2b\x63\x5a\xb8\xf2\xcf\x47\xa4\x31\xad\x72\xe8\x6d\x9e\xdf\x23\x84\x79\x84\xdb\x64\x5c\xfe\x74\x70\x02\x48\x37\x82\xdf\xba\x90\x3e\xa5\x0c\xa6\x0c\xed\xe3\x58\x7c\x76\xc3\x3e\xa3\x79\xf6\xb2\xdd\x4e\x28\x09\x5f\xf7\x94\x7c\x2b\x0e\xe2\xe8\x50\xd3\x4b\x99\x16\xbc\x3c\xd0\x9a\x3c\x00\xe2\xab\x6d\x45\x1e\xa8\xeb\x4b\xd2\xd9\x2e\x67\x7f\x92\xd4\x37\x65\xd1\x45\x65\xd0\xa0\x28\x52\xfa\x25\x7e\x3a\x1c\x39\xaa\x98\x5a\x6e\x2f\x99\xdd\x7e\xd0\x94\x27\x4d\x2e\x87\xf9\xf1\x9d\xd3\x6f\xad\xc3\x66\x2e\x24\xb5\x3e\x96\x31\x62\x59\xed\x42\x34\x25\x51\x08\xeb\x34\xa9\xe0\xee\x45\x95\xf8\x51\x99\xcd\xb2\x67\xa3\xf6\x48\x2a\x96\x6a\xf0\x61\xa0\x3f\x17\x0e\x57\xdc\x73\xb9\xde\xca\xb2\x85\x87\xe3\x55\x94\xa1\xa5\x8c\x3a\x69\x23\xe2\xd7\x82\xb5\xaa\x71\x61\xd3\xab\x9d\x61\x40\xdb\x6b\x26\x2c\x5a\x34\x6f\x54\x7f\xa1\x47\x3a\x6a\x74\xd0\x42\xd8\xaf\x12\x5b\x19\x34\x5f\x6b\x49\x2e\x8d\x74\x5d\xed\x13\x92\xa5\x2e\x52\x13\x89\x11\xc9\x70\x9e\x72\x3c\xb4\x16\xf2\xf1\x70\x4a\xf5\x56\x97\xa9\x47\xc9\x6d\xc7\x39\x4c\xd6\xcd\x99\x7b\x82\x85\xb8\xb7\xbd\x14\x61\xfc\x12\x55\x4a\xbf\xfc\x62\x2a\xcd\x90\x06\x36\xa3\x91\xbc\xe0\xc1\xea\x78\x00\x7a\x69\x1b\xf5\xe7\x9a\xd2\x62\x7d\x1f\x5e\x1f\xbb\x09\x46\xdc\x82\x7f\x8a\x29\x7e\xd5\x12\x05\xf5\x44\x6e\xb5\x84\x83\xcc\x7c\x21\x33\x5f\x4d\x57\x8b\x8a\x13\x77\x5c\x4c\x77\x2e\xf3\x9a\x9d\x26\x0a\x4a\x3b\xa6\xdd\xcb\xe2\xf1\xd5\xa6\x22\xa0\xf8\xe1\x21\xbf\x02\x5f\xdc\x92\x5d\xa8\xf4\x00\xf1\x56\x92\x8e\x06\x8f\x76\xae\x5d\xf9\x4f\xa0\xdb\x3a\x13\x94\x12\xc8\xdb\xf0\x46\xcb\xec\x11\xe1\xd6\xb2\x0d\x0d\xd3\x66\x3e\x10\x7e\x4e\xba\x54\x28\x1e\xbd\xbb\x77\x81\x2f\xee\x6f\x24\x2a\x16\xda\x5c\x0c\x8b\x86\x9c\x7d\xc2\xc1\x80\xf3\x78\xd0\x3a\x57\x3e\xfa\xfd\xb4\x31\x80\x71\xb1\x7e\xb4\xd6\x9a\xd4\xe9\xdb\xad\x8c\xe3\x6b\x7f\x57\xaa\x81\x5f\x87\x49\x9c\xc1\xda\xf6\x32\xbc\xe1\x33\x34\xd7\x87\xc5\xc9\x9c\xd6\xb3\xe5\xde\x10\xf9\x6f\x20\x7a\xeb\xc4\x59\x5f\xe4\xb6\xbf\xc8\xe8\x75\xdb\x8d\xe9\x49\xc7\x0c\xb3\xb3\x8a\xd0\x69\x74\x91\x2e\x40\x18\x5d\x5c\x53\x5b\xb7\x1b\x28\xd5\x65\x59\xcd\xae\x53\x1a\x2e\x4c\xc6\x3d\x5b\x9f\xea\xa4\x3b\x28\xc3\x37\x15\x65\x92\xad\xf8\xcd\xa9\xf7\xf1\x32\xdb\x7e\x5b\x2c\xe5\x71\x4c\xc5\xed\xe9\x2b\xa7\xbf\xee\x33\x5c\x1c\x7b\xfe\xa0\xb8\x35\x71\x8e\x5a\x2b\xbf\xec\xbc\xfc\x14\x57\xbf\x4b\xfa\xdd\x23\x58\x02\x75\x02\xe9\xe2\xee\x35\x4e\xa3\x7a\xb5\x1f\xf5\xc3\x94\xf0\x80\x75\xf7\x35\x2d\xfe\x8a\xcd\x3e\x8e\xd2\x9d\x5d\x55\x90\x58\x7c\x10\x3a\x9a\x3f\xc5\x69\xfe\x41\x06\xda\x8d\xf2\xdc\x3b\x8a\x52\x66\x28\x77\xac\x5b\x2c\xcc\x1b\xac\x22\x4f\x1f\x0d\x5e\x03\xa9\xdb\xce\x03\x16\x48\x9f\x6a\x89\xd3\x93\xa6\x8c\x30\x22\xe8\x8c\xd6\x80\xe5\x02\x26\x30\x84\xfb\xd7\xb3\xf1\x22\x81\x8b\x63\x06\x85\x7d\x44\xf1\x42\xf2\x71\x25\x31\xd1\x91\xdf\x37\x73\x59\x82\xf0\xab\x97\xca\xae\x77\xeb\xeb\x89\x1c\x93\x53\xb9\xf6\x2e\xa1\xd1\x4d\x59\xc0\x54\xf5\xca\x7e\x09\x4a\xeb\xeb\xf2\x7c\xfb\xcf\x67\xf3\x7a\xa4\x3d\x4e\x43\x48\x6e\x97\x24\xb1\x35\x7b\x6e\x60\xd7\x32\x71\x11\xa1\xd6\x44\xdb\x34\xe2\x81\xab\xf3\x2d\x9f\x02\x28\xa8\x45\x1c\x47\x93\xb7\xd1\x05\x2b\x27\xb1\x95\xd9\x98\x86\x85\xd9\xd1\xf2\xb1\xc3\xbe\x92\x73\x97\xa5\x5c\x26\x8e\x05\x9c\xe8\xa5\x28\x6b\xb3\x83\x31\x1e\x32\xed\xf7\x29\xc4\xf5\xc4\x4c\x3e\xd0\xc5\x1f\x41\x14\x7d\xbb\x86\xed\xe3\x2f\x36\x20\x5e\xdd\x00\xf3\x8d\x6a\x8a\x40\x8b\xf4\x51\xd3\x7d\x3b\x13\x9c\xd7\x5d\x59\xf3\xb5\x89\xb1\x9a\x02\x15\x1c\x9f\x5a\x98\xce\xd5\x74\xbd\x26\xa8\xa0\xc1\xb0\x79\x0f\x71\xb8\x7d\x22\xde\x24\x2b\xa2\x54\x64\x06\x2f\xb4\x08\xa4\xe8\x3c\x6b\xd5\x8f\x6b\x7f\x59\xc7\xb5\xaa\xc0\x22\x03\xdf\x0f\x8b\x97\x9f\x5c\x2d\xb5\xd8\xcf\x53\x2c\x45\x6f\xef\x10\x15\xdb\x45\x13\x0e\x4e\x7b\x0e\xe3\x1d\x1c\x3f\x41\xfb\x30\xc8\x4e\x34\xd4\x34\x92\x97\x66\x26\xac\x53\x2d\x47\x18\x2b\x83\x8f\x06\xca\xf6\xaa\xc5\x22\x23\x37\x8d\x70\x73\xaf\x65\x64\x59\x36\xa1\xb2\x48\xbb\xec\x62\xf9\x7a\xae\x8a\x3d\x40\x61\xe2\x83\xfa\xfb\xbe\x7f\xbc\x16\xe6\x8e\xcd\xdb\x0c\x0a\x04\xb4\x4b\x9e\xf2\x88\x8c\x6a\x17\xe7\xc9\xa3\x70\x8e\xc7\x77\x01\x12\x23\x9d\xa2\xbd\x20\x46\xa3\xea\xae\x1e\x76\x14\x76\xf0\xa3\x26\xb3\xb7\x7f\x0e\xc6\xb6\xfd\x17\xfa\xeb\x1d\xd1\x12\xfe\xed\xa2\xff\x05\x00\x00\xff\xff\xd1\x18\xd3\xec\xa8\x06\x00\x00")

func privkeyPemBytes() ([]byte, error) {
	return bindataRead(
		_privkeyPem,
		"privkey.pem",
	)
}

func privkeyPem() (*asset, error) {
	bytes, err := privkeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "privkey.pem", size: 1704, mode: os.FileMode(420), modTime: time.Unix(1461015797, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullchain.pem": fullchainPem,
	"privkey.pem": privkeyPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fullchain.pem": &bintree{fullchainPem, map[string]*bintree{}},
	"privkey.pem": &bintree{privkeyPem, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// fullchain.pem
// privkey.pem
// DO NOT EDIT!

package pem

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullchainPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x96\x49\xb7\xa2\x4a\x12\xc7\xf7\x7c\x8a\xde\x7b\xfa\x88\x20\x88\x8b\xb7\xc8\x84\x24\x01\x49\x94\x79\xd8\x31\xc9\x2c\x2a\xca\xf4\xe9\xfb\xdc\x7b\x5f\x55\xdd\xae\xea\xf3\xda\x9d\x41\xe4\xc9\xff\x3f\x08\xe2\x17\xff\xfe\xf8\x41\x84\x55\xe3\x5f\x22\xb2\x1c\x55\x56\x45\xe0\xa0\xcf\x28\x45\x54\x15\x6d\x6a\x51\x04\x9b\x53\x01\x26\x15\x82\x42\xb5\x01\x5d\x6f\x32\x07\x0b\x3c\xb4\x36\xae\xca\xf5\xd5\xfb\xcc\x4f\x2c\x77\x26\x80\xc6\xa2\xfd\xc0\xb6\x9a\xb0\x92\x89\xa0\x38\xb9\x80\x22\xa8\x9f\xc5\x15\x68\xb0\x30\x3c\x08\x42\x07\xb4\x9e\x43\xac\x70\x92\x41\x28\x79\xa6\x79\x42\xd3\x8e\x44\x81\x79\x4b\x17\x28\x27\x9d\xb1\xe4\x01\xa4\x89\x4d\x26\xd5\xfc\x7c\x2e\x51\x68\xbe\xff\x91\xa0\x22\x79\x97\xe1\x72\x4c\xbb\x96\xce\x6d\x18\x92\x15\xe4\xf2\x44\xcf\x46\x0d\x58\x52\xbb\x0b\x71\x10\x47\x24\x18\x7f\xc4\x28\xa3\x46\x13\xa9\xc9\xcf\x20\x81\xe1\x2c\x4b\xc0\xfe\x52\x44\x1c\x91\xb1\xda\xac\xe2\x9e\x09\x63\xdd\xf5\x8e\xbb\x11\x55\x85\x6a\x0d\x0c\x58\x34\x8f\xb2\xa9\x30\x75\x9c\x68\x08\x4c\x24\x03\x70\x16\x81\x29\x80\x8f\x04\xb1\x38\x89\xc0\x44\x60\x8a\x77\x55\xa2\x0c\x9c\x87\x90\x2b\xed\x8a\xe1\x31\x56\xe1\x8b\x0b\x53\x10\xe0\xfb\x33\x12\x3d\x42\x87\x27\x4a\x1c\x40\x54\x15\x8a\xaf\x08\x9a\xf5\x78\xab\x05\xce\x94\xe9\x95\xee\x55\x9b\xcb\xa2\xa0\xa4\xe7\x2d\x7b\x43\x8c\x76\x50\x37\x31\x17\xcf\x5a\x9c\x1c\xa7\x3d\x88\x4e\x8f\x25\xb6\xdb\x3b\xad\xc3\x2b\xb5\xd9\x56\x3b\x07\x7b\x9d\xe9\xde\x3b\xab\xab\xdd\x61\x2f\xbd\xe6\xa6\xcf\xef\xd7\xee\xc5\x24\xf4\xe1\x96\x87\x55\xe3\x2e\xa2\x55\x5e\xe8\x07\x38\x6b\xb5\x99\x2a\xa7\x4b\x5a\x58\x81\xd5\x6f\x8f\x5e\x4d\x99\xd8\x44\x06\xa3\x83\xdd\xf8\x0e\x58\xdb\x7b\x57\xc3\xd8\xe7\x96\x72\xd7\xa1\xd3\xdf\x0e\xd2\xcb\x49\x85\x56\x4d\x18\x66\xca\x62\x7e\x15\xc3\x56\x4b\x73\xf1\x72\x38\xef\x13\x41\x7e\xa1\x7d\x31\x51\x95\x3a\xeb\xa9\xae\x19\xaa\xed\xbf\xf7\x57\x5e\x3b\x64\x63\x2a\xcc\xc2\xb9\xe4\x07\x8b\x67\x74\xdf\xf7\x80\x27\xc9\x84\xe6\xae\x6c\xb9\x91\xca\xe3\xcb\x2e\x3a\x41\xda\x3c\xb5\xc7\x75\x0c\x37\xc5\x40\xa9\x8f\xb4\x05\xa0\xc5\x39\x82\xdc\x5e\x8f\xc4\xe2\x88\x76\xc2\xe6\x61\xe2\xcc\x3c\x5c\x5f\xc7\x9c\x6c\x97\xfc\x59\x90\x73\x4a\xdf\x21\xb3\xc7\xb1\x38\xa9\x12\x30\x01\xec\xf7\xaa\x28\x49\xa2\x48\x81\xa2\x98\xa4\x22\x94\x3c\x8b\xbe\x00\x53\xd9\x42\x60\x4a\xa0\xf0\x0b\x02\x69\x0c\x76\x6e\xa6\x99\xa6\x4f\xa0\x89\x45\x71\xc0\xc0\x74\x65\x38\x11\x08\x8b\xe2\x09\x0b\x24\x43\x33\x95\x28\x50\x03\xf2\xf1\xce\x15\x8b\x40\x70\x15\x10\xa8\x01\xf8\x71\x58\x2a\x4c\x1f\x42\x67\xd7\xd6\x1d\xee\xfa\x2e\x33\x66\x6f\x18\x1a\x13\xdf\x51\xa4\x8c\x81\xa6\xe4\x0e\xb8\x52\x9f\x87\x6d\x82\xb0\x04\xfc\x02\xda\xbd\xdd\xdd\x6b\xa8\xb0\xd9\xfb\x9d\x58\xe7\x24\xef\x2c\x3f\x18\x05\xbe\x1e\x7a\x07\x4e\xdf\x6e\x86\xc0\xb4\x1a\x82\xd5\x89\xd2\xa7\x50\x3d\x4d\x21\x84\xa6\xab\x10\x80\xb1\xca\x94\x74\xa6\x00\x5e\x5f\x8e\x63\xc8\x1a\x93\xde\xb5\xef\x4c\xdc\xed\xc9\xc2\x0d\x51\x60\xad\x91\xcf\xd5\xe9\xad\x9d\x32\x91\x1b\xd3\x2e\x1d\x29\x22\x0a\xbf\xfc\xad\x40\x2c\x2b\xa3\xcf\x14\x6b\x3a\x57\xc2\x18\x32\xde\x92\x89\xdc\x3d\xb9\x99\xaf\x5c\x22\xef\x04\x7b\x74\xca\x78\xef\x90\xd5\xb8\x54\x31\xdf\x09\xab\xdd\x28\x7d\x05\xfe\x57\x0d\x10\x92\x56\x60\x14\xc5\xab\x89\x82\xf0\x1d\x33\xc7\x26\xb6\xb9\x77\xb4\x8a\x70\xfb\x55\xe4\x02\xaa\x0a\x43\x54\x65\x25\xa0\xc0\xb0\xcb\xa1\x04\x90\x48\x01\x47\x84\x5c\x11\xea\x9f\x36\x00\x16\xd9\x99\x7c\x7c\x1b\x53\x91\x85\x93\x56\xfc\xb2\x07\x0a\xe4\xe3\xee\xa7\xbd\x3a\x55\xbe\x14\x51\xbf\x4b\x22\x2a\x7e\x7e\x2b\x96\x08\x6a\x11\xde\x8a\x05\x76\x3b\xab\x8f\x03\x52\x98\x1f\xb6\x70\xdb\xc5\xbe\x51\x66\xd8\x2d\xa8\xc4\x97\x39\x15\x1f\xdf\x89\xd2\x14\x61\xe7\x16\x69\xe7\x0d\xb1\xef\x35\xaa\xe2\x4d\x09\xb3\x2f\xc2\x5b\x53\xb8\x9d\x37\xe4\x7e\xfb\x8e\x16\x68\x86\x81\x46\xc7\xbe\xb7\xaa\x58\x7e\x47\x22\x1c\xa9\xa4\x9b\x39\x15\xb7\x6f\x15\xcb\x75\xc8\x1c\x97\x08\xcb\xef\x90\x71\x8b\x8c\x69\xe9\x58\x84\x74\x8c\xdd\x3f\x6e\x75\xf1\x71\x88\x7d\x83\x53\x71\x34\x52\x99\xcf\x35\x2a\x96\x69\x15\x7f\xf8\x83\xeb\x47\xf5\xff\x57\xb5\x75\x56\x6b\x53\x7c\x5c\xe3\xc0\x1a\xd3\x5b\x33\xfe\x98\x8f\xd4\xf7\x01\x09\xf6\x2a\x04\x26\xe4\xf2\x99\x13\x46\x93\xd3\x66\x0b\x34\xef\xb1\x94\xf7\x27\x76\x9b\x88\xed\x03\x59\xf9\xe6\x14\x5c\x4a\x69\xfb\x3c\x1d\xba\x58\xdb\x49\xdd\x83\x02\x31\x17\xc4\x67\x79\x6c\xaf\x58\xea\xda\xd3\x75\x7d\x0c\xf4\x28\x79\x9d\x9c\xd9\x0f\xf7\xd8\x6c\x16\x5f\xce\x8e\x21\xfb\xe8\x6f\xaf\x58\xda\x83\xf2\x6a\xba\x56\x92\x1f\xc8\xc3\xaf\x48\xaf\x67\x98\xba\xaf\xca\x05\x23\xf3\xfd\xc8\xdb\xf1\xc0\x00\xdf\x3c\x2e\xda\xfd\x34\x16\xb4\x69\x74\x98\x9d\xf8\x4e\xe3\xf4\x25\xb8\x38\x46\x2f\x0c\x74\x96\x37\x96\x7e\xb3\xf7\xaf\xc7\x95\xe6\xa3\x60\x2d\xb6\x2c\x75\x95\xc6\x3d\x7e\xc6\x5b\x03\x60\x86\xf1\xc4\xbb\x6e\x4e\xcc\xcd\xdc\xf0\x27\x72\x7b\x20\xf7\xb6\x01\xfd\xe1\xe5\xee\x91\xb6\xaf\x5b\x2d\x33\x8d\xcc\x91\x6d\x77\x83\x06\x31\xa5\x0f\x6d\x80\x84\x33\x75\x6f\xd0\xbc\x3f\x72\x98\x17\xab\x84\x19\xa6\x52\xa4\x9b\x07\x53\x1b\x30\x82\x79\x4f\x1f\xf9\xa7\xae\x85\xee\x26\xc9\x94\xdd\x4b\xbb\x9e\x5c\xd3\x53\x7c\x57\x24\x7d\x4c\xe0\x54\xc7\xcb\x5a\xa7\x94\x77\x1e\xb8\xe4\xa4\xc8\x43\xe5\x57\x9c\x47\x96\x22\xdf\xe3\x4c\xee\x4f\xf7\x1b\xca\x1d\x5f\x73\x5e\x17\xfb\x79\x70\xca\x3d\xf5\x09\x32\x64\x48\x7f\xc2\xed\xff\x81\xaf\xf9\x00\x1f\xfb\xf8\x01\x3e\x53\x2c\x64\x68\x16\x00\x00\xef\x2c\xa7\x4c\xaf\x97\xf9\x72\x13\xa5\x5f\xa4\xf8\x02\xc5\x20\x03\x09\x6c\x29\x62\x9b\x93\x5a\xfc\x0d\xb9\xf9\x85\x62\x3f\xbb\x67\x58\x1e\x54\xd9\xb8\x47\x0c\x57\x66\x8a\xb7\x44\x36\x74\xd3\x9b\xb7\x66\x22\x94\x92\x65\x3f\xcb\x2b\xf0\x7e\x60\x89\x92\x1a\xcb\xf1\x44\x68\x27\xcc\x91\x56\x91\x01\x55\xb9\x58\x09\xdc\x07\x92\x83\x18\x22\x91\xd9\x58\x11\x63\x48\x80\x36\xda\x3e\x90\x1c\x75\xfe\x2d\x36\x51\x76\x8d\x74\x02\x9a\x8f\x01\x87\x60\x49\x44\xcf\x23\xb3\x5c\x03\xf7\xeb\x86\xde\x91\xdc\xb9\xcd\xc4\x6c\x55\xd1\xcf\xbe\x9d\xd5\x15\x94\x3f\x15\xe0\xe6\x8f\x84\xc2\x0c\x3c\x3a\xc6\xc7\x25\x0e\x2c\xee\x53\xd1\x6f\xb4\xfc\x0e\x4b\xea\x77\x5a\xde\x0c\x42\x04\xf9\xd9\xea\x4d\xce\xa6\x2d\xcd\x16\x07\xa3\x0f\x57\xe9\xb1\x5b\xdd\x0e\xdb\x41\x39\x26\xfb\x9d\x10\x88\xb6\x7e\xc8\xf7\x36\x8d\x64\xea\xc1\x77\xb9\x61\x96\xe1\x41\x47\x8f\x19\x57\x8a\xc8\x5f\xea\x2c\x77\x3a\x81\xcf\xaa\x34\xb9\x73\x85\x0f\xae\x3b\x0e\xc7\xb7\xed\xc5\xcc\x71\x36\x2f\xb8\x39\xb7\x91\x72\xd9\xbe\xe3\x88\xf7\x81\x40\xd9\x64\xde\x2c\xcd\x8e\x45\x95\x9d\x59\xf3\x2b\xe6\x0f\xb7\x41\xa9\x53\xa0\x68\xcb\x90\xf3\xa9\xcc\x0f\xdc\x89\x3f\xec\x20\xe7\xc4\xe1\x3b\x1d\x8f\x89\xb3\xf8\xb1\x21\xd4\xa7\xe6\x64\x4a\x6a\x44\x53\x91\x50\x6e\xef\xd1\x63\xef\x76\xc8\x45\xeb\xb1\xe5\xc3\x93\xb2\x1c\x47\x5e\x6a\x13\xa6\xec\x6f\x6b\xe9\x6c\x82\xf2\xb1\x99\x58\xf8\x1c\xe3\x89\xf1\xe4\x1b\x8b\x4e\x3c\x6c\x87\x7b\x83\x8c\x9b\x0f\xa8\x98\x9f\x4f\xc2\xfc\x36\xed\xa0\x18\xfb\x7b\x74\x39\x55\xa0\x3d\x99\x0e\xce\x88\x64\x92\x94\xb9\x10\xa7\xf2\xe4\xe7\xa3\x27\x87\x52\x12\x12\x74\x9d\x56\xb8\xed\x6f\xcd\x8c\x56\xfa\x65\x8c\x75\x4d\x6d\x2f\xea\x1a\x3f\x1b\x8e\xa4\xfe\x38\xab\xb4\xa1\xf8\xa6\x4f\xf8\x27\x5f\x8a\x1d\xb3\x03\x23\x60\x14\x56\x6a\x7e\xd1\x12\x5e\x1d\x51\x04\x41\x33\xa1\xaf\x39\xee\x50\x5f\xb4\x2c\x26\x58\x20\xb8\xfd\x68\x65\x09\x9c\x3f\x21\x60\x0a\x9f\x20\x84\x80\x88\x20\x0c\xa7\xeb\x37\x3c\x01\x13\xa1\x74\x85\x33\x91\x54\x4c\x7d\x43\x0e\x2c\xab\xe8\x27\x72\xe2\xc0\x58\xa2\x85\xa3\x3f\x5b\x18\xb7\x8d\xde\x1d\xeb\x94\x05\xef\xd8\xb7\xda\xe4\x66\x2d\x59\x60\xd0\x7a\x67\x8c\x54\xe2\x80\xc3\xb7\x21\x3f\x81\x3e\x1c\x63\xc5\xa2\x53\xa9\x1f\x75\x46\x9e\x3e\xe8\xf0\xfb\xa1\xc4\x3e\x2e\x1f\xad\x9f\x2e\xc7\x86\x4a\x59\xeb\xf3\x4f\xc8\xc8\x1f\x74\x9c\x0c\x86\x4c\xca\xf4\xe9\xaf\x86\xb0\x98\xe4\x1e\xb8\xf3\x29\x9f\xef\xca\x30\xa4\xd7\x67\xb2\x77\xdf\x66\x76\xdd\x22\xd9\x17\xe5\xca\x02\x13\xe5\x81\xbf\xa1\x86\xe8\xc9\x5e\x81\x0a\x8b\xe8\x56\x98\x13\x04\x05\x9a\x2e\xd3\x9f\x3c\x23\x12\x78\x7f\xc7\x12\x05\xac\xb0\xfa\x25\xd9\x98\xd2\x85\xfb\x54\xa4\x07\xc5\xac\x77\x73\x9b\x29\x46\xfb\x63\x3d\xd5\xbb\xe3\x12\xad\x40\xf8\x22\xad\x80\x0c\x07\xac\x14\x91\x70\xa1\xf3\xe0\x55\x56\xaf\x5f\xcc\x66\xb5\x41\xef\xda\x26\xf2\xff\x2e\xa2\xc8\xd5\x09\x43\x8f\x96\x6c\xb8\x6e\x73\xbc\x78\xc8\x80\xbe\x64\x48\x6e\x33\xbd\xa9\x8f\xe4\xff\xde\x57\xfe\x69\x05\xf9\x73\x2a\x51\x5f\xfb\x2b\x02\xac\x73\x09\xd0\xd5\xa8\x7d\xa9\xce\x30\x0c\x0e\xa2\xe7\x6f\xb2\x36\xe6\x52\x54\xb5\xb1\x9b\xde\x72\x41\x6d\x44\x4d\x9f\xfd\xf2\x78\x42\x55\xc3\x6a\x8a\x65\x29\x58\xeb\xa9\x37\x61\xbc\x14\x5f\xdb\x23\x6f\x0b\x4e\x55\x5a\x6b\x34\xf6\xcf\x3e\xcf\xf8\x57\xc5\xfb\x0f\x04\xbb\xd7\x3a\xb1\x7e\x9f\xc5\xaf\x62\xe3\x2d\xe7\xfc\x5e\xee\x51\x78\x7f\x6e\x77\x53\x70\x7a\xcd\xc2\x96\x9a\xc0\x5d\x1d\x35\x7b\x7a\x75\x5e\xb5\x27\xb2\xcb\xc5\xe4\xf1\xb4\x25\xc4\xe7\xf1\x81\x25\x35\xf3\x4a\xc9\xd2\x73\x35\xc9\xf8\xba\xcb\x7d\x57\x39\x09\x43\xbf\xad\x7b\xdf\xed\x95\xb3\x5b\x4c\x6f\x2a\xd8\x5f\xfa\x9d\x19\xae\x1b\x36\x1b\xd6\x46\x7a\x90\xfb\xfe\xda\xb4\x33\x9c\x02\x6b\xf0\x77\xf4\x29\x58\x2f\xc4\x89\x36\xc3\xf9\x02\xc6\x7c\x99\xab\x5b\xd6\xd5\x8d\x2f\xb4\x78\xd9\x98\x83\xd5\x62\xea\x72\x8d\x36\x98\x8f\xf8\xf2\xd0\xd5\x79\x47\x87\x9b\xca\x6f\x9b\x30\xf5\xf6\x17\xd5\xd7\x77\xd5\x04\x2b\x61\x88\xc5\x04\xdb\x5c\x6d\x30\x77\x81\x6c\x82\x8d\x79\x70\x8d\x13\x6a\xac\x73\xc2\x1a\x3c\x75\x3a\x3f\x9a\x47\xc7\x1d\x1c\x85\x51\xd8\x5c\xd2\x40\x63\xdf\x4a\x7e\x2b\x19\xf2\x9b\x36\x8b\xbf\xfe\xfa\x07\xdc\xfc\x27\x00\x00\xff\xff\x92\x45\x0b\x38\x68\x0d\x00\x00")

func fullchainPemBytes() ([]byte, error) {
	return bindataRead(
		_fullchainPem,
		"fullchain.pem",
	)
}

func fullchainPem() (*asset, error) {
	bytes, err := fullchainPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullchain.pem", size: 3432, mode: os.FileMode(420), modTime: time.Unix(1469725384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _privkeyPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x95\x39\xd7\x43\x5a\x03\x46\x7b\xbf\xe2\xf6\xd6\xb7\xcc\x44\x79\x0e\x27\xc6\x48\x4c\x31\x74\x66\x82\x90\x10\x07\xbf\xfe\x5b\xf7\x6d\xef\x53\x3e\xd5\x5e\xbb\xd9\xff\xfb\x77\x10\x69\x86\xf3\xcf\xc3\x33\x9e\x20\x40\xff\x58\x28\xf9\x7b\x89\x9b\x61\xa0\xad\x31\x20\x50\x81\x03\x9b\xfe\xd3\xf6\x9d\x26\x63\x1a\x02\x17\x5d\x01\xf0\x15\x68\x35\xb8\x69\xfc\x1e\x34\x08\x80\xc9\x80\xc0\x55\xe1\x37\x32\x97\xea\x1c\x42\xd7\x73\x1f\x44\xa4\x1c\x1f\xd2\xec\xb8\xa1\xc5\xb0\xc8\xc6\xb5\x37\xc3\xd3\x6b\x26\x0b\xc3\xd1\x02\x65\x52\xe3\x41\xfb\xf0\x1d\x48\xe9\x5a\x61\xce\xa6\xb5\x07\x66\xa8\xf4\x40\xa7\xaa\x22\x48\xde\xcb\x4b\x20\xbe\xc3\x17\x0d\xf3\xc6\xa9\x0d\xec\x3f\x5f\x73\xb6\xa2\xb7\xbb\x5c\x29\x89\xb4\x9f\xb7\x34\x4a\xa1\x3f\xa6\x5a\xe6\xf8\x67\x73\xe7\x34\xbf\x15\x07\x32\xe3\xd2\x2d\xf8\x95\x42\x67\x79\x81\x61\x6a\x04\xa2\xfc\x09\xf0\xa3\x03\x71\x31\xc9\x07\xbc\x96\xda\x8b\x62\x22\x07\xa4\xc0\xe5\x92\x45\x8d\x48\xa1\x2e\xcd\x48\xb4\x0e\xb2\x15\x50\xd5\x2f\xd7\x7b\x57\x2f\x77\xc6\x39\x8f\xb0\xdd\xf2\x1c\x12\xcc\xf7\x7b\x33\xbb\x70\xd8\x79\x83\x5a\xa4\x76\xc3\x11\x1d\x74\xaa\x62\xbc\xd0\x8a\x97\x9e\x6e\xcd\x4c\x6a\xa9\xe9\xbd\xb2\xf2\x79\xea\x58\xd4\x3f\xbb\xfe\x4d\xd6\x34\x0d\x61\x78\x0b\xcf\x60\x20\xa8\x4a\xe7\xef\x3a\xcb\x58\x4a\x8e\x1f\xe2\x32\xce\xa4\xfc\x12\x15\xdc\xcd\x47\x08\x94\x30\xe5\x5d\xfd\xdd\xac\xbd\xa5\xd2\x41\x7c\x8a\x33\x48\x19\x75\x25\x39\x86\x3f\x29\x53\xfc\x01\x2c\x9c\x84\xdf\xeb\x79\x93\x4e\x36\x68\x6e\x10\x00\xa4\x34\x0d\x02\x7a\xe9\xa3\x4f\x7f\xf0\x49\x4e\x5e\xbc\xe0\x05\x2b\x7d\x2b\xc7\xbc\x7f\x2b\xfb\xbb\x1f\xde\x21\x4a\xab\xd2\xf9\x59\xc9\x7c\x38\xb1\x4d\xf4\xf8\x58\x78\xce\xbe\x8c\x5f\x46\x30\xc4\xb2\x32\xa4\x74\x90\x98\xfc\xa4\xdf\x77\xc0\x41\x6f\xc2\x14\x0e\xf1\x2a\xbe\xc7\x8d\xdc\x90\x6c\xfc\x56\x9d\xb2\xb2\x77\x53\x5f\x0c\xc4\x91\x8c\x69\x11\xb4\x50\x3d\x64\x6f\x47\xcf\xf7\xb0\x99\xf5\x35\xe9\xf7\x4d\xff\x78\x95\x18\x3c\xb4\xdc\x89\xf4\xf6\xb9\xc4\x2e\xfa\x75\x53\x7f\xe7\x33\xfb\x55\x78\x3c\xab\xe0\x89\xcd\x6f\x99\xd5\x92\x72\xa1\x94\x44\xa4\xcc\xa9\x5e\x53\xc5\xf5\xa6\xa5\x57\x86\xe6\xba\x15\x90\x0b\xe6\x53\x59\x55\xb8\x47\xba\x47\xc1\x23\x5c\x0e\xe6\x62\xd0\xcf\x74\x8e\xeb\x5e\x37\x76\x96\x0b\x7a\xf4\x9c\xd9\x09\x2b\x82\x7d\x10\x1c\x2b\x40\xaa\xd3\x74\xbf\xab\x32\x57\xfb\x4d\x49\x38\xce\x7b\x97\x1e\x74\xcd\xaa\xa3\xe2\x25\x3a\x7b\xb3\xe9\x32\xfe\x4d\xf3\x21\xd7\x7e\x5e\xfa\xb1\x63\x69\x5b\x7e\x34\x03\x4f\x0d\x41\xb1\x12\xf8\xf9\xdd\x02\x51\x8e\x16\x9d\xb2\x68\x46\x7c\x85\x6c\x10\xc5\x73\x51\xb2\x4a\xb6\xa6\xef\xec\xf7\xf8\x0e\xf3\x43\x01\x2d\x76\x2d\xd8\xb8\xea\x12\x4f\xf9\x74\xf5\x47\x59\xf5\x6d\xaf\xcb\xb4\x9d\xc8\xd4\x3a\x4c\xb4\xaf\x12\xba\xf1\x8e\xbe\xfa\x60\x6c\x91\x41\x8b\x92\xf8\x62\x80\x2c\x96\xc6\x9c\x70\x82\xcd\x43\x95\xd7\xe0\x5d\x3e\x93\x6c\x70\x93\xaf\x08\x8a\x28\x4d\x87\x3a\x13\xa5\x28\x22\x3c\x41\x3d\xd3\xb3\x90\x94\x5b\xff\x60\x0b\x8a\xda\x9f\xe1\xc0\xdf\x9b\x2f\xcc\x8c\xb0\xd4\xd2\xe8\xe3\x96\xab\xdc\x76\x14\x95\xdc\x5e\xd1\x8e\x4f\x27\x32\x35\xef\x28\x71\x70\x7d\x1f\x6d\x7f\xc9\x89\x2a\xdc\x82\x78\xd2\x24\x6a\x04\x52\x1a\xc3\x0c\x71\x88\xad\xef\x77\x7a\xc4\x7f\xc8\x1e\x3e\x38\xdb\xf9\x50\xb3\xc5\xb4\xd6\xe8\x1e\xda\xd5\x7e\x69\xaa\xbd\x21\xb2\xc8\xa4\xea\xa4\x0a\xe2\x72\x04\x9f\xad\x68\xf9\xee\x15\x97\xe2\xe8\x48\xfb\x63\xe0\x95\x57\x8d\x26\xa5\x2a\x38\x64\xf2\xbe\xe7\xd1\xb2\x86\x3b\x9f\x12\x87\x32\xd2\x63\x1f\x32\xf2\x64\x04\x19\x07\x24\x1e\xa5\x2d\x20\x1e\x5d\x4a\xa5\xcc\x7e\x51\xe5\x73\x4a\x7e\x66\x42\xd1\xb6\xbe\x4f\xc7\xd3\x4c\x1f\xb4\x35\x60\xa3\x48\x91\xc1\x83\xed\x30\x94\x8d\xe6\x3d\x54\x4e\x0b\xb9\x1e\x16\x3b\x5f\xe0\x5a\x00\x34\x67\x84\xfc\xeb\xaf\xb2\x5a\x6c\xe1\xbf\x96\x95\x6c\x6d\x3c\xce\x25\xed\x52\xc4\xcb\x76\xe7\xb2\xcf\x1d\x9e\x3e\x93\xf4\xb6\xb7\xd3\x4b\x9d\x01\x5f\x9c\xa5\x2f\x56\x4c\x6e\xab\x13\xae\x57\xdc\x07\x22\x0e\xa8\x67\xa9\xb6\xd3\xa9\x92\x45\x27\x8e\x82\x0f\xe0\x27\x01\x2a\xf3\x65\x12\x0a\x4b\xcc\xea\x99\xf1\x16\x92\xe9\xe6\x89\x39\xf9\x89\xf1\x03\x54\x50\xe1\x25\xeb\xf8\x17\x8d\xbc\x71\x63\xbe\x84\x4b\x53\x9c\xe2\x73\x30\x6b\x1a\x5b\x35\x05\xd4\x35\xae\x4c\xea\xc6\xeb\x44\xee\xfb\xd1\x59\x05\x9e\xc8\x9a\x66\xec\x80\xf5\x9d\x1a\xd4\xa5\x14\x6f\xc5\xd6\x1b\xb7\x19\x4c\x1a\x04\xd6\x8b\x21\x40\xf2\xf6\xb6\xb5\x2a\xd3\xd7\xe1\xa2\x79\x2e\x83\xa9\x8a\x2f\x6d\x76\x88\xb5\xe7\x05\xed\xca\xe6\x99\xce\x62\x32\x3f\x4f\xbd\xe2\x1c\xca\x7a\x2e\xdd\xcf\xcf\x59\x54\xe6\xf4\xf7\x79\xb2\x9e\x44\xb0\x8e\xf9\x7d\xbf\xb8\x9d\xd7\x72\xf9\x93\x3e\x0f\xfb\x2e\xbd\xb1\xb9\x26\x52\x14\x49\xe6\xb0\xf2\xab\xa2\x75\xe2\xa5\x3a\x6c\x7a\xdc\x6a\x63\xca\x2e\xf1\xda\x70\xed\x9d\x2e\x1f\xd8\x5f\xe6\xdc\x22\x9a\x0d\xc7\x1a\x6e\x26\x25\xa7\x76\x2d\xc1\x42\x45\x65\x16\x5d\x17\x27\x16\xe2\xe0\xd9\xaa\x9c\x66\xdf\x74\xb8\xed\xf0\x0f\xd9\xd8\x50\x28\xcd\xcc\x63\xf0\xe3\xc6\x99\x5f\x93\x85\x4a\x42\xa4\xe7\x29\x7c\xf0\xc2\xce\xb0\x07\x15\x9f\x38\x66\x2c\x87\x75\xdd\x1b\x7f\xbf\x6e\xc5\xbb\x17\x5c\x65\x2c\x38\xd8\x29\x42\xa2\x88\x62\x69\x3b\x93\x74\x79\xcc\x7d\xac\xd4\x3b\x3c\x9b\x44\x12\x88\x1e\x34\xb4\x38\x7c\xa9\x9e\x73\x36\x5f\xfa\x61\x51\x08\x4a\x47\xff\x54\x46\x39\x59\xa8\xe8\xa7\x27\x27\x59\x2f\x08\xe7\xfa\x49\x8a\xdd\xdd\xba\x3d\xcb\x29\x17\xa9\xe0\x33\x86\x34\xdc\x92\x79\x22\xdc\x5a\x8d\xac\x03\x5c\x2e\xcc\x78\x26\x4e\xe2\x4c\xa1\x63\x52\xad\x72\x10\x7f\xdd\x41\x8e\xfa\xdf\x16\xfd\x3f\x00\x00\xff\xff\xe9\x88\xd4\x03\xa8\x06\x00\x00")

func privkeyPemBytes() ([]byte, error) {
	return bindataRead(
		_privkeyPem,
		"privkey.pem",
	)
}

func privkeyPem() (*asset, error) {
	bytes, err := privkeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "privkey.pem", size: 1704, mode: os.FileMode(420), modTime: time.Unix(1469725384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullchain.pem": fullchainPem,
	"privkey.pem": privkeyPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fullchain.pem": &bintree{fullchainPem, map[string]*bintree{}},
	"privkey.pem": &bintree{privkeyPem, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


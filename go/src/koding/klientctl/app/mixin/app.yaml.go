// Code generated by go-bindata.
// sources:
// app.yaml
// DO NOT EDIT!

package mixin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6b\xdc\x30\x10\xbd\xfb\x57\x4c\xb6\x25\x39\x29\xde\x4b\x68\x10\xf4\x5c\x7a\x6a\x09\xbd\x14\x0a\x66\x2c\xcf\xee\x4e\x2d\x4b\x62\x24\xed\x92\x7e\xfc\xf7\x22\x7f\x6c\x36\xb0\x0d\xbe\xd8\xd2\xd3\x9b\xaf\x37\x6f\x40\x73\x60\x47\xba\x02\xe8\x7d\xc7\x6e\xdf\xa0\x3d\xe1\x73\x6c\xbc\xd3\x90\x24\xd3\xcb\xc3\xe0\xb3\x4b\xb1\x30\x01\x3a\xda\x61\xb6\x49\xc3\xa6\x3e\xa2\xd4\x96\xdb\x7a\x62\xd5\x18\xc2\xa6\x3a\xa2\x30\xb6\x96\x74\xa5\xc0\xe1\x40\x1a\x4e\xd4\x36\xc1\x4b\xaa\x2e\x62\x1f\xb7\x8f\xdb\xca\x58\x9f\x3b\x76\x9c\x4a\xe2\x93\x70\xa2\x66\xc7\x96\xc6\x3a\x0a\x02\xa6\xc3\x95\x22\x92\xdd\x66\xec\x23\x90\x0c\x1c\x23\x7b\x17\x35\x6c\x3f\x3c\x3c\x8c\xa8\x3f\x39\x12\x0d\x9b\xf7\xbf\x8f\x28\xf7\xcb\x5c\xc6\x94\x01\x9a\x20\xbe\x14\x68\x1c\x9b\xbe\xf4\xf6\x57\xaf\xa3\x4d\x05\x8d\x77\x89\x5c\xd2\xf0\x47\x8d\x77\x80\x77\x37\x75\xcb\xae\x6e\x31\x1e\x66\x24\x52\x02\x45\xd9\x43\xe0\x40\x3b\x64\x3b\xe3\x9d\x37\x3d\x09\x48\x76\xe3\xf5\xc7\x0c\x03\x28\x25\xc3\x72\x7e\x05\x97\xc2\x80\x21\xbc\x86\x03\x4c\x1d\xe7\x48\xf2\xd9\x85\x9c\x9a\x45\xdd\x65\x96\x2b\x2f\x97\x09\x08\xbe\x7e\x79\xfa\xf6\x71\x15\xf7\x08\x57\x36\xac\xcb\xe7\x82\x25\x3f\xc9\xfc\x42\xcb\x7d\xdd\x66\xb6\x5d\x4c\x14\xb4\xc5\x44\x31\x5d\x36\x7e\xd6\x09\x94\x81\xbb\x89\x3a\x7d\x49\xe0\xf6\x16\xea\x98\x50\x52\xb1\xca\x5d\x05\x10\xd0\xf4\xb8\xa7\x26\x87\x0e\x13\x9d\xcd\x38\xc3\xb3\x3f\x26\x49\x2f\x8e\xf7\xec\xc7\xdb\x9e\xd3\xf2\x57\xc6\x4b\x89\x94\xec\xcc\xd0\x4d\x71\x65\xe8\xc1\x77\xa0\x10\xd4\xa7\x65\x31\xeb\x7c\x30\xc6\x0f\x7d\xc7\x52\x36\x71\x45\x9c\x91\x60\x0e\xfe\xe4\x40\x3d\xad\x4c\xba\xd2\x83\xa3\x94\xff\x2b\x39\x4f\x11\xb2\xb5\x6f\x2c\x64\xa4\x92\x39\xf8\xf3\x01\xbe\xfb\x2c\xc5\x65\x96\x0d\x26\xf6\x0e\x62\x42\xd3\x03\x47\x10\xc2\xee\x19\x92\x2f\x7a\xdd\xbc\x44\xfe\x0b\x00\x00\xff\xff\x4a\x67\xa1\xe3\x35\x04\x00\x00")

func appYamlBytes() ([]byte, error) {
	return bindataRead(
		_appYaml,
		"app.yaml",
	)
}

func appYaml() (*asset, error) {
	bytes, err := appYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.yaml", size: 1077, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.yaml": appYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.yaml": &bintree{appYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


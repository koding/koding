// Code generated by go-bindata.
// sources:
// ../../../../../.github/ISSUE_TEMPLATE.md
// DO NOT EDIT!

package bug

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _issue_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x5f\x6b\xd4\x40\x10\x7f\xcf\xa7\x18\xe9\x83\x6d\xb9\x4b\xd1\xd6\x07\x8b\x58\xb0\x14\x2c\x88\x16\x2b\x8a\x8f\x93\xec\x24\xd9\x76\xb3\xb3\xec\xec\xe6\x2e\xdf\x5e\x26\xc9\xdd\xb5\x45\xe8\x5b\x02\x33\xbf\x7f\xf3\xdb\x4f\x6f\xd6\xeb\x35\xdc\x45\x1e\xac\x21\x40\x68\xc9\x53\x44\x07\x92\xfb\x1e\xe3\x08\xdc\x40\xea\x08\xac\x48\x26\xb0\x7e\xfa\xf9\x65\x93\x23\xc0\x8a\x07\x82\xf5\xfa\x73\x51\x1c\x1d\xc1\xcd\x36\x50\x9d\xc8\xc0\x17\xea\x70\xb0\x1c\x8b\x19\xf9\xb6\x81\x91\xf3\xdb\x48\x60\x48\xea\x68\x2b\xeb\x5b\x40\xa8\x72\xbb\x82\x44\xce\x41\x16\xd8\x74\x98\x40\x3a\xce\xce\x40\x87\x21\x90\x9f\x60\x5f\x02\x48\x6e\x5b\x92\x34\x03\xd4\x1d\xfa\x96\xce\x6c\x1f\x22\x0f\xd4\x93\x4f\x07\xbc\x8e\x37\x60\xf7\x88\x1b\x8e\x8f\x7b\x99\xd7\x39\x46\xf2\xe9\x3f\x2a\x5f\x91\x37\xeb\x12\xb0\x5e\x12\xa1\xd9\xe5\x42\x3b\xdb\xd5\x02\xf8\x5c\xf9\xab\x92\x69\x1b\x1c\x2e\xb1\x1a\xdb\x34\x14\xc9\xd7\x04\x4d\xe4\x1e\xea\x45\xeb\x33\x68\x35\x71\xc7\x22\xb6\x72\x04\xf7\xec\x72\xb2\xec\x17\xc2\xef\x9c\x80\x2b\x67\x5b\x4c\x1c\xc7\x15\x54\x39\xed\x14\x00\x42\x63\xb7\x67\x91\x50\xd8\x43\xc3\x71\x62\x9c\x6c\x1e\x04\x73\x04\x6b\x08\xe7\x00\x13\x83\xed\x83\x9b\x74\x4e\xc3\x68\x8c\x55\x32\x1d\x9b\xad\xec\x05\xdd\x27\x0a\xa2\x1b\x3f\x29\x44\x36\xb9\x26\x38\x56\x8e\x2a\xb7\x72\x52\xbc\xac\x98\xb3\xfe\x51\x87\xf5\x6b\xd0\x08\x51\x79\x56\x8a\x8b\x1e\xb2\xc7\xbe\xb2\x6d\xe6\x2c\x20\x94\x34\x68\xd9\xc1\x1f\xa4\xc6\x3d\x51\xea\xac\x28\x51\x09\xb7\xbe\x76\xd9\x10\xd4\x6c\x48\xa7\xf7\x33\x2b\xb0\x0d\x44\x72\x34\xa0\x4f\x13\xc8\xbb\xb2\x78\x5f\x16\xe7\x65\x71\x51\xce\xb5\x60\x9f\x68\x9b\x16\xf0\xaf\xbc\x81\x0e\x65\x86\x9e\x9b\x8f\x4d\x33\xdf\x79\xe4\x7c\x05\x7f\xb4\x11\x18\x49\xff\x20\xc5\x51\xef\xab\x86\xea\x9a\xfb\xe0\xac\x74\x57\x4f\xa4\xce\xc6\x75\xa4\x9e\x59\xa0\x23\x17\x44\x9b\x55\x73\x4f\x90\x03\x6c\x6c\xea\x00\x41\x96\x73\x42\x52\x7c\x2b\xd0\xb3\x24\xc8\x42\x4d\x76\xbb\xb7\x17\x09\x9d\x56\xda\x99\x7d\xfa\x7f\x39\x47\xb8\xf1\x83\x8d\xec\xf5\x5a\xbb\xfa\x2d\x71\xa0\x40\x8f\x7e\x3c\x04\x60\x28\xa1\x75\xa2\x0f\x38\xcf\xa7\xa5\xc3\xf2\x64\x49\x5b\x1d\xad\x36\xd1\xec\x7a\xa2\xfc\x4a\x78\x0a\xbf\x29\x8a\x8a\xcc\x42\xe6\xb2\x38\x7d\xca\x0c\x1e\x7b\x02\xf4\x06\x86\x65\xe8\x98\xca\xb6\x84\xeb\x2e\xaa\xd3\xf3\x8f\x2b\xf0\x6c\xa8\x7c\x10\xf8\x50\x5e\x9c\xe8\xf6\x8f\x40\x11\xa7\x07\x72\x3f\x4a\xa2\xfe\xf9\xb6\x21\x79\x4c\x1c\xb4\x1a\x3d\x57\xd6\xd1\xb4\xf3\x6d\x29\xd0\xa8\xc6\x43\xe4\x07\xaa\xd3\x65\xf1\x2f\x00\x00\xff\xff\x08\x1e\x25\x61\xca\x04\x00\x00")

func issue_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_issue_templateMd,
		"ISSUE_TEMPLATE.md",
	)
}

func issue_templateMd() (*asset, error) {
	bytes, err := issue_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ISSUE_TEMPLATE.md", size: 1226, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ISSUE_TEMPLATE.md": issue_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ISSUE_TEMPLATE.md": &bintree{issue_templateMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


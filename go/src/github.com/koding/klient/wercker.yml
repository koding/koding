# This file describes how to create `klient.gz` and `klient.deb` and then
# upload to a persistent storage.

# XXX: this box includes go 1.3.3. there is no mistake here.
box: wercker/golang@1.2.3

build:
  steps:
    - setup-go-workspace

    - script:
        name: go build
        code: go build -v ./...

    - script:
        name: go test
        code: |
          go test -v
          go test -v ./fs
          go test -v ./sshkeys
          go test -v ./storage
          go test -v ./client
          go test -v ./logfetcher


deploy:
  steps:
    - setup-go-workspace

    - script:
        name: install debuild and s3cmd commands
        code: |
          sudo apt-get update
          sudo apt-get install -y ubuntu-dev-tools s3cmd

    - script:
        name: configure s3cmd
        code: |
          echo '[default]' > ~/.s3cfg
          echo "access_key=$S3_ACCESS_KEY" >> ~/.s3cfg
          echo "secret_key=$S3_SECRET_KEY" >> ~/.s3cfg

          export S3DIR="s3://koding-klient/$CHANNEL"

          # Fetch the latest build number since wercker doesn't provide one
          s3cmd get $S3DIR/latest-version.txt version
          export OLDBUILDNO=$(cat version)
          export NEWBUILDNO=$(($OLDBUILDNO+1))
          echo "New version will be: $NEWBUILDNO"
          rm -f version

    - script:
        name: build klient binary
        code: |
          go build -v -ldflags "-X github.com/koding/klient/protocol.Version 0.1.$NEWBUILDNO -X github.com/koding/klient/protocol.Environment $CHANNEL" github.com/koding/klient

    - script:
        name: validate klient version
        code: |
          [[ $(./klient -version) == "0.1.$NEWBUILDNO" ]]

    - script:
        name: prepare klient.gz
        code: |
          gzip -N klient
          mv klient.gz klient-0.1.$NEWBUILDNO.gz

    - script:
        name: prepare klient.deb
        code: |
          go run build/build.go -e $CHANNEL -b $NEWBUILDNO
          dpkg -f *.deb

    - script:
        name: upload gz and deb to s3
        code: |
          #  Copy files to S3.
          s3cmd -P put *.deb  $S3DIR/$NEWBUILDNO/
          s3cmd -P put *.gz  $S3DIR/$NEWBUILDNO/

          # Cleanup the latest/ folder and put the latest one in there
          s3cmd del --recursive $S3DIR/latest/
          s3cmd -P put *.deb  $S3DIR/latest/
          s3cmd -P put *.gz  $S3DIR/latest/

          # Update latest-version.txt with the latest version
          s3cmd del $S3DIR/latest-version.txt
          echo $NEWBUILDNO > latest-version.txt
          s3cmd -P put latest-version.txt $S3DIR/latest-version.txt

    - script:
        name: upload/update install.sh
        code: |
          #  Update install.sh file
          s3cmd del s3://koding-klient/install.sh
          s3cmd -P put install.sh s3://koding-klient/install.sh

  after-steps:
    - sherzberg/slack-notify@0.0.11:
        token: $SLACK_TOKEN
        subdomain: koding
        username: wercker
        channel: "#announce"
        passed-message: "klient/$CHANNEL: A new klient (ver. $NEWBUILDNO) is successfully built and deployed."
        failed-message: "klient/$CHANNEL: New Klient could not be built or deployed. See $WERCKER_DEPLOY_URL for the details."

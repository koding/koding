#!/usr/bin/env bash
#
# Run all etcd tests
# ./test
# ./test -v
#
# Run tests for one package
#
# PKG=./wal ./test
# PKG=snap ./test
set -e

# Invoke ./cover for HTML output
COVER=${COVER:-"-cover"}

GO_BUILD_FLAGS=-a
source ./build

# Hack: gofmt ./ will recursively check the .git directory. So use *.go for gofmt.
TESTABLE_AND_FORMATTABLE="client clientv3 discovery error etcdctl/command etcdmain etcdserver etcdserver/auth etcdserver/etcdhttp etcdserver/etcdhttp/httptypes pkg/fileutil pkg/flags pkg/idutil pkg/ioutil pkg/netutil pkg/osutil pkg/pbutil pkg/types pkg/transport pkg/wait proxy raft snap storage storage/backend store version wal"
# TODO: add it to race testing when the issue is resolved
# https://github.com/golang/go/issues/9946
NO_RACE_TESTABLE="rafthttp"
FORMATTABLE="$TESTABLE_AND_FORMATTABLE $NO_RACE_TESTABLE *.go etcdctl/ integration clientv3/integration e2e"

# user has not provided PKG override
if [ -z "$PKG" ]; then
	TEST=$TESTABLE_AND_FORMATTABLE
	NO_RACE_TEST=$NO_RACE_TESTABLE
	FMT=$FORMATTABLE

# user has provided PKG override
else
	# strip out leading dotslashes and trailing slashes from PKG=./foo/
	TEST=${PKG/#./}
	TEST=${TEST/#\//}
	TEST=${TEST/%\//}

	# only run gofmt on packages provided by user
	FMT="$TEST"
fi

# split TEST into an array and prepend REPO_PATH to each local package
split=(${TEST// / })
TEST=${split[@]/#/${REPO_PATH}/}
split=(${NO_RACE_TEST// / })
NO_RACE_TEST=${split[@]/#/${REPO_PATH}/}

function unit_tests {
	echo "Running tests..."

	MACHINE_TYPE=$(uname -m)
	if [ $MACHINE_TYPE != "armv7l" ]; then
		RACE="--race"
	fi
	go test -timeout 3m ${COVER} ${RACE} -cpu 1,2,4 $@ ${TEST}
	go test -timeout 3m ${COVER} -cpu 1,2,4 $@ ${NO_RACE_TEST}
}

function integration_tests {
	echo "Running integration tests..."
	go test -timeout 10m -v -cpu 1,2,4 $@ ${REPO_PATH}/e2e
	go test -timeout 15m -v -cpu 1,2,4 $@ ${REPO_PATH}/integration
	go test -timeout 10m -v -cpu 1,2,4 $@ ${REPO_PATH}/clientv3/integration
	go test -timeout 1m -v -cpu 1,2,4 $@ ${REPO_PATH}/contrib/raftexample
}

function fmt_tests {
	echo "Checking gofmt..."
	fmtRes=$(gofmt -l -s -d $FMT)
	if [ -n "${fmtRes}" ]; then
		echo -e "gofmt checking failed:\n${fmtRes}"
		exit 255
	fi

	echo "Checking govet..."
	vetRes=$(go vet $TEST)
	if [ -n "${vetRes}" ]; then
		echo -e "govet checking failed:\n${vetRes}"
		exit 255
	fi

	echo "Checking govet -shadow..."
	for path in $FMT; do
		vetRes=$(go tool vet -shadow ${path})
		if [ -n "${vetRes}" ]; then
			echo -e "govet checking ${path} failed:\n${vetRes}"
			exit 255
		fi
	done

	echo "Checking goword..."
	# get all go files to process
	gofiles=`find $FMT -iname '*.go' 2>/dev/null`
	# ignore tests and protobuf files
	gofiles=`echo ${gofiles} | sort | uniq | sed "s/ /\n/g" | egrep -v "(\\_test.go|\\.pb\\.go)"`
	# only check for broken exported godocs
	gowordRes=`goword -use-spell=false ${gofiles} | grep godoc-export | sort`
	if [ ! -z "$gowordRes" ]; then
		echo -e "goword checking failed:\n${gowordRes}"
		exit 255
	fi

	echo "Checking for license header..."
	licRes=$(for file in $(find . -type f -iname '*.go' ! -path './Godeps/*'); do
			head -n3 "${file}" | grep -Eq "(Copyright|generated|GENERATED)" || echo -e "  ${file}"
		done;)
	if [ -n "${licRes}" ]; then
		echo -e "license header checking failed:\n${licRes}"
		exit 255
	fi
}

# fail fast on formatting tests
fmt_tests

unit_tests
if [ -n "$INTEGRATION" ]; then
	integration_tests
fi
echo "Success"

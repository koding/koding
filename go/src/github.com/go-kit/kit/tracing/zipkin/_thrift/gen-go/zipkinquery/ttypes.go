// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package zipkinquery

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"zipkincore"
	"zipkindependencies"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = zipkincore.GoUnusedProtection__
var _ = zipkindependencies.GoUnusedProtection__
var GoUnusedProtection__ int

type Order int64

const (
	Order_TIMESTAMP_DESC Order = 0
	Order_TIMESTAMP_ASC  Order = 1
	Order_DURATION_ASC   Order = 2
	Order_DURATION_DESC  Order = 3
	Order_NONE           Order = 4
)

func (p Order) String() string {
	switch p {
	case Order_TIMESTAMP_DESC:
		return "Order_TIMESTAMP_DESC"
	case Order_TIMESTAMP_ASC:
		return "Order_TIMESTAMP_ASC"
	case Order_DURATION_ASC:
		return "Order_DURATION_ASC"
	case Order_DURATION_DESC:
		return "Order_DURATION_DESC"
	case Order_NONE:
		return "Order_NONE"
	}
	return "<UNSET>"
}

func OrderFromString(s string) (Order, error) {
	switch s {
	case "Order_TIMESTAMP_DESC":
		return Order_TIMESTAMP_DESC, nil
	case "Order_TIMESTAMP_ASC":
		return Order_TIMESTAMP_ASC, nil
	case "Order_DURATION_ASC":
		return Order_DURATION_ASC, nil
	case "Order_DURATION_DESC":
		return Order_DURATION_DESC, nil
	case "Order_NONE":
		return Order_NONE, nil
	}
	return Order(0), fmt.Errorf("not a valid Order string")
}

func OrderPtr(v Order) *Order { return &v }

//The raw data in our storage might have various problems. How should we adjust it before
//returning it to the user?
//
//Time skew adjuster tries to make sure that even though servers might have slightly
//different clocks the annotations in the returned data are adjusted so that they are
//in the correct order.
type Adjust int64

const (
	Adjust_NOTHING   Adjust = 0
	Adjust_TIME_SKEW Adjust = 1
)

func (p Adjust) String() string {
	switch p {
	case Adjust_NOTHING:
		return "Adjust_NOTHING"
	case Adjust_TIME_SKEW:
		return "Adjust_TIME_SKEW"
	}
	return "<UNSET>"
}

func AdjustFromString(s string) (Adjust, error) {
	switch s {
	case "Adjust_NOTHING":
		return Adjust_NOTHING, nil
	case "Adjust_TIME_SKEW":
		return Adjust_TIME_SKEW, nil
	}
	return Adjust(0), fmt.Errorf("not a valid Adjust string")
}

func AdjustPtr(v Adjust) *Adjust { return &v }

type Trace struct {
	Spans []*zipkincore.Span `thrift:"spans,1" json:"spans"`
}

func NewTrace() *Trace {
	return &Trace{}
}

func (p *Trace) GetSpans() []*zipkincore.Span {
	return p.Spans
}
func (p *Trace) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Trace) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*zipkincore.Span, 0, size)
	p.Spans = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &zipkincore.Span{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Spans = append(p.Spans, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Trace) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Trace"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Trace) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spans", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:spans: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Spans)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Spans {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:spans: %s", p, err)
	}
	return err
}

func (p *Trace) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Trace(%+v)", *p)
}

type QueryException struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewQueryException() *QueryException {
	return &QueryException{}
}

func (p *QueryException) GetMsg() string {
	return p.Msg
}
func (p *QueryException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *QueryException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *QueryException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryException(%+v)", *p)
}

func (p *QueryException) Error() string {
	return p.String()
}

type SpanTimestamp struct {
	Name           string `thrift:"name,1" json:"name"`
	StartTimestamp int64  `thrift:"start_timestamp,2" json:"start_timestamp"`
	EndTimestamp   int64  `thrift:"end_timestamp,3" json:"end_timestamp"`
}

func NewSpanTimestamp() *SpanTimestamp {
	return &SpanTimestamp{}
}

func (p *SpanTimestamp) GetName() string {
	return p.Name
}

func (p *SpanTimestamp) GetStartTimestamp() int64 {
	return p.StartTimestamp
}

func (p *SpanTimestamp) GetEndTimestamp() int64 {
	return p.EndTimestamp
}
func (p *SpanTimestamp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SpanTimestamp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SpanTimestamp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartTimestamp = v
	}
	return nil
}

func (p *SpanTimestamp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EndTimestamp = v
	}
	return nil
}

func (p *SpanTimestamp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SpanTimestamp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SpanTimestamp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *SpanTimestamp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_timestamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start_timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTimestamp)); err != nil {
		return fmt.Errorf("%T.start_timestamp (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start_timestamp: %s", p, err)
	}
	return err
}

func (p *SpanTimestamp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_timestamp", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:end_timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndTimestamp)); err != nil {
		return fmt.Errorf("%T.end_timestamp (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:end_timestamp: %s", p, err)
	}
	return err
}

func (p *SpanTimestamp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpanTimestamp(%+v)", *p)
}

type TraceSummary struct {
	TraceId        int64 `thrift:"trace_id,1" json:"trace_id"`
	StartTimestamp int64 `thrift:"start_timestamp,2" json:"start_timestamp"`
	EndTimestamp   int64 `thrift:"end_timestamp,3" json:"end_timestamp"`
	DurationMicro  int32 `thrift:"duration_micro,4" json:"duration_micro"`
	// unused field # 5
	Endpoints      []*zipkincore.Endpoint `thrift:"endpoints,6" json:"endpoints"`
	SpanTimestamps []*SpanTimestamp       `thrift:"span_timestamps,7" json:"span_timestamps"`
}

func NewTraceSummary() *TraceSummary {
	return &TraceSummary{}
}

func (p *TraceSummary) GetTraceId() int64 {
	return p.TraceId
}

func (p *TraceSummary) GetStartTimestamp() int64 {
	return p.StartTimestamp
}

func (p *TraceSummary) GetEndTimestamp() int64 {
	return p.EndTimestamp
}

func (p *TraceSummary) GetDurationMicro() int32 {
	return p.DurationMicro
}

func (p *TraceSummary) GetEndpoints() []*zipkincore.Endpoint {
	return p.Endpoints
}

func (p *TraceSummary) GetSpanTimestamps() []*SpanTimestamp {
	return p.SpanTimestamps
}
func (p *TraceSummary) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TraceSummary) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TraceId = v
	}
	return nil
}

func (p *TraceSummary) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartTimestamp = v
	}
	return nil
}

func (p *TraceSummary) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EndTimestamp = v
	}
	return nil
}

func (p *TraceSummary) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DurationMicro = v
	}
	return nil
}

func (p *TraceSummary) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*zipkincore.Endpoint, 0, size)
	p.Endpoints = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &zipkincore.Endpoint{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.Endpoints = append(p.Endpoints, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TraceSummary) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SpanTimestamp, 0, size)
	p.SpanTimestamps = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &SpanTimestamp{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.SpanTimestamps = append(p.SpanTimestamps, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TraceSummary) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TraceSummary"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TraceSummary) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trace_id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:trace_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TraceId)); err != nil {
		return fmt.Errorf("%T.trace_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:trace_id: %s", p, err)
	}
	return err
}

func (p *TraceSummary) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_timestamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start_timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTimestamp)); err != nil {
		return fmt.Errorf("%T.start_timestamp (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start_timestamp: %s", p, err)
	}
	return err
}

func (p *TraceSummary) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_timestamp", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:end_timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndTimestamp)); err != nil {
		return fmt.Errorf("%T.end_timestamp (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:end_timestamp: %s", p, err)
	}
	return err
}

func (p *TraceSummary) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("duration_micro", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:duration_micro: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DurationMicro)); err != nil {
		return fmt.Errorf("%T.duration_micro (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:duration_micro: %s", p, err)
	}
	return err
}

func (p *TraceSummary) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endpoints", thrift.LIST, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:endpoints: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Endpoints)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Endpoints {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:endpoints: %s", p, err)
	}
	return err
}

func (p *TraceSummary) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("span_timestamps", thrift.LIST, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:span_timestamps: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SpanTimestamps)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SpanTimestamps {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:span_timestamps: %s", p, err)
	}
	return err
}

func (p *TraceSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceSummary(%+v)", *p)
}

type TimelineAnnotation struct {
	Timestamp   int64                `thrift:"timestamp,1" json:"timestamp"`
	Value       string               `thrift:"value,2" json:"value"`
	Host        *zipkincore.Endpoint `thrift:"host,3" json:"host"`
	SpanId      int64                `thrift:"span_id,4" json:"span_id"`
	ParentId    *int64               `thrift:"parent_id,5" json:"parent_id"`
	ServiceName string               `thrift:"service_name,6" json:"service_name"`
	SpanName    string               `thrift:"span_name,7" json:"span_name"`
}

func NewTimelineAnnotation() *TimelineAnnotation {
	return &TimelineAnnotation{}
}

func (p *TimelineAnnotation) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *TimelineAnnotation) GetValue() string {
	return p.Value
}

var TimelineAnnotation_Host_DEFAULT *zipkincore.Endpoint

func (p *TimelineAnnotation) GetHost() *zipkincore.Endpoint {
	if !p.IsSetHost() {
		return TimelineAnnotation_Host_DEFAULT
	}
	return p.Host
}

func (p *TimelineAnnotation) GetSpanId() int64 {
	return p.SpanId
}

var TimelineAnnotation_ParentId_DEFAULT int64

func (p *TimelineAnnotation) GetParentId() int64 {
	if !p.IsSetParentId() {
		return TimelineAnnotation_ParentId_DEFAULT
	}
	return *p.ParentId
}

func (p *TimelineAnnotation) GetServiceName() string {
	return p.ServiceName
}

func (p *TimelineAnnotation) GetSpanName() string {
	return p.SpanName
}
func (p *TimelineAnnotation) IsSetHost() bool {
	return p.Host != nil
}

func (p *TimelineAnnotation) IsSetParentId() bool {
	return p.ParentId != nil
}

func (p *TimelineAnnotation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TimelineAnnotation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *TimelineAnnotation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TimelineAnnotation) ReadField3(iprot thrift.TProtocol) error {
	p.Host = &zipkincore.Endpoint{}
	if err := p.Host.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Host, err)
	}
	return nil
}

func (p *TimelineAnnotation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.SpanId = v
	}
	return nil
}

func (p *TimelineAnnotation) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ParentId = &v
	}
	return nil
}

func (p *TimelineAnnotation) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *TimelineAnnotation) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.SpanName = v
	}
	return nil
}

func (p *TimelineAnnotation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TimelineAnnotation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TimelineAnnotation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:timestamp: %s", p, err)
	}
	return err
}

func (p *TimelineAnnotation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:value: %s", p, err)
	}
	return err
}

func (p *TimelineAnnotation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:host: %s", p, err)
	}
	if err := p.Host.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Host, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:host: %s", p, err)
	}
	return err
}

func (p *TimelineAnnotation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("span_id", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:span_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SpanId)); err != nil {
		return fmt.Errorf("%T.span_id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:span_id: %s", p, err)
	}
	return err
}

func (p *TimelineAnnotation) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentId() {
		if err := oprot.WriteFieldBegin("parent_id", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:parent_id: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ParentId)); err != nil {
			return fmt.Errorf("%T.parent_id (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:parent_id: %s", p, err)
		}
	}
	return err
}

func (p *TimelineAnnotation) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("service_name", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:service_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return fmt.Errorf("%T.service_name (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:service_name: %s", p, err)
	}
	return err
}

func (p *TimelineAnnotation) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("span_name", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:span_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SpanName)); err != nil {
		return fmt.Errorf("%T.span_name (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:span_name: %s", p, err)
	}
	return err
}

func (p *TimelineAnnotation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimelineAnnotation(%+v)", *p)
}

type TraceTimeline struct {
	TraceId        int64 `thrift:"trace_id,1" json:"trace_id"`
	RootMostSpanId int64 `thrift:"root_most_span_id,2" json:"root_most_span_id"`
	// unused fields # 3 to 5
	Annotations       []*TimelineAnnotation          `thrift:"annotations,6" json:"annotations"`
	BinaryAnnotations []*zipkincore.BinaryAnnotation `thrift:"binary_annotations,7" json:"binary_annotations"`
}

func NewTraceTimeline() *TraceTimeline {
	return &TraceTimeline{}
}

func (p *TraceTimeline) GetTraceId() int64 {
	return p.TraceId
}

func (p *TraceTimeline) GetRootMostSpanId() int64 {
	return p.RootMostSpanId
}

func (p *TraceTimeline) GetAnnotations() []*TimelineAnnotation {
	return p.Annotations
}

func (p *TraceTimeline) GetBinaryAnnotations() []*zipkincore.BinaryAnnotation {
	return p.BinaryAnnotations
}
func (p *TraceTimeline) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TraceTimeline) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TraceId = v
	}
	return nil
}

func (p *TraceTimeline) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RootMostSpanId = v
	}
	return nil
}

func (p *TraceTimeline) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TimelineAnnotation, 0, size)
	p.Annotations = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TimelineAnnotation{}
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3, err)
		}
		p.Annotations = append(p.Annotations, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TraceTimeline) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*zipkincore.BinaryAnnotation, 0, size)
	p.BinaryAnnotations = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &zipkincore.BinaryAnnotation{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.BinaryAnnotations = append(p.BinaryAnnotations, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TraceTimeline) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TraceTimeline"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TraceTimeline) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trace_id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:trace_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TraceId)); err != nil {
		return fmt.Errorf("%T.trace_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:trace_id: %s", p, err)
	}
	return err
}

func (p *TraceTimeline) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("root_most_span_id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:root_most_span_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RootMostSpanId)); err != nil {
		return fmt.Errorf("%T.root_most_span_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:root_most_span_id: %s", p, err)
	}
	return err
}

func (p *TraceTimeline) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:annotations: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Annotations {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:annotations: %s", p, err)
	}
	return err
}

func (p *TraceTimeline) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("binary_annotations", thrift.LIST, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:binary_annotations: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BinaryAnnotations)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.BinaryAnnotations {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:binary_annotations: %s", p, err)
	}
	return err
}

func (p *TraceTimeline) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceTimeline(%+v)", *p)
}

type TraceCombo struct {
	Trace      *Trace          `thrift:"trace,1" json:"trace"`
	Summary    *TraceSummary   `thrift:"summary,2" json:"summary"`
	Timeline   *TraceTimeline  `thrift:"timeline,3" json:"timeline"`
	SpanDepths map[int64]int32 `thrift:"span_depths,4" json:"span_depths"`
}

func NewTraceCombo() *TraceCombo {
	return &TraceCombo{}
}

var TraceCombo_Trace_DEFAULT *Trace

func (p *TraceCombo) GetTrace() *Trace {
	if !p.IsSetTrace() {
		return TraceCombo_Trace_DEFAULT
	}
	return p.Trace
}

var TraceCombo_Summary_DEFAULT *TraceSummary

func (p *TraceCombo) GetSummary() *TraceSummary {
	if !p.IsSetSummary() {
		return TraceCombo_Summary_DEFAULT
	}
	return p.Summary
}

var TraceCombo_Timeline_DEFAULT *TraceTimeline

func (p *TraceCombo) GetTimeline() *TraceTimeline {
	if !p.IsSetTimeline() {
		return TraceCombo_Timeline_DEFAULT
	}
	return p.Timeline
}

var TraceCombo_SpanDepths_DEFAULT map[int64]int32

func (p *TraceCombo) GetSpanDepths() map[int64]int32 {
	return p.SpanDepths
}
func (p *TraceCombo) IsSetTrace() bool {
	return p.Trace != nil
}

func (p *TraceCombo) IsSetSummary() bool {
	return p.Summary != nil
}

func (p *TraceCombo) IsSetTimeline() bool {
	return p.Timeline != nil
}

func (p *TraceCombo) IsSetSpanDepths() bool {
	return p.SpanDepths != nil
}

func (p *TraceCombo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TraceCombo) ReadField1(iprot thrift.TProtocol) error {
	p.Trace = &Trace{}
	if err := p.Trace.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Trace, err)
	}
	return nil
}

func (p *TraceCombo) ReadField2(iprot thrift.TProtocol) error {
	p.Summary = &TraceSummary{}
	if err := p.Summary.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Summary, err)
	}
	return nil
}

func (p *TraceCombo) ReadField3(iprot thrift.TProtocol) error {
	p.Timeline = &TraceTimeline{}
	if err := p.Timeline.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Timeline, err)
	}
	return nil
}

func (p *TraceCombo) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int64]int32, size)
	p.SpanDepths = tMap
	for i := 0; i < size; i++ {
		var _key5 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key5 = v
		}
		var _val6 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val6 = v
		}
		p.SpanDepths[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TraceCombo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TraceCombo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TraceCombo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trace", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:trace: %s", p, err)
	}
	if err := p.Trace.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Trace, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:trace: %s", p, err)
	}
	return err
}

func (p *TraceCombo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSummary() {
		if err := oprot.WriteFieldBegin("summary", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:summary: %s", p, err)
		}
		if err := p.Summary.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Summary, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:summary: %s", p, err)
		}
	}
	return err
}

func (p *TraceCombo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeline() {
		if err := oprot.WriteFieldBegin("timeline", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timeline: %s", p, err)
		}
		if err := p.Timeline.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Timeline, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timeline: %s", p, err)
		}
	}
	return err
}

func (p *TraceCombo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanDepths() {
		if err := oprot.WriteFieldBegin("span_depths", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:span_depths: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(p.SpanDepths)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.SpanDepths {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:span_depths: %s", p, err)
		}
	}
	return err
}

func (p *TraceCombo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceCombo(%+v)", *p)
}

type QueryRequest struct {
	ServiceName       string                         `thrift:"service_name,1" json:"service_name"`
	SpanName          *string                        `thrift:"span_name,2" json:"span_name"`
	Annotations       []string                       `thrift:"annotations,3" json:"annotations"`
	BinaryAnnotations []*zipkincore.BinaryAnnotation `thrift:"binary_annotations,4" json:"binary_annotations"`
	EndTs             int64                          `thrift:"end_ts,5" json:"end_ts"`
	Limit             int32                          `thrift:"limit,6" json:"limit"`
	Order             Order                          `thrift:"order,7" json:"order"`
}

func NewQueryRequest() *QueryRequest {
	return &QueryRequest{}
}

func (p *QueryRequest) GetServiceName() string {
	return p.ServiceName
}

var QueryRequest_SpanName_DEFAULT string

func (p *QueryRequest) GetSpanName() string {
	if !p.IsSetSpanName() {
		return QueryRequest_SpanName_DEFAULT
	}
	return *p.SpanName
}

var QueryRequest_Annotations_DEFAULT []string

func (p *QueryRequest) GetAnnotations() []string {
	return p.Annotations
}

var QueryRequest_BinaryAnnotations_DEFAULT []*zipkincore.BinaryAnnotation

func (p *QueryRequest) GetBinaryAnnotations() []*zipkincore.BinaryAnnotation {
	return p.BinaryAnnotations
}

func (p *QueryRequest) GetEndTs() int64 {
	return p.EndTs
}

func (p *QueryRequest) GetLimit() int32 {
	return p.Limit
}

func (p *QueryRequest) GetOrder() Order {
	return p.Order
}
func (p *QueryRequest) IsSetSpanName() bool {
	return p.SpanName != nil
}

func (p *QueryRequest) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *QueryRequest) IsSetBinaryAnnotations() bool {
	return p.BinaryAnnotations != nil
}

func (p *QueryRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *QueryRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SpanName = &v
	}
	return nil
}

func (p *QueryRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Annotations = tSlice
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem7 = v
		}
		p.Annotations = append(p.Annotations, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*zipkincore.BinaryAnnotation, 0, size)
	p.BinaryAnnotations = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &zipkincore.BinaryAnnotation{}
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8, err)
		}
		p.BinaryAnnotations = append(p.BinaryAnnotations, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.EndTs = v
	}
	return nil
}

func (p *QueryRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *QueryRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := Order(v)
		p.Order = temp
	}
	return nil
}

func (p *QueryRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("service_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:service_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return fmt.Errorf("%T.service_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:service_name: %s", p, err)
	}
	return err
}

func (p *QueryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanName() {
		if err := oprot.WriteFieldBegin("span_name", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:span_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SpanName)); err != nil {
			return fmt.Errorf("%T.span_name (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:span_name: %s", p, err)
		}
	}
	return err
}

func (p *QueryRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:annotations: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Annotations)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Annotations {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:annotations: %s", p, err)
		}
	}
	return err
}

func (p *QueryRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinaryAnnotations() {
		if err := oprot.WriteFieldBegin("binary_annotations", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:binary_annotations: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BinaryAnnotations)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.BinaryAnnotations {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:binary_annotations: %s", p, err)
		}
	}
	return err
}

func (p *QueryRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_ts", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:end_ts: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndTs)); err != nil {
		return fmt.Errorf("%T.end_ts (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:end_ts: %s", p, err)
	}
	return err
}

func (p *QueryRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:limit: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return fmt.Errorf("%T.limit (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:limit: %s", p, err)
	}
	return err
}

func (p *QueryRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:order: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Order)); err != nil {
		return fmt.Errorf("%T.order (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:order: %s", p, err)
	}
	return err
}

func (p *QueryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryRequest(%+v)", *p)
}

type QueryResponse struct {
	TraceIds []int64 `thrift:"trace_ids,1" json:"trace_ids"`
	StartTs  int64   `thrift:"start_ts,2" json:"start_ts"`
	EndTs    int64   `thrift:"end_ts,3" json:"end_ts"`
}

func NewQueryResponse() *QueryResponse {
	return &QueryResponse{}
}

func (p *QueryResponse) GetTraceIds() []int64 {
	return p.TraceIds
}

func (p *QueryResponse) GetStartTs() int64 {
	return p.StartTs
}

func (p *QueryResponse) GetEndTs() int64 {
	return p.EndTs
}
func (p *QueryResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.TraceIds = tSlice
	for i := 0; i < size; i++ {
		var _elem9 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem9 = v
		}
		p.TraceIds = append(p.TraceIds, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartTs = v
	}
	return nil
}

func (p *QueryResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EndTs = v
	}
	return nil
}

func (p *QueryResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trace_ids", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:trace_ids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TraceIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TraceIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:trace_ids: %s", p, err)
	}
	return err
}

func (p *QueryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_ts", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start_ts: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTs)); err != nil {
		return fmt.Errorf("%T.start_ts (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start_ts: %s", p, err)
	}
	return err
}

func (p *QueryResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_ts", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:end_ts: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndTs)); err != nil {
		return fmt.Errorf("%T.end_ts (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:end_ts: %s", p, err)
	}
	return err
}

func (p *QueryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryResponse(%+v)", *p)
}

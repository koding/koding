// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package zipkincollector

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"scribe"
	"zipkindependencies"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = scribe.GoUnusedProtection__
var _ = zipkindependencies.GoUnusedProtection__

type ZipkinCollector interface {
	scribe.Scribe

	// Aggregates methods
	//
	// Parameters:
	//  - ServiceName
	//  - Annotations
	StoreTopAnnotations(service_name string, annotations []string) (err error)
	// Parameters:
	//  - ServiceName
	//  - Annotations
	StoreTopKeyValueAnnotations(service_name string, annotations []string) (err error)
	// Parameters:
	//  - Dependencies
	StoreDependencies(dependencies *zipkindependencies.Dependencies) (err error)
}

type ZipkinCollectorClient struct {
	*scribe.ScribeClient
}

func NewZipkinCollectorClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ZipkinCollectorClient {
	return &ZipkinCollectorClient{ScribeClient: scribe.NewScribeClientFactory(t, f)}
}

func NewZipkinCollectorClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ZipkinCollectorClient {
	return &ZipkinCollectorClient{ScribeClient: scribe.NewScribeClientProtocol(t, iprot, oprot)}
}

// Aggregates methods
//
// Parameters:
//  - ServiceName
//  - Annotations
func (p *ZipkinCollectorClient) StoreTopAnnotations(service_name string, annotations []string) (err error) {
	if err = p.sendStoreTopAnnotations(service_name, annotations); err != nil {
		return
	}
	return p.recvStoreTopAnnotations()
}

func (p *ZipkinCollectorClient) sendStoreTopAnnotations(service_name string, annotations []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("storeTopAnnotations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StoreTopAnnotationsArgs{
		ServiceName: service_name,
		Annotations: annotations,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ZipkinCollectorClient) recvStoreTopAnnotations() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "storeTopAnnotations failed: out of sequence response")
		return
	}
	result := StoreTopAnnotationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ServiceName
//  - Annotations
func (p *ZipkinCollectorClient) StoreTopKeyValueAnnotations(service_name string, annotations []string) (err error) {
	if err = p.sendStoreTopKeyValueAnnotations(service_name, annotations); err != nil {
		return
	}
	return p.recvStoreTopKeyValueAnnotations()
}

func (p *ZipkinCollectorClient) sendStoreTopKeyValueAnnotations(service_name string, annotations []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("storeTopKeyValueAnnotations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StoreTopKeyValueAnnotationsArgs{
		ServiceName: service_name,
		Annotations: annotations,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ZipkinCollectorClient) recvStoreTopKeyValueAnnotations() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "storeTopKeyValueAnnotations failed: out of sequence response")
		return
	}
	result := StoreTopKeyValueAnnotationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Dependencies
func (p *ZipkinCollectorClient) StoreDependencies(dependencies *zipkindependencies.Dependencies) (err error) {
	if err = p.sendStoreDependencies(dependencies); err != nil {
		return
	}
	return p.recvStoreDependencies()
}

func (p *ZipkinCollectorClient) sendStoreDependencies(dependencies *zipkindependencies.Dependencies) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("storeDependencies", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StoreDependenciesArgs{
		Dependencies: dependencies,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ZipkinCollectorClient) recvStoreDependencies() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "storeDependencies failed: out of sequence response")
		return
	}
	result := StoreDependenciesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type ZipkinCollectorProcessor struct {
	*scribe.ScribeProcessor
}

func NewZipkinCollectorProcessor(handler ZipkinCollector) *ZipkinCollectorProcessor {
	self6 := &ZipkinCollectorProcessor{scribe.NewScribeProcessor(handler)}
	self6.AddToProcessorMap("storeTopAnnotations", &zipkinCollectorProcessorStoreTopAnnotations{handler: handler})
	self6.AddToProcessorMap("storeTopKeyValueAnnotations", &zipkinCollectorProcessorStoreTopKeyValueAnnotations{handler: handler})
	self6.AddToProcessorMap("storeDependencies", &zipkinCollectorProcessorStoreDependencies{handler: handler})
	return self6
}

type zipkinCollectorProcessorStoreTopAnnotations struct {
	handler ZipkinCollector
}

func (p *zipkinCollectorProcessorStoreTopAnnotations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StoreTopAnnotationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("storeTopAnnotations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StoreTopAnnotationsResult{}
	var err2 error
	if err2 = p.handler.StoreTopAnnotations(args.ServiceName, args.Annotations); err2 != nil {
		switch v := err2.(type) {
		case *StoreAggregatesException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeTopAnnotations: "+err2.Error())
			oprot.WriteMessageBegin("storeTopAnnotations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("storeTopAnnotations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type zipkinCollectorProcessorStoreTopKeyValueAnnotations struct {
	handler ZipkinCollector
}

func (p *zipkinCollectorProcessorStoreTopKeyValueAnnotations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StoreTopKeyValueAnnotationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("storeTopKeyValueAnnotations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StoreTopKeyValueAnnotationsResult{}
	var err2 error
	if err2 = p.handler.StoreTopKeyValueAnnotations(args.ServiceName, args.Annotations); err2 != nil {
		switch v := err2.(type) {
		case *StoreAggregatesException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeTopKeyValueAnnotations: "+err2.Error())
			oprot.WriteMessageBegin("storeTopKeyValueAnnotations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("storeTopKeyValueAnnotations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type zipkinCollectorProcessorStoreDependencies struct {
	handler ZipkinCollector
}

func (p *zipkinCollectorProcessorStoreDependencies) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StoreDependenciesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("storeDependencies", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StoreDependenciesResult{}
	var err2 error
	if err2 = p.handler.StoreDependencies(args.Dependencies); err2 != nil {
		switch v := err2.(type) {
		case *StoreAggregatesException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeDependencies: "+err2.Error())
			oprot.WriteMessageBegin("storeDependencies", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("storeDependencies", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type StoreTopAnnotationsArgs struct {
	ServiceName string   `thrift:"service_name,1" json:"service_name"`
	Annotations []string `thrift:"annotations,2" json:"annotations"`
}

func NewStoreTopAnnotationsArgs() *StoreTopAnnotationsArgs {
	return &StoreTopAnnotationsArgs{}
}

func (p *StoreTopAnnotationsArgs) GetServiceName() string {
	return p.ServiceName
}

func (p *StoreTopAnnotationsArgs) GetAnnotations() []string {
	return p.Annotations
}
func (p *StoreTopAnnotationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StoreTopAnnotationsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *StoreTopAnnotationsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Annotations = tSlice
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem7 = v
		}
		p.Annotations = append(p.Annotations, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StoreTopAnnotationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("storeTopAnnotations_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StoreTopAnnotationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("service_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:service_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return fmt.Errorf("%T.service_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:service_name: %s", p, err)
	}
	return err
}

func (p *StoreTopAnnotationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:annotations: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Annotations)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Annotations {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:annotations: %s", p, err)
	}
	return err
}

func (p *StoreTopAnnotationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreTopAnnotationsArgs(%+v)", *p)
}

type StoreTopAnnotationsResult struct {
	E *StoreAggregatesException `thrift:"e,1" json:"e"`
}

func NewStoreTopAnnotationsResult() *StoreTopAnnotationsResult {
	return &StoreTopAnnotationsResult{}
}

var StoreTopAnnotationsResult_E_DEFAULT *StoreAggregatesException

func (p *StoreTopAnnotationsResult) GetE() *StoreAggregatesException {
	if !p.IsSetE() {
		return StoreTopAnnotationsResult_E_DEFAULT
	}
	return p.E
}
func (p *StoreTopAnnotationsResult) IsSetE() bool {
	return p.E != nil
}

func (p *StoreTopAnnotationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StoreTopAnnotationsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &StoreAggregatesException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *StoreTopAnnotationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("storeTopAnnotations_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StoreTopAnnotationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *StoreTopAnnotationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreTopAnnotationsResult(%+v)", *p)
}

type StoreTopKeyValueAnnotationsArgs struct {
	ServiceName string   `thrift:"service_name,1" json:"service_name"`
	Annotations []string `thrift:"annotations,2" json:"annotations"`
}

func NewStoreTopKeyValueAnnotationsArgs() *StoreTopKeyValueAnnotationsArgs {
	return &StoreTopKeyValueAnnotationsArgs{}
}

func (p *StoreTopKeyValueAnnotationsArgs) GetServiceName() string {
	return p.ServiceName
}

func (p *StoreTopKeyValueAnnotationsArgs) GetAnnotations() []string {
	return p.Annotations
}
func (p *StoreTopKeyValueAnnotationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StoreTopKeyValueAnnotationsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *StoreTopKeyValueAnnotationsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Annotations = tSlice
	for i := 0; i < size; i++ {
		var _elem8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem8 = v
		}
		p.Annotations = append(p.Annotations, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StoreTopKeyValueAnnotationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("storeTopKeyValueAnnotations_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StoreTopKeyValueAnnotationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("service_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:service_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return fmt.Errorf("%T.service_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:service_name: %s", p, err)
	}
	return err
}

func (p *StoreTopKeyValueAnnotationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:annotations: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Annotations)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Annotations {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:annotations: %s", p, err)
	}
	return err
}

func (p *StoreTopKeyValueAnnotationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreTopKeyValueAnnotationsArgs(%+v)", *p)
}

type StoreTopKeyValueAnnotationsResult struct {
	E *StoreAggregatesException `thrift:"e,1" json:"e"`
}

func NewStoreTopKeyValueAnnotationsResult() *StoreTopKeyValueAnnotationsResult {
	return &StoreTopKeyValueAnnotationsResult{}
}

var StoreTopKeyValueAnnotationsResult_E_DEFAULT *StoreAggregatesException

func (p *StoreTopKeyValueAnnotationsResult) GetE() *StoreAggregatesException {
	if !p.IsSetE() {
		return StoreTopKeyValueAnnotationsResult_E_DEFAULT
	}
	return p.E
}
func (p *StoreTopKeyValueAnnotationsResult) IsSetE() bool {
	return p.E != nil
}

func (p *StoreTopKeyValueAnnotationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StoreTopKeyValueAnnotationsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &StoreAggregatesException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *StoreTopKeyValueAnnotationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("storeTopKeyValueAnnotations_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StoreTopKeyValueAnnotationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *StoreTopKeyValueAnnotationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreTopKeyValueAnnotationsResult(%+v)", *p)
}

type StoreDependenciesArgs struct {
	Dependencies *zipkindependencies.Dependencies `thrift:"dependencies,1" json:"dependencies"`
}

func NewStoreDependenciesArgs() *StoreDependenciesArgs {
	return &StoreDependenciesArgs{}
}

var StoreDependenciesArgs_Dependencies_DEFAULT *zipkindependencies.Dependencies

func (p *StoreDependenciesArgs) GetDependencies() *zipkindependencies.Dependencies {
	if !p.IsSetDependencies() {
		return StoreDependenciesArgs_Dependencies_DEFAULT
	}
	return p.Dependencies
}
func (p *StoreDependenciesArgs) IsSetDependencies() bool {
	return p.Dependencies != nil
}

func (p *StoreDependenciesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StoreDependenciesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Dependencies = &zipkindependencies.Dependencies{}
	if err := p.Dependencies.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Dependencies, err)
	}
	return nil
}

func (p *StoreDependenciesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("storeDependencies_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StoreDependenciesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dependencies", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dependencies: %s", p, err)
	}
	if err := p.Dependencies.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Dependencies, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dependencies: %s", p, err)
	}
	return err
}

func (p *StoreDependenciesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreDependenciesArgs(%+v)", *p)
}

type StoreDependenciesResult struct {
	E *StoreAggregatesException `thrift:"e,1" json:"e"`
}

func NewStoreDependenciesResult() *StoreDependenciesResult {
	return &StoreDependenciesResult{}
}

var StoreDependenciesResult_E_DEFAULT *StoreAggregatesException

func (p *StoreDependenciesResult) GetE() *StoreAggregatesException {
	if !p.IsSetE() {
		return StoreDependenciesResult_E_DEFAULT
	}
	return p.E
}
func (p *StoreDependenciesResult) IsSetE() bool {
	return p.E != nil
}

func (p *StoreDependenciesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StoreDependenciesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &StoreAggregatesException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *StoreDependenciesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("storeDependencies_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StoreDependenciesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *StoreDependenciesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreDependenciesResult(%+v)", *p)
}

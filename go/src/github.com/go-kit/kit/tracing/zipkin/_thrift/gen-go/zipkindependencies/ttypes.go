// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package zipkindependencies

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Moments struct {
	M0 int64   `thrift:"m0,1" json:"m0"`
	M1 float64 `thrift:"m1,2" json:"m1"`
	M2 float64 `thrift:"m2,3" json:"m2"`
	M3 float64 `thrift:"m3,4" json:"m3"`
	M4 float64 `thrift:"m4,5" json:"m4"`
}

func NewMoments() *Moments {
	return &Moments{}
}

func (p *Moments) GetM0() int64 {
	return p.M0
}

func (p *Moments) GetM1() float64 {
	return p.M1
}

func (p *Moments) GetM2() float64 {
	return p.M2
}

func (p *Moments) GetM3() float64 {
	return p.M3
}

func (p *Moments) GetM4() float64 {
	return p.M4
}
func (p *Moments) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Moments) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.M0 = v
	}
	return nil
}

func (p *Moments) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.M1 = v
	}
	return nil
}

func (p *Moments) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.M2 = v
	}
	return nil
}

func (p *Moments) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.M3 = v
	}
	return nil
}

func (p *Moments) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.M4 = v
	}
	return nil
}

func (p *Moments) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Moments"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Moments) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m0", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m0: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.M0)); err != nil {
		return fmt.Errorf("%T.m0 (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m0: %s", p, err)
	}
	return err
}

func (p *Moments) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m1", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m1: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.M1)); err != nil {
		return fmt.Errorf("%T.m1 (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m1: %s", p, err)
	}
	return err
}

func (p *Moments) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m2", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m2: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.M2)); err != nil {
		return fmt.Errorf("%T.m2 (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m2: %s", p, err)
	}
	return err
}

func (p *Moments) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m3", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:m3: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.M3)); err != nil {
		return fmt.Errorf("%T.m3 (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:m3: %s", p, err)
	}
	return err
}

func (p *Moments) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m4", thrift.DOUBLE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:m4: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.M4)); err != nil {
		return fmt.Errorf("%T.m4 (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:m4: %s", p, err)
	}
	return err
}

func (p *Moments) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Moments(%+v)", *p)
}

type DependencyLink struct {
	Parent          string   `thrift:"parent,1" json:"parent"`
	Child           string   `thrift:"child,2" json:"child"`
	DurationMoments *Moments `thrift:"duration_moments,3" json:"duration_moments"`
}

func NewDependencyLink() *DependencyLink {
	return &DependencyLink{}
}

func (p *DependencyLink) GetParent() string {
	return p.Parent
}

func (p *DependencyLink) GetChild() string {
	return p.Child
}

var DependencyLink_DurationMoments_DEFAULT *Moments

func (p *DependencyLink) GetDurationMoments() *Moments {
	if !p.IsSetDurationMoments() {
		return DependencyLink_DurationMoments_DEFAULT
	}
	return p.DurationMoments
}
func (p *DependencyLink) IsSetDurationMoments() bool {
	return p.DurationMoments != nil
}

func (p *DependencyLink) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DependencyLink) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Parent = v
	}
	return nil
}

func (p *DependencyLink) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Child = v
	}
	return nil
}

func (p *DependencyLink) ReadField3(iprot thrift.TProtocol) error {
	p.DurationMoments = &Moments{}
	if err := p.DurationMoments.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DurationMoments, err)
	}
	return nil
}

func (p *DependencyLink) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DependencyLink"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DependencyLink) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parent", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:parent: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Parent)); err != nil {
		return fmt.Errorf("%T.parent (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:parent: %s", p, err)
	}
	return err
}

func (p *DependencyLink) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("child", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:child: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Child)); err != nil {
		return fmt.Errorf("%T.child (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:child: %s", p, err)
	}
	return err
}

func (p *DependencyLink) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("duration_moments", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:duration_moments: %s", p, err)
	}
	if err := p.DurationMoments.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DurationMoments, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:duration_moments: %s", p, err)
	}
	return err
}

func (p *DependencyLink) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DependencyLink(%+v)", *p)
}

type Dependencies struct {
	StartTime int64             `thrift:"start_time,1" json:"start_time"`
	EndTime   int64             `thrift:"end_time,2" json:"end_time"`
	Links     []*DependencyLink `thrift:"links,3" json:"links"`
}

func NewDependencies() *Dependencies {
	return &Dependencies{}
}

func (p *Dependencies) GetStartTime() int64 {
	return p.StartTime
}

func (p *Dependencies) GetEndTime() int64 {
	return p.EndTime
}

func (p *Dependencies) GetLinks() []*DependencyLink {
	return p.Links
}
func (p *Dependencies) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Dependencies) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *Dependencies) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *Dependencies) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*DependencyLink, 0, size)
	p.Links = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &DependencyLink{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Links = append(p.Links, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Dependencies) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Dependencies"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Dependencies) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:start_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return fmt.Errorf("%T.start_time (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:start_time: %s", p, err)
	}
	return err
}

func (p *Dependencies) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_time", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:end_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return fmt.Errorf("%T.end_time (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:end_time: %s", p, err)
	}
	return err
}

func (p *Dependencies) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("links", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:links: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Links)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Links {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:links: %s", p, err)
	}
	return err
}

func (p *Dependencies) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Dependencies(%+v)", *p)
}

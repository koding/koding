package kitworker

import (
	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics"
	"github.com/go-kit/kit/tracing/zipkin"
	httptransport "github.com/go-kit/kit/transport/http"
)

// ServerOption holds the required parameters for configuring a server
type ServerOption struct {
	// Host holds the host's name
	Host string

	// ZipkinCollector holds the collector for zipkin tracing
	ZipkinCollector zipkin.Collector

	// LogErrors configures whether server should log error responses or not
	LogErrors bool

	// LogRequests configures if the server should log incoming requests or not
	LogRequests bool

	// Latency holds the metric metric for request latency metric collection, if
	// not set Latency metrics will not be collected
	Latency metrics.Histogram

	// Counter holds the metrics.Counter metric for request count metric
	// collection, if not set RequestCountMetrics will not be collected
	Counter metrics.Counter

	// ServerOptions holds custom httptransport.ServerOption array, will be
	// appended to the end of the autogenerated
	ServerOptions []httptransport.ServerOption

	// Middlewares holds custom endpoint.Middleware array will be appended to
	// the end of the autogenerated Middlewares
	Middlewares []endpoint.Middleware
}

// Configure prepares middlewares and serverOptions from the client options
//
// If required:
//   Adds RequestLatencyMiddleware
//   Adds RequestCountMiddleware
//   Adds RequestLoggingMiddleware
//   Adds Zipkin Tracing
//   Adds httptransport.ServerErrorLogger
func (s ServerOption) Configure(moduleName, funcName string, logger log.Logger) ([]endpoint.Middleware, []httptransport.ServerOption) {

	var serverOpts []httptransport.ServerOption
	var middlewares []endpoint.Middleware

	if s.Latency != nil {
		middlewares = append(middlewares, RequestLatencyMiddleware(funcName, s.Latency))
	}

	if s.Counter != nil {
		middlewares = append(middlewares, RequestCountMiddleware(funcName, s.Counter))
	}

	if s.LogRequests {
		middlewares = append(middlewares, RequestLoggingMiddleware(funcName, logger))
	}

	// enable tracing if required
	if s.Host != "" && s.ZipkinCollector != nil {
		tracingLogger := log.NewContext(logger).With("component", "tracing")

		endpointSpan := zipkin.MakeNewSpanFunc(s.Host, moduleName, funcName)
		endpointTrace := zipkin.ToContext(endpointSpan, tracingLogger)
		// add tracing
		serverOpts = append(serverOpts, httptransport.ServerBefore(endpointTrace))
		// add annotation as middleware to server
		middlewares = append(middlewares, zipkin.AnnotateServer(endpointSpan, s.ZipkinCollector))
	}

	// log server errors
	if s.LogErrors {
		serverOpts = append(serverOpts, httptransport.ServerErrorLogger(logger))
	}

	// If any custom middlewares are passed include them
	if len(s.Middlewares) > 0 {
		middlewares = append(middlewares, s.Middlewares...)
	}

	// If any server options are passed include them in server creation
	if len(s.ServerOptions) > 0 {
		serverOpts = append(serverOpts, s.ServerOptions...)
	}

	return middlewares, serverOpts
}

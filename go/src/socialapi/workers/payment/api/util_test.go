package api

import (
	"encoding/json"
	"fmt"
	"koding/db/mongodb/modelhelper"
	"socialapi/models"
	"socialapi/rest"
	"socialapi/workers/common/tests"
	"socialapi/workers/payment"

	. "github.com/smartystreets/goconvey/convey"
	stripe "github.com/stripe/stripe-go"
	"github.com/stripe/stripe-go/coupon"
	"github.com/stripe/stripe-go/currency"
	"github.com/stripe/stripe-go/plan"
	"github.com/stripe/stripe-go/token"
	"gopkg.in/mgo.v2/bson"
)

func withStubData(endpoint string, f func(username string, groupName string, sessionID string)) {
	createURL := endpoint + EndpointCustomerCreate
	acc, _, groupName := models.CreateRandomGroupDataWithChecks()

	group, err := modelhelper.GetGroup(groupName)
	tests.ResultedWithNoErrorCheck(group, err)

	err = modelhelper.MakeAdmin(bson.ObjectIdHex(acc.OldId), group.Id)
	So(err, ShouldBeNil)

	ses, err := models.FetchOrCreateSession(acc.Nick, groupName)
	tests.ResultedWithNoErrorCheck(ses, err)

	req, err := json.Marshal(&stripe.CustomerParams{})
	tests.ResultedWithNoErrorCheck(req, err)

	res, err := rest.DoRequestWithAuth("POST", createURL, req, ses.ClientId)
	tests.ResultedWithNoErrorCheck(res, err)

	f(acc.Nick, groupName, ses.ClientId)

	So(payment.DeleteCustomerForGroup(groupName), ShouldBeNil)
}

func withTestPlan(f func(planID string)) {
	err := payment.EnsurePlan(payment.Plans[payment.Free])
	So(err, ShouldBeNil)

	f(payment.Plans[payment.Free].ID)
}

func withTrialTestPlan(f func(planID string)) {
	pp := &stripe.PlanParams{
		Amount:        10,
		Interval:      plan.Month,
		IntervalCount: 1,
		TrialPeriod:   1,
		Name:          "Trailing 10",
		Currency:      currency.USD,
		ID:            fmt.Sprintf("p_%s", bson.NewObjectId().Hex()),
		Statement:     "Trailing 10",
	}

	_, err := plan.New(pp)
	So(err, ShouldBeNil)

	f(pp.ID)

	_, err = plan.Del(pp.ID)
	So(err, ShouldBeNil)
}

func withNonFreeTestPlan(f func(planID string)) {
	pp := &stripe.PlanParams{
		Amount:        12345,
		Interval:      plan.Month,
		IntervalCount: 1,
		TrialPeriod:   0,
		Name:          "If only that much free",
		Currency:      currency.USD,
		ID:            fmt.Sprintf("p_%s", bson.NewObjectId().Hex()),
		Statement:     "NAN-FREE",
	}

	_, err := plan.New(pp)
	So(err, ShouldBeNil)

	f(pp.ID)

	_, err = plan.Del(pp.ID)
	So(err, ShouldBeNil)
}

func withTestCreditCardToken(f func(token string)) {
	t, err := token.New(&stripe.TokenParams{
		Card: &stripe.CardParams{
			Number: "4242424242424242",
			Month:  "12",
			Year:   "2020",
			CVC:    "123",
		},
	})
	tests.ResultedWithNoErrorCheck(t, err)
	f(t.ID)
}

func addCreditCardToUserWithChecks(endpoint, sessionID string) *stripe.Customer {
	customerUpdateURL := endpoint + EndpointCustomerUpdate
	c := &stripe.Customer{}
	withTestCreditCardToken(func(token string) {
		cp := &stripe.CustomerParams{
			Source: &stripe.SourceParams{
				Token: token,
			},
		}
		req, err := json.Marshal(cp)
		So(err, ShouldBeNil)
		So(req, ShouldNotBeNil)

		res, err := rest.DoRequestWithAuth("POST", customerUpdateURL, req, sessionID)
		So(err, ShouldBeNil)
		So(res, ShouldNotBeNil)

		err = json.Unmarshal(res, c)
		So(err, ShouldBeNil)
	})
	return c
}

func withTestCoupon(f func(string)) {
	c, err := coupon.New(&stripe.CouponParams{
		Amount:   100,
		Duration: "once",
		Currency: "usd",
		// id will be autogenerated
		// ID:       fmt.Sprintf("coupon_%s", bson.NewObjectId().Hex()),
	})
	So(err, ShouldBeNil)
	So(c, ShouldNotBeNil)
	f(c.ID)
	c1, err := coupon.Del(c.ID)
	So(err, ShouldBeNil)
	So(c1, ShouldNotBeNil)
	So(c1.Deleted, ShouldBeTrue)
}

func withSubscription(endpoint, groupName, sessionID, planID string, f func(subscriptionID string)) {
	createURL := endpoint + EndpointSubscriptionCreate
	deleteURL := endpoint + EndpointSubscriptionCancel

	group, err := modelhelper.GetGroup(groupName)
	tests.ResultedWithNoErrorCheck(group, err)

	Convey("We should be able to create a subscription", func() {
		req, err := json.Marshal(&stripe.SubParams{
			Customer: group.Payment.Customer.ID,
			Plan:     planID,
		})
		tests.ResultedWithNoErrorCheck(req, err)

		res, err := rest.DoRequestWithAuth("POST", createURL, req, sessionID)
		tests.ResultedWithNoErrorCheck(res, err)

		v := &stripe.Sub{}
		err = json.Unmarshal(res, v)
		So(err, ShouldBeNil)

		f(v.ID)

		Convey("We should be able to cancel the subscription", func() {
			res, err = rest.DoRequestWithAuth("DELETE", deleteURL, req, sessionID)
			tests.ResultedWithNoErrorCheck(res, err)

			v = &stripe.Sub{}
			err = json.Unmarshal(res, v)
			So(err, ShouldBeNil)
			So(v.Status, ShouldEqual, "canceled")
		})
	})
}

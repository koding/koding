commands:
  create_post_dir:
    command: "mkdir -p /opt/elasticbeanstalk/hooks/appdeploy/post"
    ignoreErrors: true
files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/01init-ebenvname.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh
      CONTAINER_CONFIGURATION=/opt/elasticbeanstalk/deploy/configuration/containerconfiguration
      EB_ENV_NAME=$(grep -oP 'EB_ENV_NAME=\K([A-Za-z0-9]*-[A-Za-z0-9]*)' $CONTAINER_CONFIGURATION)
      echo $EB_ENV_NAME > /var/app/current/EB_ENV_NAME

      if [ ! -f /etc/hostname ]; then
         echo $EB_ENV_NAME-$(ec2-metadata --instance-id | cut -d' ' -f2) > /etc/hostname
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/post/01init-register-to-papertrail.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      cd /var/app/current

      PAPERTRAIL_URL="https://papertrailapp.com/api/v1/systems"
      PAPERTRAIL_PORT=`cat PAPERTRAIL_PORT`
      PAPERTRAIL_TOKEN=`cat PAPERTRAIL_TOKEN`

      # AWS stores environment vars added via ui in this file. `EB_ENV_NAME` refers to the current
      # elasticbeanstalk environment name. It's in format of `koding-<name>`, ie `koding-latest`.
      EB_ENV_NAME=`grep -oP 'EB_ENV_NAME=koding-\K([A-Za-z0-9]*)' /opt/elasticbeanstalk/deploy/configuration/containerconfiguration`
      PUBLIC_IP=`/opt/aws/bin/ec2-metadata -v | awk '{print $2}'`
      PAPERTRAIL_HOST=$EB_ENV_NAME-$PUBLIC_IP

      curl -0 -v -X POST $PAPERTRAIL_URL -H "X-Papertrail-Token: $PAPERTRAIL_TOKEN"  \
      --data "destination_port=${PAPERTRAIL_PORT}&system[name]=${PAPERTRAIL_HOST}"


  "/opt/elasticbeanstalk/hooks/appdeploy/post/01init.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh
      echo "switching to /var/app/current"
      cd /var/app/current
      source /etc/profile
      export HOME=/home/ec2-user

      echo "setting ulimit"
      ulimit -n 10000
      rm -rf ./node_modules

      echo "loading npm modules"
      npm cache clean
      npm install --unsafe-perm --production
      npm install --global gulp

      ./run

      ./scripts/reset-node-modules.sh
      ./scripts/patch-node-modules.sh

      export GOPATH=/var/app/current/go/bin
      echo "build go binaries"
      go/build.sh

      echo "build social api"
      echo "cwd: go/src/socialapi"
      cd ./go/src/socialapi
      make configure
      make install
      make build

      chown -R webapp:webapp /var/app/current

      cd /var/app/current
      cp .env.sh /etc/profile.d/koding_envvars.sh

  "/opt/elasticbeanstalk/hooks/appdeploy/post/01or.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh
      EB_ENV_NAME=`cat /var/app/current/EB_ENV_NAME`
      if [ "$EB_ENV_NAME" != "koding-sandbox" ]; then
        /opt/koding/scripts/add_public_ip_to_objectrocket.sh
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/post/02init.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh
      echo  "installing supervisord"
      easy_install supervisor || echo "supervisord is allready installed"
      echo "adding supervisord to startup scripts"
      cp /var/app/current/deployment/supervisord_initd.sh /etc/rc.d/init.d/supervisord
      chmod +x /etc/rc.d/init.d/supervisord
      chkconfig --add supervisord

      echo "create log folders"
      mkdir -p /var/log/supervisord/
      mkdir -p /var/log/koding/
      echo "created log folders"

      supervisorctl stop all

      echo "running with new supervisord config"
      cp /var/app/current/deployment/generated_files/supervisord.conf /etc/supervisord.conf
      cp /var/app/current/.env.sh /etc/sysconfig/supervisord
      ulimit -n 65535
      service supervisord restart
      echo "updated supervisord config"


  "/opt/elasticbeanstalk/hooks/appdeploy/post/03init.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh
      echo "stopping httpd if exists"
      service httpd stop || echo "httpd is stopped"

      echo "updating ngnix configuration"

      echo "moving nginx config"
      cp /var/app/current/deployment/generated_files/nginx.conf /etc/nginx/
      echo "updated nginx config"

      echo 'koding:$apr1$K17a7D.N$vuaxDfc4kJvHAg7Id43wk1' > /etc/nginx/conf.d/.htpasswd
      echo 'USER3489:$apr1$52wVqnxi$eVUrgOn8oRfPQRG8vU8jE0' >> /etc/nginx/conf.d/.htpasswd

      echo "restarting ngnix with current config"
      service nginx restart
      echo "restarted nginx"

  "/opt/elasticbeanstalk/hooks/appdeploy/post/04init.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh
      exit 0

  "/opt/elasticbeanstalk/hooks/appdeploy/post/05init.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh

      EB_ENV_NAME=`cat /var/app/current/EB_ENV_NAME`
      if [ "$EB_ENV_NAME" == "koding-prod" ]; then
        cd /opt/koding
        ./scripts/upload-sm-rollbar.sh
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/post/99stop_all_services_if_proxy.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh

      EB_ENV_NAME=`cat /var/app/current/EB_ENV_NAME`
      echo "we are in a $EB_ENV_NAME machine"

  "/opt/elasticbeanstalk/hooks/appdeploy/post/07_cleanup.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      rm -rf /tmp/npm*

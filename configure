#!/usr/bin/env coffee


argv       = require('minimist')(process.argv.slice(2))
log        = console.log
fs         = require 'fs'
path       = require 'path'
os         = require 'os'
request    = require 'request'
git        = require 'git-rev'

log "-------------------------"
log ""
log "# ./configure assumes development environment - comes bundled with options below."
log "# override them as you see fit with command line arguments like --config --branch etc."
log ""

version = undefined

options = o =
  projectRoot      : argv.projectRoot    or __dirname
  config           : argv.config         or "dev"
  region           : argv.region         or "dev"
  branch           : argv.branch         or "cake-rewrite"
  build            : argv.build          or 1
  version          : argv.version
  tag              : argv.tag
  environment      : argv.environment    or "dev"
  publicPort       : argv.publicPort     or "8090"
  target           : argv.target         or "localhost"
  onlyconfigure    : argv.onlyconfigure  or no
  runGoWatcher     : argv.hasOwnProperty 'with-go-watcher'
  deploy           : argv.deploy         or no
  host             : argv.host
  ebEnvName        : argv.ebEnvName      or "dev"
  sendEventsToSegment : if argv['disable-segment'] then off else on

rest = ->
  options.publicHostname = argv.publichostname or "http://#{options.hostname}:8090"
  options.version        = options.version or version or "1.0"
  options.tag            = options.tag     or version or "1.0"

  log "Configuring with options:"
  log "-------------------------"
  log o
  log "-------------------------"
  log ""

  KONFIG = require("./config/main.#{o.config}.coffee")(options)

  equals = (x1, x2, whitelist)->

    for key of x1 when key not in whitelist
      if typeof (x2[key]) is "undefined"
        console.log "#{key} is undefined, but exists in 'dev'"
        return false

      if x1[key] and typeof (x1[key]) is "object"
        unless equals(x1[key], x2[key], whitelist)
          console.log x1[key], x2[key], "are not the same"
          return false

    true


  configMatchesDev = (config)->

    dev     = require("./config/main.dev.coffee")(options)
    devKeys = JSON.parse(dev.JSON)
    keys    = JSON.parse config.JSON

    equals(devKeys, keys, config.configCheckExempt)


  createRunFile = (KONFIG)->

    fs.writeFileSync "run",KONFIG.runFile
    fs.chmodSync "./run", 0o755

    fs.writeFileSync "./deployment/generated_files/supervisord.conf", KONFIG.supervisorConf
    fs.writeFileSync "./deployment/generated_files/nginx.conf", KONFIG.nginxConf
    fs.writeFileSync "./.dev.nginx.conf", KONFIG.nginxConf

    if KONFIG.supervisord.output_path
      fs.writeFileSync KONFIG.supervisord.output_path, KONFIG.supervisorConf

    log "Configuration done"
    log "------------------"
    log "MAC INSTALL INSTRUCTIONS"
    log "------------------"
    log "1) install Docker, do `boot2docker init`, `boot2docker up`"
    log "2) export DOCKER_HOST as tcp://192.168.59.103:2375"
    log "3) brew install mongodb nginx"
    log "4) do './run install' "
    log "5) do './run buildservices' to create backend service containers after installing docker."
    log "6) you can then type './run' to run Koding and see it on #{o.hostname} and on koding-#{process.env.USER}.ngrok.com"

    (require "./deployment/socialapiconfig.coffee").create KONFIG

  # write revision to client/.config.json
  writeVersion = (obj) ->
    file = __dirname + '/client/.config.json'
    config = if fs.existsSync file then require file else {}
    config.rev = obj.client.version
    fs.writeFileSync file, JSON.stringify config
    console.log "written #{file}"

  createRunFile KONFIG
  writeVersion KONFIG

  # check 'prod', 'sandbox' config schema against 'dev'
  for c in ["sandbox", "prod"]
    if fs.existsSync("./config/main.#{c}.coffee")
      config = require("./config/main.#{c}.coffee")(options)

      unless configMatchesDev(config)
        process.exit(1)

git.long (str) ->
  if str != ""
    version = str.substring 0, 8
  else
    version = try (fs.readFileSync path.join(__dirname, './VERSION'), 'utf-8').trim()

  if argv.hostname
    options.hostname       = argv.hostname
    rest()
  else if os.type() is "Darwin"
    options.hostname = "dev.koding.com"
    options.ngrok = yes
    rest()
  else
    log "lemme find your IP"
    request "http://echoip.net",(err,res,body)->
        ip = body
        options.hostname = ip
        log "my ip is #{ip}"
        rest()

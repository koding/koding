#!/usr/bin/env coffee

argv       = require('minimist')(process.argv.slice(2))
log        = console.log
time       = console.time
timeEnd    = console.timeEnd
fs         = require 'fs'
path       = require 'path'
os         = require 'os'
request    = require 'request'
git        = require 'git-rev'
JSONStream = require 'JSONStream'
Bongo      = require 'bongo'

time 'configure'

log "-------------------------"
log ""
log "# ./configure assumes development environment - comes bundled with options below."
log "# override them as you see fit with command line arguments like --config --branch etc."
log ""

version = undefined

options = o =
  projectRoot      : argv.projectRoot    or __dirname
  config           : argv.config         or "dev"
  region           : argv.region         or "dev"
  branch           : argv.branch         or "cake-rewrite"
  build            : argv.build          or 1
  version          : argv.version
  tag              : argv.tag
  environment      : argv.environment    or "dev"
  publicPort       : argv.publicPort     or "8090"
  target           : argv.target         or "localhost"
  onlyconfigure    : argv.onlyconfigure  or no
  supervisor       : argv.supervisor     or no
  deploy           : argv.deploy         or no
  host             : argv.host

rest = ->
  options.publicHostname = argv.publichostname or "http://#{options.hostname}:8090"
  options.version        = options.version or version or "1.0"
  options.tag            = options.tag     or version or "1.0"

  log "Configuring with options:"
  log "-------------------------"
  log o
  log "-------------------------"
  log ""

  time 'run config'
  KONFIG = require("./config/main.#{o.config}.coffee")(options)
  timeEnd 'run config'

  createRunFile = (KONFIG)->

    fs.writeFileSync "run",KONFIG.runFile
    fs.chmodSync "./run", 0o755

    fs.writeFileSync "./deployment/generated_files/supervisord.conf", KONFIG.supervisorConf
    fs.writeFileSync "./deployment/generated_files/nginx.conf", KONFIG.nginxConf
    fs.writeFileSync "./.dev.nginx.conf", KONFIG.nginxConf

    # write supervisor config
    if o.supervisor
      fs.writeFileSync "/etc/supervisor/conf.d/koding.conf",KONFIG.supervisorConf

    time 'write social config'
    (require "./deployment/socialapiconfig.coffee").create KONFIG
    timeEnd 'write social config'

  createClientConfig = (cfg, cb) ->
    s = JSONStream.stringifyObject()
    s.pipe fs.createWriteStream('./client/.client-config.json')
    s.write ['config', cfg.client]

    process.env.KONFIG_JSON = cfg.JSON

    time 'get social schema'

    bongo = new Bongo
      root: __dirname
      models: './workers/social/lib/social/models'
    bongo.on 'apiReady', ->
      this.describeApi (schema) ->
        timeEnd 'get social schema'
        s.write ['schema', schema]
        s.end()
        cb()

  time 'write client-config'
  createClientConfig KONFIG, ->
    timeEnd 'write client-config'
    time 'write run'
    createRunFile KONFIG
    timeEnd 'write run'
    timeEnd 'configure'

    log "\nConfiguration done"
    log "------------------"
    log "MAC INSTALL INSTRUCTIONS"
    log "------------------"
    log "1) install Docker, do `boot2docker init`, `boot2docker up`"
    log "2) export DOCKER_HOST as tcp://192.168.59.103:2375"
    log "3) brew install mongodb nginx"
    log "4) do './run install' "
    log "5) do './run buildservices' to create backend service containers after installing docker."
    log "6) you can then type './run' to run Koding and see it on #{o.hostname} and on koding-#{options.publicHostname}.ngrok.com"


git.long (str) ->
  if str != ""
    version = str.substring 0, 8
  else
    version = try (fs.readFileSync path.join(__dirname, './VERSION'), 'utf-8').trim()

  if argv.hostname
    options.hostname       = argv.hostname
    rest()
  else if os.type() is "Darwin"
    options.hostname = "lvh.me"
    options.ngrok = yes
    rest()
  else
    log "lemme find your IP"
    request "http://echoip.net",(err,res,body)->
        ip = body
        options.hostname = ip
        log "my ip is #{ip}"
        rest()

--- a/node_modules/kite.js/static/browser/kontrol-promises-bundle.js	2014-09-04 01:41:59.000000000 +0300
+++ b/node_modules/kite.js/static/browser/kontrol-promises-bundle.js	2014-12-03 03:26:46.000000000 +0200
@@ -207,15 +207,18 @@
     var auth, environment, hostname, logLevel, name, prefix, region, transportClass, transportOptions, url, username, version, _ref;
     this.options = options != null ? options : this.options;
     _ref = this.options, url = _ref.url, auth = _ref.auth, username = _ref.username, environment = _ref.environment, version = _ref.version, region = _ref.region, hostname = _ref.hostname, name = _ref.name, logLevel = _ref.logLevel, transportClass = _ref.transportClass, transportOptions = _ref.transportOptions, prefix = _ref.prefix;
+    if (name == null) {
+      name = 'kontrol';
+    }
     this.kite = new this.constructor.Kite({
+      url: url,
+      auth: auth,
       username: username,
       environment: environment,
       version: version,
       region: region,
       hostname: hostname,
-      name: name != null ? name : 'kontrol',
-      url: url,
-      auth: auth,
+      name: name,
       logLevel: logLevel,
       transportClass: transportClass,
       transportOptions: transportOptions,
@@ -225,16 +228,27 @@
     this.kite.on('open', this.emit.bind(this, 'open'));
   };

-  Kontrol.prototype.createKite = function(_arg) {
-    var kite, kiteDescriptor, token, url;
-    kiteDescriptor = _arg.kite, token = _arg.token, url = _arg.url;
+  Kontrol.prototype.createKite = function(options) {
+    var autoConnect, autoReconnect, kite, kiteDescriptor, token, transportOptions, url;
+    kiteDescriptor = options.kite, token = options.token, transportOptions = options.transportOptions, autoConnect = options.autoConnect, autoReconnect = options.autoReconnect, url = options.url;
+    if (transportOptions == null) {
+      transportOptions = this.options.transportOptions;
+    }
+    if (autoConnect == null) {
+      autoConnect = false;
+    }
+    if (autoReconnect == null) {
+      autoReconnect = true;
+    }
     kite = new this.constructor.Kite({
+      logLevel: this.options.logLevel,
       username: kiteDescriptor.username,
       environment: kiteDescriptor.environment,
       version: kiteDescriptor.version,
       region: kiteDescriptor.region,
       hostname: kiteDescriptor.hostname,
-      autoConnect: false,
+      autoConnect: autoConnect,
+      autoReconnect: autoReconnect,
       name: kiteDescriptor.name,
       url: url,
       auth: {
@@ -242,7 +256,7 @@
         key: token
       },
       transportClass: this.options.transportClass,
-      transportOptions: this.options.transportOptions
+      transportOptions: transportOptions
     }).on('tokenExpired', (function(_this) {
       return function() {
         return _this.renewToken(kite, kiteDescriptor);

--- a/node_modules/kite.js/static/browser/kite-promises-bundle.js	2014-09-04 01:41:59.000000000 +0300
+++ b/node_modules/kite.js/static/browser/kite-promises-bundle.js	2014-12-03 03:26:58.000000000 +0200
@@ -3551,7 +3546,7 @@
   };

   Kite.prototype.disconnect = function(reconnect) {
-    var handle, _i, _len;
+    var handle, _i, _len, _ref2;
     if (reconnect == null) {
       reconnect = false;
     }
@@ -3564,7 +3559,9 @@
       this[handle] = null;
     }
     this.options.autoReconnect = !!reconnect;
-    this.ws.close();
+    if ((_ref2 = this.ws) != null) {
+      _ref2.close();
+    }
     this.emit('notice', "Disconnecting from " + this.options.url);
   };

@@ -3572,13 +3569,15 @@
     this.readyState = READY;
     this.emit('open');
     this.emit('notice', "Connected to Kite: " + this.options.url);
-    this.clearBackoffTimeout();
+    if (typeof this.clearBackoffTimeout === "function") {
+      this.clearBackoffTimeout();
+    }
   };

-  Kite.prototype.onClose = function() {
+  Kite.prototype.onClose = function(event) {
     var dcInfo;
     this.readyState = CLOSED;
-    this.emit('close');
+    this.emit('close', event);
     dcInfo = "" + this.options.url + ": disconnected";
     if (this.options.autoReconnect) {
       process.nextTick((function(_this) {

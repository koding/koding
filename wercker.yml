box: koding/base@0.0.18
no-response-timeout: 10
services:
  - wercker/postgresql@0.0.4
  - wercker/rabbitmq@1.0.1
  - wercker/redis@0.0.8
  - wercker/mongodb@1.0.1

build:
  steps:
    - add-ssh-key:
        keyname: DEPLOYMENT_KEY
    - script:
        name: setup git identity
        code: |
          git config --global user.email 'sysops@koding.com'
          git config --global user.name 'Koding Bot'
    - script:
        name: fetch pull requests
        code: |
          git config --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pull/*'
          git fetch --force --quiet origin
    - script:
        name: build started
        code: |
          scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH is in progress" "building" 10
    - script:
        name: setup nvm
        code: |
          source $HOME/.nvm/nvm.sh
          nvm use 0.10.33
    - script:
        name: koding node modules
        code: |
          $WERCKER_ROOT/scripts/wercker/install-node-modules koding
    - script:
        name: notify cebeci
        code: |
          scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH - build preparation finished" "building" 30
    - script:
        name: set up koding deployment key
        code: |
          chmod 600 $KODING_DEPLOYMENT_KEY
    - mktemp:
        envvar: INSTANCE_DATA
    - mktemp:
        envvar: INSTANCE_IP
    - script:
        name: launch test instance
        code: |
          INSTANCE_OPTIONS=$(scripts/wercker/get-instance-options)
          scripts/wercker/launch-test-instance $INSTANCE_OPTIONS | tail -n1 > $INSTANCE_DATA
          cat $INSTANCE_DATA
    - script:
        name: configure build
        code: ./configure --config $CONFIG --projectRoot $WERCKER_SOURCE_DIR
    - script:
        name: build client
        code: |
          sh -c "scripts/install-npm.sh -d client -u -p"
          make -C client dist
          ./scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH - build client finished" "building" 35
    - script:
        name: build go binaries
        code: go/build.sh
    - script:
        name: build social api
        cwd: go/src/socialapi
        code: |
          make configure
          make install
          make build
    - script:
        name: build backend finished
        code: |
          scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH - build backend finished" "building" 40
    - script:
        name: testing backend started
        code: |
          scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH - test backend started" "building" 41
    - script:
        name: create postgresql tables
        cwd: go
        code: |
          src/socialapi/db/sql/definition/create-wercker.sh src/socialapi/db/sql
          bin/migrate -url "postgres://$WERCKER_POSTGRESQL_HOST:$WERCKER_POSTGRESQL_PORT/$WERCKER_POSTGRESQL_DATABASE?user=$WERCKER_POSTGRESQL_USERNAME&password=$WERCKER_POSTGRESQL_PASSWORD" -path "src/socialapi/db/sql/migrations" up
    - script:
        name: test social api
        code: |
          sudo -E scripts/wercker/init-socialapi.sh
          tail -n 100 /var/log/koding/social-api.log
          tail -n 100 /var/log/koding/social-populartopic.log
          tail -n 100 /var/log/koding/social-pinnedpost.log
          cd go/src/socialapi
          make testapi config=./config/test.toml
    - script: # todo generalize this part when we have more tests
        name: test koding mongo models
        code: |
          go test ./go/src/koding/db/mongodb/modelhelper/*go
    - script:
        name: testing backend finished
        code: |
          scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH - test backend finished" "building" 45
    - script:
        name: check connectivity
        code: |
          HOST=$(cat $INSTANCE_DATA | awk '{print $2}')
          if [ -z "$HOST" ]; then exit 1; fi
          echo $HOST > $INSTANCE_IP
          scripts/wercker/check-connectivity $HOST 8090 1m 5
          scripts/wercker/check-connectivity $HOST 4444 1m 7
    - script:
        name: testing client started
        code: |
          scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH - test client started" "building" 46
    - script:
        name: run register test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh register'
    - script:
        name: run login test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh login'
    - script:
        name: run logout test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh logout'
    - script:
        name: run activity post test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh activity post'
    - script:
        name: run activity post with test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh activity postwith'
    - script:
        name: run activity edit delete test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh activity editdelete'
    - script:
        name: run activity like unlike suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh activity likeunlike'
    - script:
        name: run activity others test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh activity others'
    - script:
        name: run private message test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh messages privatemessage'
    - script:
        name: run account page test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh account accountpage'
    - script:
        name: run account settings test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh account accountsettings'
    - script:
        name: run pricing test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh pricing payment'
    - script:
        name: run ide file test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh ide file'
    - script:
        name: run ide terminal sessions test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh ide terminal'
    - script:
        name: run ide layout test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh ide layout'
    - script:
        name: run ide workspace test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh ide workspace'
    - script:
        name: run ide general test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh ide general'
    - script:
        name: run static page loggedout test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh staticpages loggedout'
    - script:
        name: run environments vm test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh environments vm'
    - script:
        name: run environments domain test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh environments domain'
    - script:
        name: run environments paidaccount test suite
        code: |
          ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $(cat $INSTANCE_IP) 'sudo /opt/koding/client/test/run.sh environments paidaccount'
    - script:
        name: testing client finished
        code: |
          scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH - test client finished" "building" 85
  after-steps:
    - script:
        name: cat socialapi
        code: |
          tail -n 100 /var/log/koding/social-api.log
          tail -n 100 /var/log/koding/social-populartopic.log
          tail -n 100 /var/log/koding/social-pinnedpost.log
    - script:
        name: terminate test instance
        code: |
          INSTANCE_ID=$(cat $INSTANCE_DATA | awk '{print $1}')
          if [ -n "$INSTANCE_ID" ]; then scripts/wercker/terminate-test-instance $INSTANCE_ID; fi

    - jessefulton/slack-notify:
        subdomain: koding
        token: $SLACK_TOKEN
        channel: announce
        username: wercker
        icon_url: https://avatars3.githubusercontent.com/u/1695193?s=140
    - script:
        name: build finished
        code: |
          scripts/notify-cebeci.sh "build" "<$WERCKER_BUILD_URL|build> of $WERCKER_GIT_BRANCH is $WERCKER_RESULT " $WERCKER_RESULT 100
deploy:
  steps:
    - script:
        name: deploy started
        code: |
          $WERCKER_ROOT/scripts/notify-cebeci.sh "deploy" "<$WERCKER_DEPLOY_URL|deploy> of $WERCKER_GIT_BRANCH started" "deploying" 5
    - create-file:
        name: write version file
        filename: $WERCKER_ROOT/VERSION
        content: ${WERCKER_GIT_COMMIT:0:8}
        overwrite: true
    - script:
        name: setup nvm
        code: |
          source $HOME/.nvm/nvm.sh
          nvm use 0.10.33
    - script:
        name: zip
        code: |
          cd $WERCKER_ROOT

          ./configure --config $CONFIG --projectRoot /opt/koding

          rm -rf .git .build node_modules client/node_modules client/builder/node_modules client/landing/node_modules client/.sprites
          rm -rf go/bin go/pkg
          zip -q --symlinks -r $ARCHIVE .

          $WERCKER_ROOT/scripts/notify-cebeci.sh "deploy" "created deploy file $ARCHIVE" "deploying" 45


    - koding/eb-deploy@0.0.8:
        access-key: $S3_KEY_ID
        secret-key: $S3_KEY_SECRET
        app-name: koding
        env-name: $EB_ENV_NAME
        version-label: $ARCHIVE
        region: $EB_ENV_REGION
        s3-bucket: $S3_EB_DEPLOY-$EB_ENV_REGION
        s3-key: $ARCHIVE
    - script:
        name: notify-cebeci with eb trigger
        code: |
          $WERCKER_ROOT/scripts/notify-cebeci.sh "deploy" "triggered $EB_ENV_NAME EB" "deploying" 95

  after-steps:
    - jessefulton/slack-notify:
        subdomain: koding
        token: $SLACK_TOKEN
        channel: announce
        username: wercker
        icon_url: https://avatars3.githubusercontent.com/u/1695193?s=140
    - script:
        name: notify-cebeci with result
        code: |
          $WERCKER_ROOT/scripts/notify-cebeci.sh "deploy" "wercker is done with the <$WERCKER_DEPLOY_URL|deploy> of $WERCKER_GIT_BRANCH result: $WERCKER_RESULT" $WERCKER_RESULT 100

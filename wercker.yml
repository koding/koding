box: koding/base@0.0.14
services:
  - wercker/postgresql@0.0.4
  - wercker/rabbitmq@1.0.1
  - wercker/redis@0.0.8
  - wercker/mongodb@1.0.1

build:
  steps:
    - script:
        name: npm install
        code: |
          npm cache clean
          npm set registry https://registry.npmjs.org/
          npm install || :
          cd client/Framework && npm install && cd ../../
          cd client/landing && npm install && cd ../../
    - script:
        name: configure build
        code: ./configure --config $CONFIG --projectRoot /opt/koding
    - script:
        name: build client
        code: |
          sudo chown -R $USER ~/.npm
          ./run
    - script:
        name: build go binaries
        code: go/build.sh
    - script:
        name: build social api
        cwd: go/src/socialapi
        code: |
          make configure
          make install
          make build
    - script:
        name: create postgresql tables
        cwd: go/src/socialapi/db/sql
        code: definition/create-wercker.sh .
    - script:
        name: test social api
        code: |
          sudo -E scripts/wercker/init-socialapi.sh
          tail -n 100 /var/log/koding/social-api.log
          tail -n 100 /var/log/koding/social-populartopic.log
          tail -n 100 /var/log/koding/social-pinnedpost.log
          cd go/src/socialapi
          make testapi config=./config/test.toml
    # - add-ssh-key:
    #     keyname: DEPLOYMENT_KEY
    # - script:
    #     name: fetch pull requests
    #     code: |
    #       git config --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pull/*'
    #       git fetch --quiet origin
    # - mktemp:
    #     envvar: INSTANCE_DATA
    # - script:
    #     name: launch test instance
    #     code: |
    #       REMOTE_BRANCH=$(git branch -r -v | grep ${WERCKER_GIT_COMMIT:0:7} | awk '{print $1}')
    #       GIT_REF=$(scripts/wercker/get-gitref $REMOTE_BRANCH)
    #       scripts/wercker/launch-test-instance --gitref "$GIT_REF" | tail -n1 > $INSTANCE_DATA
    #       INSTANCE_IP=$(cat $INSTANCE_DATA | awk '{print $2}')
    #       scripts/wercker/check-connectivity $INSTANCE_IP 8090 1m 3
    #       scripts/wercker/check-connectivity $INSTANCE_IP 4444 1m 2
    #       sleep 120
    # - script:
    #     name: run test suite
    #     code: |
    #       INSTANCE_IP=$(cat $INSTANCE_DATA | awk '{print $2}')
    #       chmod 600 $KODING_DEPLOYMENT_KEY
    #       ssh -o 'StrictHostKeyChecking no' -i $KODING_DEPLOYMENT_KEY -l ubuntu $INSTANCE_IP 'sudo /opt/koding/tests/test'
  after-steps:
    # - script:
    #     name: terminate test instance
    #     code: |
    #       INSTANCE_ID=$(cat $INSTANCE_DATA | awk '{print $1}')
    #       scripts/wercker/terminate-test-instance $INSTANCE_ID
    - jessefulton/slack-notify:
        subdomain: koding
        token: $SLACK_TOKEN
        channel: announce
        username: wercker
        icon_url: https://avatars3.githubusercontent.com/u/1695193?s=140
deploy:
  steps:
    - create-file:
        name: write version file
        filename: $WERCKER_ROOT/VERSION
        content: ${WERCKER_GIT_COMMIT:0:8}
        overwrite: true
    - script:
        name: zip
        code: |
          cd $WERCKER_ROOT

          ./configure --config $CONFIG --projectRoot /opt/koding
          ./run

          rm -rf .git .build node_modules
          rm -rf go/bin go/pkg
          rm -rf website/a/js/*.map
          zip -q --symlinks -r $ARCHIVE .
    - koding/s3put@0.0.3:
          key-id: $S3_KEY_ID
          key-secret: $S3_KEY_SECRET
          file: $ARCHIVE
          url: s3://$S3_EB_DEPLOY
    - koding/eb-deploy@0.0.5:
          access-key: $S3_KEY_ID
          secret-key: $S3_KEY_SECRET
          app-name: koding
          env-name: $EB_ENV_NAME
          app-location: $S3_EB_DEPLOY/$ARCHIVE
          version-label: $ARCHIVE
  after-steps:
    - jessefulton/slack-notify:
        subdomain: koding
        token: $SLACK_TOKEN
        channel: announce
        username: wercker
        icon_url: https://avatars3.githubusercontent.com/u/1695193?s=140

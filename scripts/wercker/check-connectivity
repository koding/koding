#!/bin/bash

INSTANCE_DATA_FILE=$1

FAILING_INSTANCES_DATA_FILE=$(mktemp)

SCRIPTS=$(dirname $0)/..

function repeat () {
  INTERVAL=$1
  TRY_COUNT=$2
  COUNTER=0

  shift 2

  until "$@"; do
    COUNTER=$((COUNTER + 1))
    if [ $COUNTER -eq $TRY_COUNT ]; then
      echo "failed: $@"
      return 1
    fi
    echo "pending: $@"
    sleep $INTERVAL
  done

  echo "succeeded: $@"
  return 0
}

function terminate_failing_instances () {
  INSTANCES=$(cat $FAILING_INSTANCES_DATA_FILE)

  if [ -z "$INSTANCES" ]; then
    return 0
  fi

  $SCRIPTS/wercker/upload-logs $FAILING_INSTANCES_DATA_FILE
  cat $FAILING_INSTANCES_DATA_FILE | xargs -n 1 $SCRIPTS/test-instance/terminate
}

function check_revision () {
  INSTANCE=$1
  HOST=$(echo $INSTANCE | awk ' {print $2}')
  REMOTE_REVISION=$($SCRIPTS/test-instance/ssh $HOST 'GIT_DIR=/opt/koding/.git git rev-parse HEAD')

  if [ "$REMOTE_REVISION" != "$REVISION" ]; then
    echo "failed: $INSTANCE revision does not match"
    return 1
  fi

  return 0
}

function check_connectivity () {
  INSTANCE=$1
  PORT=$2

  INSTANCE_ID=$(echo $INSTANCE | awk '{print $1}')
  HOST=$(echo $INSTANCE | awk '{print $2}')

  nc $HOST $PORT
}

function health_check () {
  INSTANCE=$1
  HOST=$(echo $INSTANCE | awk '{print $2}')
  OUTPUT=$(curl --silent --dump-header /dev/stdout "http://$HOST:8090/-/healthCheck")
  STATUS_LINE=$(echo "$OUTPUT" | head -n1)
  STATUS_LINE=$(echo "$STATUS_LINE" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

  if [ "$STATUS_LINE" != "HTTP/1.1 200 OK" ]; then
    return 1
  fi

  return 0
}

function fail_instance () {
  INSTANCE=$1
  echo $INSTANCE >> $FAILING_INSTANCES_DATA_FILE
  exit 1
}

IFS=$'\n'

INSTANCES=$(cat $INSTANCE_DATA_FILE)
truncate --size 0 $INSTANCE_DATA_FILE

for INSTANCE in $INSTANCES; do
  (
    check_revision $INSTANCE || fail_instance $INSTANCE
    repeat 1m 20 check_connectivity $INSTANCE 8090 || fail_instance $INSTANCE
    repeat 1m 10 health_check $INSTANCE || fail_instance $INSTANCE
    echo $INSTANCE >> $INSTANCE_DATA_FILE
  ) &
done

wait

terminate_failing_instances

INSTANCE_COUNT=$(cat $INSTANCE_DATA_FILE | wc -l)

if [ $INSTANCE_COUNT -eq 0 ]; then
  echo "error: no instance found"
  exit 1
fi

INSTANCE_IDS=$(cat $INSTANCE_DATA_FILE | awk '{print $1}')

if [ -z "$INSTANCE_IDS" ]; then
  echo "error: instance data file is malformed"
  cat $INSTANCE_DATA_FILE
  exit 1
fi

echo $INSTANCE_IDS | xargs -n 1 $SCRIPTS/test-instance/protect

exit 0

#!/usr/bin/env coffee

fs   = require 'fs'
argv = require('minimist')(process.argv.slice(2))
path = require('path')
AWS  = require './aws'
EC2  = new AWS.EC2()

keys              =
  config          : new Buffer(fs.readFileSync path.resolve(__dirname, 'ssh.config'), 'utf8').toString 'base64'
  id_rsa          : new Buffer(fs.readFileSync path.resolve(__dirname, 'koding-test-instances-2015-06.pem'), 'utf8').toString 'base64'

if argv['pull-request']
  git_fetch    = "git fetch origin +refs/pull/#{argv['pull-request']}/head"
  git_checkout = 'git checkout FETCH_HEAD'
else if argv.commit
  git_fetch    = 'git fetch origin'
  git_checkout = "git checkout -fq #{argv.commit}"
else
  console.error 'error: Please specify a remote branch or a commit'
  process.exit 1

argv.count ?= 1

if typeof argv.count isnt 'number'
  console.error 'error: Non-number value is given as instance count'
  process.exit 1

userData =
  """
  #cloud-config
  disable_root: false
  hostname: wercker-test-instance

  runcmd:
    - echo 127.0.0.1 `hostname` >> /etc/hosts
    - echo 127.0.0.1 freegeoip.net >> /etc/hosts
    - echo #{keys.config}                         | base64 --decode > /root/.ssh/config
    - echo #{process.env.KODING_BOT_PRIVATE_KEY}  | base64 --decode > /root/.ssh/id_rsa
    - echo #{process.env.KODING_BOT_PUBLIC_KEY}   | base64 --decode > /root/.ssh/id_rsa.pub
    - chmod 0600 /root/.ssh/id_rsa
    - cd /opt/koding
    - ip -s -s neigh flush all
    - echo 'Checking connectivity to GitHub over ssh'
    - scripts/test-instance/check-connectivity github.com 22 1m 3
    - #{git_fetch}
    - #{git_checkout}
    - git submodule update --recursive
    - /opt/koding/scripts/test-instance/init
    - echo $(git rev-parse HEAD) > REVISION
  """

params =
  ImageId          : (require './instance-ami.coffee').current
  InstanceType     : 'm3.large'
  MinCount         : argv.count
  MaxCount         : argv.count
  SubnetId         : 'subnet-c05e3699' # subnet-1a-koding-external-servers
  SecurityGroupIds : ['sg-d7eefcb3']   # sg-koding-external-servers-wercker
  KeyName          : 'koding-test-instances-2015-06'
  UserData         : new Buffer(userData).toString 'base64'

InstanceIds = []
RunningInstances = []

monitorInterval = null


EC2.runInstances params, (err, data) ->

  if err
    console.error JSON.stringify err
    process.exit 1
    return

  data.Instances.forEach ({InstanceId}) -> InstanceIds.push InstanceId
  tag()
  monitorInterval = setInterval monitor, 5000


tag = ->

  refspec = switch
    when argv['pull-request']
      "pr-#{argv['pull-request']}"
    when argv['commit']
      "rv-#{argv['commit'].substring 0, 7}"

  Resources = InstanceIds
  Key   = 'Name'
  Value = "test-#{refspec}"
  Tags  = [{Key, Value}]

  EC2.createTags {Resources, Tags}, ->


monitor = ->

  EC2.describeInstances {InstanceIds}, (err, data) ->
    return console.error JSON.stringify err  if err
    data.Reservations.forEach checkInstances


checkInstances = ({Instances}) ->

  Instances.forEach checkInstanceState
  if RunningInstances.length is InstanceIds.length
    exit()


checkInstanceState = (Instance) ->

  for RunningInstance in RunningInstances \
    when Instance.InstanceId is RunningInstance.InstanceId
      return

  if Instance.State.Name is 'running'
    RunningInstances.push Instance  if Instance


exit = ->

  clearInterval monitorInterval
  printInstanceInfo()
  process.exit()


printInstanceInfo = ->

  RunningInstances.forEach (Instance) ->
    {InstanceId, PublicIpAddress} = Instance
    console.log InstanceId, PublicIpAddress

###

This is a basic googleapis module wrapper.

See: https://www.npmjs.com/package/googleapis

It exposes three functions to utilize:

- `authorize`
- `authenticate`
- `authenticated`


`authorize` and `authenticate` functions are provided to handle these
procedures in the client module.

`authorize` initializes `google.auth.JWT` instance with following
options:

- scope   : Scope to restrict token
- subject : Service URL

Following options are defined internally for `authorize` function:

- email : Service account email
- key   : Service account key file path

`authentiocated` function wraps given function with a set of
procedures.  These procedures ensure wrapped function is executed with
a valid OAuth2 client instance.

`authenticated` accepts following options:

- `authorization_options` : See options of `authorize` function above.

- `authorization_handler` : Optional callback function.  It is invoked
  with token information when authorization process succeeds.

- `authentication_handler` : Optional callback function.  A new
  `google.auth.OAuth2` instance is passed.

`authenticated` wrapper validates `google.auth.OAuth2` instance set
for given callback function on each call.  If OAuth2 client is not set
before then a new instance is created via `authorize` and
`authenticate` functions.  Next calls will benefit from using existing
`google.auth.Oauth2` instance.

There is a preset timeout of 30 minutes for `google.auth.JWT` tokens.
If that timeout is passed then a new `google.auth.OAuth2` instance is
created the same way with same authorization and authentication
options.  If client module depends on `google.auth.OAuth2` instance
then passed `authententication_handler` callback should make the
necessary changes in client module.

###


google = require 'googleapis'
KONFIG = require 'koding-config-manager'


account = KONFIG.googleapiServiceAccount
email   = account.serviceAccountEmail
key     = account.serviceAccountKeyFile

{
  clientId
  clientSecret
} = account


checkServiceAccount = (callback) ->

  return 'service account email is not set'  unless email
  return 'service account key is not set'    unless key
  return 'client id is not set'              unless clientId
  return 'client secret is not set'          unless clientSecret


authorize = (options, callback) ->

  return callback err  if err = checkServiceAccount()

  { scope, subject } = options

  scope ?= null

  return callback 'Subject is not specified'  unless subject

  subject = [subject]  if typeof subject is 'string'

  new google.auth.JWT email, key, scope, subject
    .authorize callback


authenticate = (options, callback) ->

  return callback err  if err = checkServiceAccount()

  { access_token, refresh_token } = options

  return callback 'access_token is not specified'  unless access_token
  return callback 'refresh_token is not specified'  unless refresh_token

  oauth2Client = new google.auth.OAuth2 clientId, clientSecret, null
  oauth2Client.setCredentials options

  callback null, oauth2Client


authenticated = (options, callback) ->

  {
    authorization_options
    authorization_handler
    authentication_handler
  } = options

  return do (oauth2Client = null, timestamp = null) ->

    return (args...) ->

      callback_arguments = args

      invoke_callback = -> callback.apply null, callback_arguments

      authenticate_callback = (cb) ->

        authorize authorization_options, (err, token) ->
          return console.error err  if err

          authorization_handler? token

          authenticate token, (err, client) ->
            return console.error err  if err

            oauth2Client = client
            timestamp = Date.now()

            authentication_handler? client
            cb()

      age     = Date.now() - timestamp
      expired = age > 30 * 60 * 1000

      if oauth2Client
        if expired
        then authenticate_callback invoke_callback
        else invoke_callback()
      else
        authenticate_callback invoke_callback


module.exports = {
  authorize
  authenticate
  authenticated
}

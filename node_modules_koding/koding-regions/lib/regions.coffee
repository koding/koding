geoip = require 'geoip-lite'
csv   = require 'csv'
fs    = require 'fs'

module.exports = class Regions

  SUPPORTED_REGIONS = [
    'us-east-1'
    'us-west-1'
    'us-west-2'
    'eu-west-1'
    'eu-central-1'
    'sa-east-1'
    'ap-southeast-1'
    'ap-southeast-2'
    'ap-northeast-1'
  ]

  UNKNOWN_LOCATION  = {
    location        : 'Unknown location'
    regions         : SUPPORTED_REGIONS
  }

  rd        = __dirname
  COUNTRIES = JSON.parse fs.readFileSync "#{rd}/countries-alternatives.json"
  STATES    = JSON.parse fs.readFileSync "#{rd}/usa-alternatives.json"

  parseIndexFile = (filename, callback) ->

    index = {}

    try

      csv()
        .from.options
          trim      : yes
          delimiter : ';'
        .from filename
        .to.array (cs) ->
          cs.forEach (country) ->
            [code, name, regions] = country
            regions = regions.split ','
            index[code] = { location: name, regions }
          callback index

    catch e

      console.error "Failed to parse #{filename}:", e
      callback null

  @updateJsonFiles = ->

    ['countries-alternatives', 'usa-alternatives'].forEach (indexFile) ->

      parseIndexFile "#{indexFile}.index", (index) ->
        _json = JSON.stringify index
        fs.writeFileSync "#{indexFile}.json", _json
        console.log "#{indexFile} written to disk."


  @getUnknownLocation = (regions) ->

    return {
      location : 'Unknown Location'
      regions  : (
        r for r in regions when r in SUPPORTED_REGIONS
      ) or SUPPORTED_REGIONS
    }


  @findLocation = (ip) ->

    geo = geoip.lookup ip
    geo?.ip = ip
    return geo or {
      country : 'Earth'
      region  : 'Somewhere'
      ip
    }


  @findRegion = (ip, regions = SUPPORTED_REGIONS) ->

    geo = geoip.lookup ip

    unless geo
      return @getUnknownLocation regions

    else

      if geo.country is 'US'
        _info = STATES[geo.region]
      else
        _info = COUNTRIES[geo.country]

      if _info
        info = { geo }
        info.location = _info.location
        info.regions = (
          r for r in _info.regions when r in regions
        ) or SUPPORTED_REGIONS

        return info

      else
        return @getUnknownLocation regions

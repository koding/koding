os          = require 'os'
KONFIG      = require 'koding-config-manager'
MetricsBase = require './metricsbase'

module.exports = class NodejsProfiler

  constructor : (prefix) ->
    @prefix = prefix


  populateNodejsTags : (tags) ->

    tags ?= []

    tagList = {
      os      : [ 'type', 'release', 'hostname' ]
      process : [ 'pid', 'version' ]
    }

    for key, value of tagList
      for prop in value
        tagName  = "#{key}.#{prop}"
        tagValue = ''

        source = switch
          when key is 'process'  then process
          when key is 'os'       then os

        tagValue = switch
          when not source[prop]                   then 0
          when Array.isArray source[prop]         then source[prop].join('_')
          when typeof source[prop] is 'function'  then source[prop].call()
          else                                    source[prop]

        tagValue = MetricsBase.sanitizeTagValue tagValue
        tags.push "#{tagName}:#{tagValue}"

    return tags


  startMonitoring : ->

    appmetrics = require 'appmetrics'
    appmetrics.start()

    prefix = @prefix

    disabledTypes = ['profiling', 'mongo', 'http', 'socketio', 'mqlight'
      'postgresql', 'mqtt', 'mysql', 'redis', 'memcached', 'requests', 'trace']

    disabledTypes.forEach (type) ->
      appmetrics.disable(type)

    @monitor = appmetrics.monitor()

    tags = @populateNodejsTags()
    tags.push "version:#{KONFIG.version}"

    @monitor.on 'eventloop', (eventloop) ->
      eventloopMetrics =
        gauge           :
          'latency.min' : eventloop.latency.min
          'latency.max' : eventloop.latency.max
          'latency.avg' : eventloop.latency.avg

      MetricsBase.sendMetrics eventloopMetrics, "#{prefix}.eventloop", tags

    @monitor.on 'memory', (memory) ->
      memMetrics =
        gauge                :
          'process.private'  : memory.private
          'process.physical' : memory.physical
          'process.virtual'  : memory.virtual
          'system.used'      : memory.physical_used
          'system.total'     : memory.physical_total

      MetricsBase.sendMetrics memMetrics, "#{prefix}.memory", tags

    @monitor.on 'gc', (gc) ->
      gcMetrics =
        gauge      :
          size     : gc.size
          used     : gc.used
          duration : gc.duration

      MetricsBase.sendMetrics gcMetrics, "#{prefix}.gc", tags

    @monitor.on 'cpu', (cpu) ->
      cpuMetrics =
        gauge     :
          process : cpu.process
          system  : cpu.system

      MetricsBase.sendMetrics cpuMetrics, "#{prefix}.cpu", tags

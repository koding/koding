!function(){
(function(){var require = function (file, cwd) {
    var resolved = require.resolve(file, cwd || '/');
    var mod = require.modules[resolved];
    if (!mod) throw new Error(
        'Failed to resolve module ' + file + ', tried ' + resolved
    );
    var cached = require.cache[resolved];
    var res = cached? cached.exports : mod();
    return res;
};

require.paths = [];
require.modules = {};
require.cache = {};
require.extensions = [".js",".coffee"];

require._core = {
    'assert': true,
    'events': true,
    'fs': true,
    'path': true,
    'vm': true
};

require.resolve = (function () {
    return function (x, cwd) {
        if (!cwd) cwd = '/';
        
        if (require._core[x]) return x;
        var path = require.modules.path();
        cwd = path.resolve('/', cwd);
        var y = cwd || '/';
        
        if (x.match(/^(?:\.\.?\/|\/)/)) {
            var m = loadAsFileSync(path.resolve(y, x))
                || loadAsDirectorySync(path.resolve(y, x));
            if (m) return m;
        }
        
        var n = loadNodeModulesSync(x, y);
        if (n) return n;
        
        throw new Error("Cannot find module '" + x + "'");
        
        function loadAsFileSync (x) {
            x = path.normalize(x);
            if (require.modules[x]) {
                return x;
            }
            
            for (var i = 0; i < require.extensions.length; i++) {
                var ext = require.extensions[i];
                if (require.modules[x + ext]) return x + ext;
            }
        }
        
        function loadAsDirectorySync (x) {
            x = x.replace(/\/+$/, '');
            var pkgfile = path.normalize(x + '/package.json');
            if (require.modules[pkgfile]) {
                var pkg = require.modules[pkgfile]();
                var b = pkg.browserify;
                if (typeof b === 'object' && b.main) {
                    var m = loadAsFileSync(path.resolve(x, b.main));
                    if (m) return m;
                }
                else if (typeof b === 'string') {
                    var m = loadAsFileSync(path.resolve(x, b));
                    if (m) return m;
                }
                else if (pkg.main) {
                    var m = loadAsFileSync(path.resolve(x, pkg.main));
                    if (m) return m;
                }
            }
            
            return loadAsFileSync(x + '/index');
        }
        
        function loadNodeModulesSync (x, start) {
            var dirs = nodeModulesPathsSync(start);
            for (var i = 0; i < dirs.length; i++) {
                var dir = dirs[i];
                var m = loadAsFileSync(dir + '/' + x);
                if (m) return m;
                var n = loadAsDirectorySync(dir + '/' + x);
                if (n) return n;
            }
            
            var m = loadAsFileSync(x);
            if (m) return m;
        }
        
        function nodeModulesPathsSync (start) {
            var parts;
            if (start === '/') parts = [ '' ];
            else parts = path.normalize(start).split('/');
            
            var dirs = [];
            for (var i = parts.length - 1; i >= 0; i--) {
                if (parts[i] === 'node_modules') continue;
                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';
                dirs.push(dir);
            }
            
            return dirs;
        }
    };
})();

require.alias = function (from, to) {
    var path = require.modules.path();
    var res = null;
    try {
        res = require.resolve(from + '/package.json', '/');
    }
    catch (err) {
        res = require.resolve(from, '/');
    }
    var basedir = path.dirname(res);
    
    var keys = (Object.keys || function (obj) {
        var res = [];
        for (var key in obj) res.push(key);
        return res;
    })(require.modules);
    
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.slice(0, basedir.length + 1) === basedir + '/') {
            var f = key.slice(basedir.length);
            require.modules[to + f] = require.modules[basedir + f];
        }
        else if (key === basedir) {
            require.modules[to] = require.modules[basedir];
        }
    }
};

(function () {
    var process = {};
    
    require.define = function (filename, fn) {
        if (require.modules.__browserify_process) {
            process = require.modules.__browserify_process();
        }
        
        var dirname = require._core[filename]
            ? ''
            : require.modules.path().dirname(filename)
        ;
        
        var require_ = function (file) {
            var requiredModule = require(file, dirname);
            var cached = require.cache[require.resolve(file, dirname)];

            if (cached && cached.parent === null) {
                cached.parent = module_;
            }

            return requiredModule;
        };
        require_.resolve = function (name) {
            return require.resolve(name, dirname);
        };
        require_.modules = require.modules;
        require_.define = require.define;
        require_.cache = require.cache;
        var module_ = {
            id : filename,
            filename: filename,
            exports : {},
            loaded : false,
            parent: null
        };
        
        require.modules[filename] = function () {
            require.cache[filename] = module_;
            fn.call(
                module_.exports,
                require_,
                module_,
                module_.exports,
                dirname,
                filename,
                process
            );
            module_.loaded = true;
            return module_.exports;
        };
    };
})();


require.define("path",function(require,module,exports,__dirname,__filename,process){function filter (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (fn(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length; i >= 0; i--) {
    var last = parts[i];
    if (last == '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Regex to split a filename into [*, dir, basename, ext]
// posix version
var splitPathRe = /^(.+\/(?!$)|\/)?((?:.+?)?(\.[^.]*)?)$/;

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
var resolvedPath = '',
    resolvedAbsolute = false;

for (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {
  var path = (i >= 0)
      ? arguments[i]
      : process.cwd();

  // Skip empty and invalid entries
  if (typeof path !== 'string' || !path) {
    continue;
  }

  resolvedPath = path + '/' + resolvedPath;
  resolvedAbsolute = path.charAt(0) === '/';
}

// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)

// Normalize the path
resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
var isAbsolute = path.charAt(0) === '/',
    trailingSlash = path.slice(-1) === '/';

// Normalize the path
path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }
  
  return (isAbsolute ? '/' : '') + path;
};


// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    return p && typeof p === 'string';
  }).join('/'));
};


exports.dirname = function(path) {
  var dir = splitPathRe.exec(path)[1] || '';
  var isWindows = false;
  if (!dir) {
    // No dirname
    return '.';
  } else if (dir.length === 1 ||
      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {
    // It is just a slash or a drive letter with a slash
    return dir;
  } else {
    // It is a full dirname, strip trailing slash
    return dir.substring(0, dir.length - 1);
  }
};


exports.basename = function(path, ext) {
  var f = splitPathRe.exec(path)[2] || '';
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPathRe.exec(path)[3] || '';
};
});

require.define("__browserify_process",function(require,module,exports,__dirname,__filename,process){var process = module.exports = {};

process.nextTick = (function () {
    var queue = [];
    var canPost = typeof window !== 'undefined'
        && window.postMessage && window.addEventListener
    ;
    
    if (canPost) {
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'browserify-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);
    }
    
    return function (fn) {
        if (canPost) {
            queue.push(fn);
            window.postMessage('browserify-tick', '*');
        }
        else setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    if (name === 'evals') return (require)('vm')
    else throw new Error('No such module. (Possibly not yet loaded)')
};

(function () {
    var cwd = '/';
    var path;
    process.cwd = function () { return cwd };
    process.chdir = function (dir) {
        if (!path) path = require('path');
        cwd = path.resolve(dir, cwd);
    };
})();
});

require.define("vm",function(require,module,exports,__dirname,__filename,process){module.exports = require("vm-browserify")});

require.define("/node_modules/vm-browserify/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/vm-browserify/index.js",function(require,module,exports,__dirname,__filename,process){var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInNewContext = function (context) {
    if (!context) context = {};
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
     
    if (!win.eval && win.execScript) {
        // win.eval() magically appears when this is called in IE:
        win.execScript('null');
    }
    
    var res = win.eval(this.code);
    
    forEach(Object_keys(win), function (key) {
        context[key] = win[key];
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInContext = function (context) {
    // seems to be just runInNewContext on magical context objects which are
    // otherwise indistinguishable from objects except plain old objects
    // for the parameter segfaults node
    return this.runInNewContext(context);
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    // not really sure what this one does
    // seems to just make a shallow copy
    var copy = {};
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};
});

require.define("/node_modules/microemitter/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/microemitter/index.js",function(require,module,exports,__dirname,__filename,process){var EventEmitter,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty;

EventEmitter = (function() {
  'use strict';
  var createId, defineProperty, idKey, init, mixin;

  idKey = 'ಠ_ಠ';

  EventEmitter.listeners = {};

  EventEmitter.targets = {};

  EventEmitter.off = function(listenerId) {
    /*
    Note: @off, but no symmetrical "@on".  This is by design.
      One shouldn't add event listeners directly.  These static
      collections are maintained so that the listeners may be
      garbage collected and removed from the emitter's record.
      To that end, @off provides a handy interface.
    */

    delete this.listeners[listenerId];
    delete this.targets[listenerId];
    return this;
  };

  defineProperty = Object.defineProperty || function(obj, prop, _arg) {
    var value;
    value = _arg.value;
    return obj[prop] = value;
  };

  createId = (function() {
    var counter;
    counter = 0;
    return function() {
      return counter++;
    };
  })();

  mixin = function(obj) {
    var prop, prot, _results;
    prot = EventEmitter.prototype;
    _results = [];
    for (prop in prot) {
      _results.push(obj[prop] = prot[prop]);
    }
    return _results;
  };

  init = function(obj) {
    if (!(idKey in obj)) {
      defineProperty(obj, idKey, {
        value: "" + (Math.round(Math.random() * 1e9))
      });
    }
    if (!('_events' in obj)) {
      return defineProperty(obj, '_events', {
        value: {}
      });
    }
  };

  function EventEmitter(obj) {
    if (obj != null) {
      mixin(obj);
    }
  }

  EventEmitter.prototype.on = function(evt, listener) {
    var lid, listeners, _base;
    if (listener == null) {
      throw new Error('Listener is required!');
    }
    init(this);
    this.emit('newListener', evt, listener);
    listeners = (_base = this._events)[evt] || (_base[evt] = {});
    if (this[idKey] in listener) {
      lid = listener[this[idKey]];
    } else {
      lid = createId();
      defineProperty(listener, this[idKey], {
        value: lid
      });
    }
    EventEmitter.listeners[lid] = listeners[lid] = listener;
    EventEmitter.targets[lid] = this;
    return this;
  };

  EventEmitter.prototype.once = function(evt, listener) {
    var wrappedListener,
      _this = this;
    wrappedListener = function() {
      var rest;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _this.off(evt, wrappedListener);
      return listener.apply(_this, rest);
    };
    return this.on(evt, wrappedListener);
  };

  EventEmitter.prototype.off = function(evt, listener) {
    var key, listenerId, listeners, _ref;
    init(this);
    switch (arguments.length) {
      case 0:
        _ref = this._events;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          delete this._events[key];
        }
        break;
      case 1:
        this._events[evt] = {};
        break;
      default:
        listeners = this._events[evt];
        listenerId = listener[this[idKey]];
        if (listeners != null) {
          delete listeners[listenerId];
        }
        EventEmitter.off(listenerId);
    }
    return this;
  };

  EventEmitter.prototype.emit = function() {
    var evt, id, listener, listeners, rest, _ref;
    evt = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    init(this);
    listeners = (_ref = this._events[evt]) != null ? _ref : [];
    for (id in listeners) {
      if (!__hasProp.call(listeners, id)) continue;
      listener = listeners[id];
      listener.call.apply(listener, [this].concat(__slice.call(rest)));
    }
    if (evt === 'error' && listeners.length === 0) {
      throw rest[0];
    }
    return this;
  };

  return EventEmitter;

})();

if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
  module.exports.EventEmitter = EventEmitter;
} else if ((typeof define !== "undefined" && define !== null ? define.amd : void 0) != null) {
  define(function() {
    return EventEmitter;
  });
} else {
  this['EventEmitter'] = EventEmitter;
}
});

require.define("/node_modules/traverse/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/traverse/index.js",function(require,module,exports,__dirname,__filename,process){var traverse = module.exports = function (obj) {
    return new Traverse(obj);
};

function Traverse (obj) {
    this.value = obj;
}

Traverse.prototype.get = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) {
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) {
            node = undefined;
            break;
        }
        node = node[key];
    }
    return node;
};

Traverse.prototype.has = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) {
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) {
            return false;
        }
        node = node[key];
    }
    return true;
};

Traverse.prototype.set = function (ps, value) {
    var node = this.value;
    for (var i = 0; i < ps.length - 1; i ++) {
        var key = ps[i];
        if (!hasOwnProperty.call(node, key)) node[key] = {};
        node = node[key];
    }
    node[ps[i]] = value;
    return value;
};

Traverse.prototype.map = function (cb) {
    return walk(this.value, cb, true);
};

Traverse.prototype.forEach = function (cb) {
    this.value = walk(this.value, cb, false);
    return this.value;
};

Traverse.prototype.reduce = function (cb, init) {
    var skip = arguments.length === 1;
    var acc = skip ? this.value : init;
    this.forEach(function (x) {
        if (!this.isRoot || !skip) {
            acc = cb.call(this, acc, x);
        }
    });
    return acc;
};

Traverse.prototype.paths = function () {
    var acc = [];
    this.forEach(function (x) {
        acc.push(this.path); 
    });
    return acc;
};

Traverse.prototype.nodes = function () {
    var acc = [];
    this.forEach(function (x) {
        acc.push(this.node);
    });
    return acc;
};

Traverse.prototype.clone = function () {
    var parents = [], nodes = [];
    
    return (function clone (src) {
        for (var i = 0; i < parents.length; i++) {
            if (parents[i] === src) {
                return nodes[i];
            }
        }
        
        if (typeof src === 'object' && src !== null) {
            var dst = copy(src);
            
            parents.push(src);
            nodes.push(dst);
            
            forEach(objectKeys(src), function (key) {
                dst[key] = clone(src[key]);
            });
            
            parents.pop();
            nodes.pop();
            return dst;
        }
        else {
            return src;
        }
    })(this.value);
};

function walk (root, cb, immutable) {
    var path = [];
    var parents = [];
    var alive = true;
    
    return (function walker (node_) {
        var node = immutable ? copy(node_) : node_;
        var modifiers = {};
        
        var keepGoing = true;
        
        var state = {
            node : node,
            node_ : node_,
            path : [].concat(path),
            parent : parents[parents.length - 1],
            parents : parents,
            key : path.slice(-1)[0],
            isRoot : path.length === 0,
            level : path.length,
            circular : null,
            update : function (x, stopHere) {
                if (!state.isRoot) {
                    state.parent.node[state.key] = x;
                }
                state.node = x;
                if (stopHere) keepGoing = false;
            },
            'delete' : function (stopHere) {
                delete state.parent.node[state.key];
                if (stopHere) keepGoing = false;
            },
            remove : function (stopHere) {
                if (isArray(state.parent.node)) {
                    state.parent.node.splice(state.key, 1);
                }
                else {
                    delete state.parent.node[state.key];
                }
                if (stopHere) keepGoing = false;
            },
            keys : null,
            before : function (f) { modifiers.before = f },
            after : function (f) { modifiers.after = f },
            pre : function (f) { modifiers.pre = f },
            post : function (f) { modifiers.post = f },
            stop : function () { alive = false },
            block : function () { keepGoing = false }
        };
        
        if (!alive) return state;
        
        function updateState() {
            if (typeof state.node === 'object' && state.node !== null) {
                if (!state.keys || state.node_ !== state.node) {
                    state.keys = objectKeys(state.node)
                }
                
                state.isLeaf = state.keys.length == 0;
                
                for (var i = 0; i < parents.length; i++) {
                    if (parents[i].node_ === node_) {
                        state.circular = parents[i];
                        break;
                    }
                }
            }
            else {
                state.isLeaf = true;
                state.keys = null;
            }
            
            state.notLeaf = !state.isLeaf;
            state.notRoot = !state.isRoot;
        }
        
        updateState();
        
        // use return values to update if defined
        var ret = cb.call(state, state.node);
        if (ret !== undefined && state.update) state.update(ret);
        
        if (modifiers.before) modifiers.before.call(state, state.node);
        
        if (!keepGoing) return state;
        
        if (typeof state.node == 'object'
        && state.node !== null && !state.circular) {
            parents.push(state);
            
            updateState();
            
            forEach(state.keys, function (key, i) {
                path.push(key);
                
                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
                
                var child = walker(state.node[key]);
                if (immutable && hasOwnProperty.call(state.node, key)) {
                    state.node[key] = child.node;
                }
                
                child.isLast = i == state.keys.length - 1;
                child.isFirst = i == 0;
                
                if (modifiers.post) modifiers.post.call(state, child);
                
                path.pop();
            });
            parents.pop();
        }
        
        if (modifiers.after) modifiers.after.call(state, state.node);
        
        return state;
    })(root).node;
}

function copy (src) {
    if (typeof src === 'object' && src !== null) {
        var dst;
        
        if (isArray(src)) {
            dst = [];
        }
        else if (isDate(src)) {
            dst = new Date(src.getTime ? src.getTime() : src);
        }
        else if (isRegExp(src)) {
            dst = new RegExp(src);
        }
        else if (isError(src)) {
            dst = { message: src.message, internal: 'stack' in src };
        }
        else if (isBoolean(src)) {
            dst = new Boolean(src);
        }
        else if (isNumber(src)) {
            dst = new Number(src);
        }
        else if (isString(src)) {
            dst = new String(src);
        }
        else if (Object.create && Object.getPrototypeOf) {
            dst = Object.create(Object.getPrototypeOf(src));
        }
        else if (src.constructor === Object) {
            dst = {};
        }
        else {
            var proto =
                (src.constructor && src.constructor.prototype)
                || src.__proto__
                || {}
            ;
            var T = function () {};
            T.prototype = proto;
            dst = new T;
        }
        
        forEach(objectKeys(src), function (key) {
            dst[key] = src[key];
        });
        return dst;
    }
    else return src;
}

var objectKeys = Object.keys || function keys (obj) {
    var res = [];
    for (var key in obj) res.push(key)
    return res;
};

function toS (obj) { return Object.prototype.toString.call(obj) }
function isDate (obj) { return toS(obj) === '[object Date]' }
function isRegExp (obj) { return toS(obj) === '[object RegExp]' }
function isError (obj) { return toS(obj) === '[object Error]' }
function isBoolean (obj) { return toS(obj) === '[object Boolean]' }
function isNumber (obj) { return toS(obj) === '[object Number]' }
function isString (obj) { return toS(obj) === '[object String]' }

var isArray = Array.isArray || function isArray (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

forEach(objectKeys(Traverse.prototype), function (key) {
    traverse[key] = function (obj) {
        var args = [].slice.call(arguments, 1);
        var t = new Traverse(obj);
        return t[key].apply(t, args);
    };
});

var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
    return key in obj;
};
});

require.define("/node_modules/hat/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/hat/index.js",function(require,module,exports,__dirname,__filename,process){var hat = module.exports = function (bits, base) {
    if (!base) base = 16;
    if (bits === undefined) bits = 128;
    if (bits <= 0) return '0';
    
    var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
    for (var i = 2; digits === Infinity; i *= 2) {
        digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
    }
    
    var rem = digits - Math.floor(digits);
    
    var res = '';
    
    for (var i = 0; i < Math.floor(digits); i++) {
        var x = Math.floor(Math.random() * base).toString(base);
        res = x + res;
    }
    
    if (rem) {
        var b = Math.pow(base, rem);
        var x = Math.floor(Math.random() * b).toString(base);
        res = x + res;
    }
    
    var parsed = parseInt(res, base);
    if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
        return hat(bits, base)
    }
    else return res;
};

hat.rack = function (bits, base, expandBy) {
    var fn = function (data) {
        var iters = 0;
        do {
            if (iters ++ > 10) {
                if (expandBy) bits += expandBy;
                else throw new Error('too many ID collisions, use more bits')
            }
            
            var id = hat(bits, base);
        } while (Object.hasOwnProperty.call(hats, id));
        
        hats[id] = data;
        return id;
    };
    var hats = fn.hats = {};
    
    fn.get = function (id) {
        return fn.hats[id];
    };
    
    fn.set = function (id, value) {
        fn.hats[id] = value;
        return fn;
    };
    
    fn.bits = bits || 128;
    fn.base = base || 16;
    return fn;
};
});

require.define("/node_modules/jspath/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/jspath/index.js",function(require,module,exports,__dirname,__filename,process){(function() {
  var JsPath,
    __slice = Array.prototype.slice;

  module.exports = JsPath = (function() {
    var primTypes,
      _this = this;

    primTypes = /^(string|number|boolean)$/;

    /*
      @constructor.
      @signature: new JsPath(path, val)
      @param: path - a dot-notation style "path" to identify a
        nested JS object.
      @description: Initialize a new js object with the provided
        path.  I've never actually used this constructor for any-
        thing, and it is here for the sake of "comprehensiveness"
        at this time, although I am incredulous as to it's overall
        usefulness.
    */

    function JsPath(path, val) {
      return JsPath.setAt({}, path, val || {});
    }

    ['forEach', 'indexOf', 'join', 'pop', 'reverse', 'shift', 'sort', 'splice', 'unshift', 'push'].forEach(function(method) {
      return JsPath[method + 'At'] = function() {
        var obj, path, rest, target;
        obj = arguments[0], path = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        target = JsPath.getAt(obj, path);
        if ('function' === typeof (target != null ? target[method] : void 0)) {
          return target[method].apply(target, rest);
        } else {
          throw new Error("Does not implement method " + method + " at " + path);
        }
      };
    });

    /*
      @method. property of the constructor.
      @signature: JsPath.getAt(ref, path)
      @param: ref - the object to traverse.
      @param: path - a dot-notation style "path" to identify a
        nested JS object.
      @return: the object that can be found inside ref at the path
        described by the second parameter or undefined if the path
        is not valid.
    */

    JsPath.getAt = function(ref, path) {
      var prop;
      if ('function' === typeof path.split) {
        path = path.split('.');
      } else {
        path = path.slice();
      }
      while ((ref != null) && (prop = path.shift())) {
        ref = ref[prop];
      }
      return ref;
    };

    /*
      @method. property of the constructor.
      @signature: JsPath.getAt(ref, path)
      @param: obj - the object to extend.
      @param: path - a dot-notation style "path" to identify a
        nested JS object.
      @param: val - the value to assign to the path of the obj.
      @return: the object that was extended.
      @description: set a property to the path provided by the
        second parameter with the value provided by the third
        parameter.
    */

    JsPath.setAt = function(obj, path, val) {
      var component, last, prev, ref;
      if ('function' === typeof path.split) {
        path = path.split('.');
      } else {
        path = path.slice();
      }
      last = path.pop();
      prev = [];
      ref = obj;
      while (component = path.shift()) {
        if (primTypes.test(typeof ref[component])) {
          throw new Error("" + (prev.concat(component).join('.')) + " is\nprimitive, and cannot be extended.");
        }
        ref = ref[component] || (ref[component] = {});
        prev.push(component);
      }
      ref[last] = val;
      return obj;
    };

    JsPath.assureAt = function(ref, path, initializer) {
      var obj;
      if (obj = JsPath.getAt(ref, path)) {
        return obj;
      } else {
        JsPath.setAt(ref, path, initializer);
        return initializer;
      }
    };

    /*
      @method. property of the constructor.
      @signature: JsPath.deleteAt(ref, path)
      @param: obj - the object to extend.
      @param: path - a dot-notation style "path" to identify a
        nested JS object to dereference.
      @return: boolean success.
      @description: deletes the reference specified by the last
        unit of the path from the object specified by other
        components of the path, belonging to the provided object.
    */

    JsPath.deleteAt = function(ref, path) {
      var component, last, prev;
      if ('function' === typeof path.split) {
        path = path.split('.');
      } else {
        path = path.slice();
      }
      prev = [];
      last = path.pop();
      while (component = path.shift()) {
        if (primTypes.test(typeof ref[component])) {
          throw new Error("" + (prev.concat(component).join('.')) + " is\nprimitive; cannot drill any deeper.");
        }
        if (!(ref = ref[component])) return false;
        prev.push(component);
      }
      return delete ref[last];
    };

    return JsPath;

  }).call(this);

  /*
  Footnotes:
    1 - if there's no .split() method, assume it's already an array
  */

}).call(this);
});

require.define("/node_modules/koding-dnode-protocol/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/koding-dnode-protocol/index.js",function(require,module,exports,__dirname,__filename,process){var DnodeScrubber, DnodeSession, DnodeStore, EventEmitter, Scrubber, createId, exports, getAt, json, parseArgs, setAt, stream, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

_ref = require('jspath'), getAt = _ref.getAt, setAt = _ref.setAt;

Scrubber = require('scrubber');

createId = require('hat').rack();

stream = process.title === "browser" ? {} : require("stream");

json = typeof JSON !== "undefined" && JSON !== null ? JSON : require('jsonify');

exports = module.exports = function(wrapper) {
  return {
    sessions: {},
    create: function() {
      var id;
      id = createId();
      return this.sessions[id] = new DnodeSession(id, wrapper);
    },
    destroy: function(id) {
      return delete this.sessions[id];
    }
  };
};

/**
* @class DnodeSession
* @description an implementation of the Session class from dnode-protocol
*/


exports.Session = DnodeSession = (function(_super) {
  var apply;

  __extends(DnodeSession, _super);

  function DnodeSession(id, wrapper) {
    var _this = this;
    this.id = id;
    this.parse = __bind(this.parse, this);
    this.remote = {};
    this.instance = 'function' === typeof wrapper ? new wrapper(this.remote, this) : wrapper || {};
    this.localStore = new DnodeStore;
    this.remoteStore = new DnodeStore;
    this.localStore.on('cull', function(id) {
      return _this.emit('request', {
        method: 'cull',
        "arguments": [id],
        callbacks: {}
      });
    });
  }

  DnodeSession.prototype.start = function() {
    return this.request('methods', [this.instance]);
  };

  DnodeSession.prototype.request = function(method, args) {
    var scrubber,
      _this = this;
    scrubber = new DnodeScrubber(this.localStore);
    return scrubber.scrub(args, function() {
      var scrubbed;
      scrubbed = scrubber.toDnodeProtocol();
      scrubbed.method = method;
      return _this.emit('request', scrubbed);
    });
  };

  DnodeSession.prototype.parse = function(line) {
    var err, msg;
    try {
      msg = json.parse(line);
    } catch (_error) {
      err = _error;
      this.emit('error', new SyntaxError("JSON parsing error: " + err));
    }
    return this.handle(msg);
  };

  DnodeSession.prototype.handle = function(msg) {
    var args, method, scrubber,
      _this = this;
    scrubber = new DnodeScrubber(this.localStore);
    args = scrubber.unscrub(msg, function(callbackId) {
      if (!_this.remoteStore.has(callbackId)) {
        _this.remoteStore.add(callbackId, function() {
          return _this.request(callbackId, [].slice.call(arguments));
        });
      }
      return _this.remoteStore.get(callbackId);
    });
    method = msg.method;
    switch (method) {
      case 'methods':
        return this.handleMethods(args[0]);
      case 'error':
        return this.emit('remoteError', args[0]);
      case 'cull':
        return args.forEach(function(id) {
          return _this.remoteStore.cull(id);
        });
      default:
        switch (typeof method) {
          case 'string':
            if (this.instance.propertyIsEnumerable(method)) {
              return apply(this.instance[method], this.instance, args);
            } else {
              return this.emit('error', new Error("Request for non-enumerable method: " + method));
            }
            break;
          case 'number':
            return apply(this.localStore.get(method), this.instance, args);
        }
    }
  };

  DnodeSession.prototype.handleMethods = function(methods) {
    var _this = this;
    if (methods == null) {
      methods = {};
    }
    Object.keys(this.remote).forEach(function(key) {
      return delete _this.remote[key];
    });
    Object.keys(methods).forEach(function(key) {
      return _this.remote[key] = methods[key];
    });
    this.emit('remote', this.remote);
    return this.emit('ready');
  };

  apply = function(fn, ctx, args) {
    return fn.apply(ctx, args);
  };

  return DnodeSession;

})(EventEmitter);

/**
* @class DnodeScrubber
* @description an implementation of the Scrubber class from dnode-protocol that supports a middleware stack
*/


exports.Scrubber = DnodeScrubber = (function(_super) {
  __extends(DnodeScrubber, _super);

  function DnodeScrubber(store, stack, autoCull) {
    var dnodeMutators, userStack, _ref1;
    if (store == null) {
      store = new DnodeStore;
    }
    if (autoCull == null) {
      autoCull = true;
    }
    this.paths = {};
    this.links = [];
    dnodeMutators = [
      function(cursor) {
        var i, id, node, path;
        node = cursor.node, path = cursor.path;
        if ('function' === typeof node) {
          i = store.indexOf(node);
          if (~i && !(i in this.paths)) {
            this.paths[i] = path;
          } else {
            if (autoCull) {
              node.times = 1;
            }
            id = store.add(node);
            this.paths[id] = path;
          }
          return cursor.update('[Function]', true);
        }
      }
    ];
    userStack = (_ref1 = stack != null ? stack : DnodeScrubber.stack) != null ? _ref1 : [];
    Scrubber.apply(this, dnodeMutators.concat(userStack));
  }

  DnodeScrubber.prototype.unscrub = function(msg, getCallback) {
    var args;
    args = msg["arguments"] || [];
    Object.keys(msg.callbacks || {}).forEach(function(strId) {
      var callback, id, path;
      id = parseInt(strId, 10);
      path = msg.callbacks[id];
      callback = getCallback(id);
      callback.id = id;
      return setAt(args, path, callback);
    });
    (msg.links || []).forEach(function(link) {
      return setAt(args, link.to, getAt(args, link.from));
    });
    return args;
  };

  DnodeScrubber.prototype.toDnodeProtocol = function() {
    var out;
    out = {
      "arguments": this.out
    };
    out.callbacks = this.paths;
    if (this.links.length) {
      out.links = this.links;
    }
    return out;
  };

  return DnodeScrubber;

})(Scrubber);

/**
* @class DnodeStore
* @description an implementation of the Store class from dnode-protocol
*/


exports.Store = DnodeStore = (function(_super) {
  __extends(DnodeStore, _super);

  function DnodeStore() {
    this.items = [];
  }

  DnodeStore.prototype.has = function(id) {
    return this.items[id] != null;
  };

  DnodeStore.prototype.get = function(id) {
    var item;
    item = this.items[id];
    if (item == null) {
      return null;
    }
    return this.wrap(item);
  };

  DnodeStore.prototype.add = function(id, fn) {
    var _ref1;
    if (!fn) {
      _ref1 = [id, fn], fn = _ref1[0], id = _ref1[1];
    }
    if (id == null) {
      id = this.items.length;
    }
    this.items[id] = fn;
    return id;
  };

  DnodeStore.prototype.cull = function(arg) {
    if ('function' === typeof arg) {
      arg = this.items.indexOf(arg);
    }
    delete this.items[arg];
    return arg;
  };

  DnodeStore.prototype.indexOf = function(fn) {
    return this.items.indexOf(fn);
  };

  DnodeStore.prototype.wrap = function(fn) {
    var _this = this;
    return function() {
      fn.apply(_this, arguments);
      return _this.autoCull(fn);
    };
  };

  DnodeStore.prototype.autoCull = function(fn) {
    var id;
    if ('number' === typeof fn.times) {
      fn.times--;
      if (fn.times === 0) {
        id = this.cull(fn);
        return this.emit('cull', id);
      }
    }
  };

  return DnodeStore;

})(EventEmitter);

parseArgs = exports.parseArgs = function(argv) {
  var params;
  params = {};
  [].slice.call(argv).forEach(function(arg) {
    switch (typeof arg) {
      case 'string':
        if (arg.match(/^\d+$/)) {
          return params.port = parseInt(arg, 10);
        } else if (arg.match("^/")) {
          return params.path = arg;
        } else {
          return params.host = arg;
        }
        break;
      case 'number':
        return params.port = arg;
      case 'function':
        return params.block = arg;
      case 'object':
        if (arg.__proto__ === Object.prototype) {
          return Object.keys(arg).forEach(function(key) {
            return params[key] = arg[key];
          });
        } else if (stream.Stream && arg instanceof stream.Stream) {
          return params.stream = arg;
        } else {
          return params.server = arg;
        }
        break;
      case 'undefined':
        break;
      default:
        throw new Error('Not sure what to do about ' + typeof arg + ' objects');
    }
  });
  return params;
};
});

require.define("events",function(require,module,exports,__dirname,__filename,process){if (!process.EventEmitter) process.EventEmitter = function () {};

var EventEmitter = exports.EventEmitter = process.EventEmitter;
var isArray = typeof Array.isArray === 'function'
    ? Array.isArray
    : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]'
    }
;

// By default EventEmitters will print a warning if more than
// 10 listeners are added to it. This is a useful default which
// helps finding memory leaks.
//
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
var defaultMaxListeners = 10;
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!this._events) this._events = {};
  this._events.maxListeners = n;
};


EventEmitter.prototype.emit = function(type) {
  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events || !this._events.error ||
        (isArray(this._events.error) && !this._events.error.length))
    {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
      return false;
    }
  }

  if (!this._events) return false;
  var handler = this._events[type];
  if (!handler) return false;

  if (typeof handler == 'function') {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        var args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
    return true;

  } else if (isArray(handler)) {
    var args = Array.prototype.slice.call(arguments, 1);

    var listeners = handler.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
    return true;

  } else {
    return false;
  }
};

// EventEmitter is defined in src/node_events.cc
// EventEmitter.prototype.emit() is also defined there.
EventEmitter.prototype.addListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('addListener only takes instances of Function');
  }

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type == "newListeners"! Before
  // adding it to the listeners, first emit "newListeners".
  this.emit('newListener', type, listener);

  if (!this._events[type]) {
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  } else if (isArray(this._events[type])) {

    // Check for listener leak
    if (!this._events[type].warned) {
      var m;
      if (this._events.maxListeners !== undefined) {
        m = this._events.maxListeners;
      } else {
        m = defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        console.trace();
      }
    }

    // If we've already got an array, just append.
    this._events[type].push(listener);
  } else {
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  var self = this;
  self.on(type, function g() {
    self.removeListener(type, g);
    listener.apply(this, arguments);
  });

  return this;
};

EventEmitter.prototype.removeListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('removeListener only takes instances of Function');
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (!this._events || !this._events[type]) return this;

  var list = this._events[type];

  if (isArray(list)) {
    var i = list.indexOf(listener);
    if (i < 0) return this;
    list.splice(i, 1);
    if (list.length == 0)
      delete this._events[type];
  } else if (this._events[type] === listener) {
    delete this._events[type];
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  // does not use listeners(), so no side effect of creating _events[type]
  if (type && this._events && this._events[type]) this._events[type] = null;
  return this;
};

EventEmitter.prototype.listeners = function(type) {
  if (!this._events) this._events = {};
  if (!this._events[type]) this._events[type] = [];
  if (!isArray(this._events[type])) {
    this._events[type] = [this._events[type]];
  }
  return this._events[type];
};
});

require.define("/node_modules/scrubber/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/scrubber/index.js",function(require,module,exports,__dirname,__filename,process){var Scrubber, Traverse, daisy, global, slowDaisy,
  __slice = [].slice;

Traverse = require('traverse');

global = typeof window !== "undefined" && window !== null ? window : this;

/**
* @helper daisy
* @description - serial async helper
*/


daisy = function(args) {
  return process.nextTick(args.next = function() {
    var fn;
    if (fn = args.shift()) {
      return !!fn(args);
    }
  });
};

slowDaisy = function(args) {
  return console.log("it's a slow daisy", args);
};

module.exports = Scrubber = (function() {
  var seemsTooComplex,
    _this = this;

  Scrubber.use = function() {
    var middleware;
    middleware = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.stack == null) {
      return this.stack = middleware;
    } else {
      return this.stack = this.stack.concat(middleware);
    }
  };

  /**
  * @constructor Scrubber
  * @description - initializes the Scrubber instance.
  */


  function Scrubber() {
    var middleware;
    middleware = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if ('function' === typeof middleware[0]) {
      this.stack = middleware;
    } else {
      this.stack = middleware[0];
    }
  }

  /**
  * @method Scrubber#scrub
  * @description - traverses an arbitrary JS object and applies the middleware
  *  stack, serially, to each node encountered during the walk.
  */


  Scrubber.prototype.scrub = function(obj, callback) {
    var nodes, queue, scrubber, steps;
    scrubber = this;
    queue = [];
    steps = this.stack.map(function(fn) {
      switch (fn.length) {
        case 0:
        case 1:
          return function(cursor, next) {
            fn.call(this, cursor);
            return next();
          };
        case 2:
          return fn;
        default:
          throw new TypeError('Scrubber requires a callback with 1- or 2-arity. ' + ("User provided a " + fn.length + "-arity callback"));
      }
    });
    nodes = [];
    this.out = new Traverse(obj).map(function() {
      var cursor;
      cursor = this;
      steps.forEach(function(step) {
        return queue.push(function() {
          return step.call(scrubber, cursor, function() {
            return queue.next();
          });
        });
      });
    });
    queue.push(function() {
      return callback.call(scrubber);
    });
    return daisy(queue);
  };

  seemsTooComplex = (function() {
    var f, i, maxStackSize;
    maxStackSize = (function() {
      try {
        i = 0;
        return (f = function() {
          i++;
          return f();
        })();
      } catch (e) {
        return i;
      }
    })();
    return function(length, weight) {
      var guess;
      guess = length * weight;
      return guess > maxStackSize;
    };
  })();

  /**
  * @method Scrubber#forEach
  * @method Scrubber#indexOfå
  * @method Scrubber#join
  * @method Scrubber#pop
  * @method Scrubber#reverse
  * @method Scrubber#shift
  * @method Scrubber#sort
  * @method Scrubber#splice
  * @method Scrubber#unshift
  * @method Scrubber#push
  * @description - proxies for the native Array methods; they apply themselves
  *   to the middleware stack
  */


  ['forEach', 'indexOf', 'join', 'pop', 'reverse', 'shift', 'sort', 'splice', 'unshift', 'push'].forEach(function(method) {
    return Scrubber.prototype[method] = function() {
      var rest;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.stack[method].apply(this.stack, rest);
    };
  });

  /**
  * @method Scrubber#use
  * @description alias for push.
  */


  Scrubber.prototype.use = Scrubber.prototype.push;

  return Scrubber;

}).call(this);
});

require.define("stream",function(require,module,exports,__dirname,__filename,process){var events = require('events');
var util = require('util');

function Stream() {
  events.EventEmitter.call(this);
}
util.inherits(Stream, events.EventEmitter);
module.exports = Stream;
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once, and
  // only when all sources have ended.
  if (!dest._isStdio && (!options || options.end !== false)) {
    dest._pipeCount = dest._pipeCount || 0;
    dest._pipeCount++;

    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest._pipeCount--;

    // remove the listeners
    cleanup();

    if (dest._pipeCount > 0) {
      // waiting for other incoming streams to end.
      return;
    }

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest._pipeCount--;

    // remove the listeners
    cleanup();

    if (dest._pipeCount > 0) {
      // waiting for other incoming streams to end.
      return;
    }

    dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (this.listeners('error').length === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('end', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('end', cleanup);
  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};
});

require.define("util",function(require,module,exports,__dirname,__filename,process){var events = require('events');

exports.print = function () {};
exports.puts = function () {};
exports.debug = function() {};

exports.inspect = function(obj, showHidden, depth, colors) {
  var seen = [];

  var stylize = function(str, styleType) {
    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    var styles =
        { 'bold' : [1, 22],
          'italic' : [3, 23],
          'underline' : [4, 24],
          'inverse' : [7, 27],
          'white' : [37, 39],
          'grey' : [90, 39],
          'black' : [30, 39],
          'blue' : [34, 39],
          'cyan' : [36, 39],
          'green' : [32, 39],
          'magenta' : [35, 39],
          'red' : [31, 39],
          'yellow' : [33, 39] };

    var style =
        { 'special': 'cyan',
          'number': 'blue',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red' }[styleType];

    if (style) {
      return '\033[' + styles[style][0] + 'm' + str +
             '\033[' + styles[style][1] + 'm';
    } else {
      return str;
    }
  };
  if (! colors) {
    stylize = function(str, styleType) { return str; };
  }

  function format(value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' &&
        // Filter out the util module, it's inspect function is special
        value !== exports &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      return value.inspect(recurseTimes);
    }

    // Primitive types cannot have properties
    switch (typeof value) {
      case 'undefined':
        return stylize('undefined', 'undefined');

      case 'string':
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return stylize(simple, 'string');

      case 'number':
        return stylize('' + value, 'number');

      case 'boolean':
        return stylize('' + value, 'boolean');
    }
    // For some reason typeof null is "object", so special case here.
    if (value === null) {
      return stylize('null', 'null');
    }

    // Look up the keys of the object.
    var visible_keys = Object_keys(value);
    var keys = showHidden ? Object_getOwnPropertyNames(value) : visible_keys;

    // Functions without properties can be shortcutted.
    if (typeof value === 'function' && keys.length === 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        var name = value.name ? ': ' + value.name : '';
        return stylize('[Function' + name + ']', 'special');
      }
    }

    // Dates without properties can be shortcutted
    if (isDate(value) && keys.length === 0) {
      return stylize(value.toUTCString(), 'date');
    }

    var base, type, braces;
    // Determine the object type
    if (isArray(value)) {
      type = 'Array';
      braces = ['[', ']'];
    } else {
      type = 'Object';
      braces = ['{', '}'];
    }

    // Make functions say that they are functions
    if (typeof value === 'function') {
      var n = value.name ? ': ' + value.name : '';
      base = (isRegExp(value)) ? ' ' + value : ' [Function' + n + ']';
    } else {
      base = '';
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + value.toUTCString();
    }

    if (keys.length === 0) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        return stylize('[Object]', 'special');
      }
    }

    seen.push(value);

    var output = keys.map(function(key) {
      var name, str;
      if (value.__lookupGetter__) {
        if (value.__lookupGetter__(key)) {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Getter/Setter]', 'special');
          } else {
            str = stylize('[Getter]', 'special');
          }
        } else {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Setter]', 'special');
          }
        }
      }
      if (visible_keys.indexOf(key) < 0) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (seen.indexOf(value[key]) < 0) {
          if (recurseTimes === null) {
            str = format(value[key]);
          } else {
            str = format(value[key], recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (isArray(value)) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = stylize('[Circular]', 'special');
        }
      }
      if (typeof name === 'undefined') {
        if (type === 'Array' && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    });

    seen.pop();

    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.length + 1;
    }, 0);

    if (length > 50) {
      output = braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];

    } else {
      output = braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    return output;
  }
  return format(obj, (typeof depth === 'undefined' ? 2 : depth));
};


function isArray(ar) {
  return ar instanceof Array ||
         Array.isArray(ar) ||
         (ar && ar !== Object.prototype && isArray(ar.__proto__));
}


function isRegExp(re) {
  return re instanceof RegExp ||
    (typeof re === 'object' && Object.prototype.toString.call(re) === '[object RegExp]');
}


function isDate(d) {
  if (d instanceof Date) return true;
  if (typeof d !== 'object') return false;
  var properties = Date.prototype && Object_getOwnPropertyNames(Date.prototype);
  var proto = d.__proto__ && Object_getOwnPropertyNames(d.__proto__);
  return JSON.stringify(proto) === JSON.stringify(properties);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

exports.log = function (msg) {};

exports.pump = null;

var Object_keys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) res.push(key);
    return res;
};

var Object_getOwnPropertyNames = Object.getOwnPropertyNames || function (obj) {
    var res = [];
    for (var key in obj) {
        if (Object.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
};

var Object_create = Object.create || function (prototype, properties) {
    // from es5-shim
    var object;
    if (prototype === null) {
        object = { '__proto__' : null };
    }
    else {
        if (typeof prototype !== 'object') {
            throw new TypeError(
                'typeof prototype[' + (typeof prototype) + '] != \'object\''
            );
        }
        var Type = function () {};
        Type.prototype = prototype;
        object = new Type();
        object.__proto__ = prototype;
    }
    if (typeof properties !== 'undefined' && Object.defineProperties) {
        Object.defineProperties(object, properties);
    }
    return object;
};

exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = Object_create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};
});

require.define("/node_modules/jsonify/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/jsonify/index.js",function(require,module,exports,__dirname,__filename,process){exports.parse = require('./lib/parse');
exports.stringify = require('./lib/stringify');
});

require.define("/node_modules/jsonify/lib/parse.js",function(require,module,exports,__dirname,__filename,process){var at, // The index of the current character
    ch, // The current character
    escapee = {
        '"':  '"',
        '\\': '\\',
        '/':  '/',
        b:    '\b',
        f:    '\f',
        n:    '\n',
        r:    '\r',
        t:    '\t'
    },
    text,

    error = function (m) {
        // Call error when something is wrong.
        throw {
            name:    'SyntaxError',
            message: m,
            at:      at,
            text:    text
        };
    },
    
    next = function (c) {
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
        }
        
        // Get the next character. When there are no more characters,
        // return the empty string.
        
        ch = text.charAt(at);
        at += 1;
        return ch;
    },
    
    number = function () {
        // Parse a number value.
        var number,
            string = '';
        
        if (ch === '-') {
            string = '-';
            next('-');
        }
        while (ch >= '0' && ch <= '9') {
            string += ch;
            next();
        }
        if (ch === '.') {
            string += '.';
            while (next() && ch >= '0' && ch <= '9') {
                string += ch;
            }
        }
        if (ch === 'e' || ch === 'E') {
            string += ch;
            next();
            if (ch === '-' || ch === '+') {
                string += ch;
                next();
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
        }
        number = +string;
        if (!isFinite(number)) {
            error("Bad number");
        } else {
            return number;
        }
    },
    
    string = function () {
        // Parse a string value.
        var hex,
            i,
            string = '',
            uffff;
        
        // When parsing for string values, we must look for " and \ characters.
        if (ch === '"') {
            while (next()) {
                if (ch === '"') {
                    next();
                    return string;
                } else if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else {
                    string += ch;
                }
            }
        }
        error("Bad string");
    },

    white = function () {

// Skip whitespace.

        while (ch && ch <= ' ') {
            next();
        }
    },

    word = function () {

// true, false, or null.

        switch (ch) {
        case 't':
            next('t');
            next('r');
            next('u');
            next('e');
            return true;
        case 'f':
            next('f');
            next('a');
            next('l');
            next('s');
            next('e');
            return false;
        case 'n':
            next('n');
            next('u');
            next('l');
            next('l');
            return null;
        }
        error("Unexpected '" + ch + "'");
    },

    value,  // Place holder for the value function.

    array = function () {

// Parse an array value.

        var array = [];

        if (ch === '[') {
            next('[');
            white();
            if (ch === ']') {
                next(']');
                return array;   // empty array
            }
            while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error("Bad array");
    },

    object = function () {

// Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            if (ch === '}') {
                next('}');
                return object;   // empty object
            }
            while (ch) {
                key = string();
                white();
                next(':');
                if (Object.hasOwnProperty.call(object, key)) {
                    error('Duplicate key "' + key + '"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error("Bad object");
    };

value = function () {

// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.

    white();
    switch (ch) {
    case '{':
        return object();
    case '[':
        return array();
    case '"':
        return string();
    case '-':
        return number();
    default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
};

// Return the json_parse function. It will have access to all of the above
// functions and variables.

module.exports = function (source, reviver) {
    var result;
    
    text = source;
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
        error("Syntax error");
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function' ? (function walk(holder, key) {
        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
            for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);
                    if (v !== undefined) {
                        value[k] = v;
                    } else {
                        delete value[k];
                    }
                }
            }
        }
        return reviver.call(holder, key, value);
    }({'': result}, '')) : result;
};
});

require.define("/node_modules/jsonify/lib/stringify.js",function(require,module,exports,__dirname,__filename,process){var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {    // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"' : '\\"',
        '\\': '\\\\'
    },
    rep;

function quote(string) {
    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.
    
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
        var c = meta[a];
        return typeof c === 'string' ? c :
            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
}

function str(key, holder) {
    // Produce a string from holder[key].
    var i,          // The loop counter.
        k,          // The member key.
        v,          // The member value.
        length,
        mind = gap,
        partial,
        value = holder[key];
    
    // If the value has a toJSON method, call it to obtain a replacement value.
    if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
        value = value.toJSON(key);
    }
    
    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.
    if (typeof rep === 'function') {
        value = rep.call(holder, key, value);
    }
    
    // What happens next depends on the value's type.
    switch (typeof value) {
        case 'string':
            return quote(value);
        
        case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';
        
        case 'boolean':
        case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);
            
        case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];
            
            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }
                
                // Join all of the elements together, separated with commas, and
                // wrap them in brackets.
                v = partial.length === 0 ? '[]' : gap ?
                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            
            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            else {
                // Otherwise, iterate through all of the keys in the object.
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            
        // Join all of the member texts together, separated with commas,
        // and wrap them in braces.

        v = partial.length === 0 ? '{}' : gap ?
            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
            '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
}

module.exports = function (value, replacer, space) {
    var i;
    gap = '';
    indent = '';
    
    // If the space parameter is a number, make an indent string containing that
    // many spaces.
    if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
            indent += ' ';
        }
    }
    // If the space parameter is a string, it will be used as the indent string.
    else if (typeof space === 'string') {
        indent = space;
    }

    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.
    rep = replacer;
    if (replacer && typeof replacer !== 'function'
    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
    }
    
    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.
    return str('', {'': value});
};
});

require.define("/node_modules_koding/bongo-client/src/scrubber.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  var BongoScrubber, Scrubber,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Scrubber = require('koding-dnode-protocol').Scrubber;

  module.exports = BongoScrubber = (function(_super) {
    var compensateForLatency, createFailHandler, error, noop;

    __extends(BongoScrubber, _super);

    noop = function() {};

    error = function(message) {
      throw new Error(message);
    };

    createFailHandler = function(fn) {
      return function() {
        var err, rest;
        rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        err = rest[0];
        if (err != null) {
          return fn.apply(null, rest);
        }
      };
    };

    compensateForLatency = function(cursor) {
      var hasFailMethod, hasFinalizeMethod, node;
      node = cursor.node;
      if (node && 'object' === typeof node && 'compensate' in node) {
        node.compensate();
        hasFailMethod = 'fail' in node;
        hasFinalizeMethod = 'finalize' in node;
        if (hasFinalizeMethod && hasFailMethod) {
          error('Provide a handler only for finalize, or fail, not both');
        }
        if (hasFailMethod) {
          return cursor.update(createFailHandler(node.fail));
        } else if (hasFinalizeMethod) {
          return cursor.update(node.finalize);
        } else {
          return cursor.update(noop);
        }
      }
    };

    function BongoScrubber() {
      BongoScrubber.__super__.constructor.apply(this, arguments);
      this.unshift(compensateForLatency);
    }

    return BongoScrubber;

  })(Scrubber);

}).call(this);
});

require.define("/node_modules_koding/bongo-client/src/model.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  'use strict';

  var EventEmitter, Model,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('microemitter').EventEmitter;

  module.exports = Model = (function(_super) {
    var JsPath, MongoOp, Traverse, createId, extend;

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    MongoOp = require('mongoop');

    JsPath = require('jspath');

    createId = Model.createId = require('hat');

    Traverse = require('traverse');

    extend = require('./util').extend;

    Model.isOpaque = function() {
      return false;
    };

    Model.streamModels = function(selector, options, callback) {
      var ids;
      if (!('each' in this)) {
        throw new Error("streamModels depends on Model#each, but cursor was not found!\n(Hint: it may not be whitelisted)");
      }
      ids = [];
      return this.each(selector, options, function(err, model) {
        if (err) {
          return callback(err);
        } else if (model != null) {
          ids.push(typeof model.getId === "function" ? model.getId() : void 0);
          return callback(err, [model]);
        } else {
          return callback(null, null, ids);
        }
      });
    };

    Model.prototype.mixin = Model.mixin = function(source) {
      var key, val, _results;
      _results = [];
      for (key in source) {
        val = source[key];
        if (key !== 'constructor') {
          _results.push(this[key] = val);
        }
      }
      return _results;
    };

    Model.prototype.watch = function(field, watcher) {
      var _base;
      (_base = this.watchers)[field] || (_base[field] = []);
      return this.watchers[field].push(watcher);
    };

    Model.prototype.unwatch = function(field, watcher) {
      var index;
      if (!watcher) {
        return delete this.watchers[field];
      } else {
        index = this.watchers.indexOf(watcher);
        if (~index) {
          return this.watchers.splice(index, 1);
        }
      }
    };

    Model.prototype.init = function(data) {
      var model,
        _this = this;
      model = this;
      model.watchers = {};
      model.bongo_ || (model.bongo_ = {});
      if (data != null) {
        model.set(data);
      }
      if (!('instanceId' in model.bongo_)) {
        model.bongo_.instanceId = createId();
      }
      this.emit('init');
      return this.on('updateInstance', function(data) {
        if ((typeof Encoder !== "undefined" && Encoder !== null ? Encoder.XSSEncode : void 0) != null) {
          data = new Traverse(data).map(function(node) {
            if ('string' === typeof node) {
              return Encoder.XSSEncode(node);
            }
            return node;
          });
        }
        return _this.update_(data);
      });
    };

    Model.prototype.set = function(data) {
      var model;
      if (data == null) {
        data = {};
      }
      model = this;
      delete data.data;
      extend(model, data);
      return model;
    };

    Model.prototype.getFlagValue = function(flagName) {
      var _ref;
      return (_ref = this.flags_) != null ? _ref[flagName] : void 0;
    };

    Model.prototype.watchFlagValue = function(flagName, callback) {
      return this.watch("flags_." + flagName, callback);
    };

    Model.prototype.unwatchFlagValue = function(flagName) {
      return this.unwatch("flags_." + flagName);
    };

    Model.prototype.decoded = typeof Encoder !== "undefined" && Encoder !== null ? function(path) {
      return Encoder.htmlDecode(this.getAt(path));
    } : Model.prototype.getAt;

    Model.prototype.getAt = function(path) {
      return JsPath.getAt(this, path);
    };

    Model.prototype.setAt = function(path, value) {
      return JsPath.setAt(this, path, value);
    };

    Model.prototype.getId = function() {
      return this._id;
    };

    Model.prototype.getSubscribable = function() {
      var subscribable;
      subscribable = this.bongo_.subscribable;
      if (subscribable != null) {
        return subscribable;
      }
      return true;
    };

    Model.prototype.equals = function(model) {
      if (this.getId && (model != null ? model.getId : void 0)) {
        return this.getId() === model.getId();
      } else {
        return this === model;
      }
    };

    Model.prototype.valueOf = function() {
      var _ref;
      return (_ref = typeof this.getValue === "function" ? this.getValue() : void 0) != null ? _ref : this;
    };

    Model.prototype.save = function(callback) {
      var model;
      model = this;
      return model.save_(function(err, docs) {
        if (err) {
          return callback(err);
        } else {
          extend(model, docs[0]);
          bongo.addReferences(model);
          return callback(null, docs);
        }
      });
    };

    Model.prototype.update_ = function(data) {
      var fields,
        _this = this;
      fields = new MongoOp(data).applyTo(this);
      Object.keys(fields).forEach(function(field) {
        var _ref;
        return (_ref = _this.watchers[field]) != null ? _ref.forEach(function(watcher) {
          return watcher.call(_this, fields[field]);
        }) : void 0;
      });
      return this.emit('update', Object.keys(fields.result));
    };

    Model.prototype.addListener = Model.prototype.on;

    Model.prototype.removeListener = Model.prototype.off;

    return Model;

  })(EventEmitter);

}).call(this);
});

require.define("/node_modules/mongoop/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/mongoop/index.js",function(require,module,exports,__dirname,__filename,process){(function() {
  var MongoOp,
    __slice = [].slice;

  MongoOp = (function() {
    var deleteAt, getAt, isEqual, keys, popAt, pushAt, setAt, _ref;

    _ref = require('jspath'), setAt = _ref.setAt, getAt = _ref.getAt, deleteAt = _ref.deleteAt, pushAt = _ref.pushAt, popAt = _ref.popAt;

    keys = Object.keys;

    isEqual = require('deep-equal');

    function MongoOp(operation) {
      if (!(this instanceof MongoOp)) {
        return new MongoOp(operation);
      }
      this.operation = operation;
    }

    MongoOp.prototype.applyTo = function(target) {
      this.result = {};
      keys(this.operation).forEach((function(_this) {
        return function(operator) {
          if ('function' !== typeof _this[operator]) {
            throw new Error("Unrecognized operator: " + operator);
          } else {
            return _this[operator](target, _this.operation[operator]);
          }
        };
      })(this));
      return this;
    };

    MongoOp.prototype.map = function(fn) {
      var op;
      op = this.operation;
      this.operation = {};
      keys(op).forEach((function(_this) {
        return function(operator) {
          return _this.operation[operator] = fn(operator, op[operator]);
        };
      })(this));
      return this;
    };

    MongoOp.prototype.forEachField = function(fields, fn) {
      return keys(fields).map((function(_this) {
        return function(path) {
          var val;
          val = fields[path];
          return _this.result[path] = fn(path, val);
        };
      })(this));
    };

    MongoOp.prototype.$addToSet = (function() {
      var $addToSet;
      $addToSet = function(collection, val) {
        var item, matchFound, _i, _len;
        matchFound = false;
        for (_i = 0, _len = collection.length; _i < _len; _i++) {
          item = collection[_i];
          if (!(isEqual(item, val))) {
            continue;
          }
          matchFound = true;
          break;
        }
        if (!matchFound) {
          return collection.push(val);
        }
      };
      return function(target, fields) {
        return this.forEachField(fields, (function(_this) {
          return function(path, val) {
            var child, collection, _i, _len, _ref1, _results;
            collection = getAt(target, path);
            if (collection == null) {
              collection = [];
              setAt(target, path, collection);
            }
            if (val.$each != null) {
              _ref1 = val.$each;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                child = _ref1[_i];
                _results.push($addToSet(collection, child));
              }
              return _results;
            } else {
              return $addToSet(collection, val);
            }
          };
        })(this));
      };
    })();

    MongoOp.prototype.$push = function(target, fields) {
      return this.forEachField(fields, function(path, val) {
        return pushAt(target, path, val);
      });
    };

    MongoOp.prototype.$pushAll = function(target, fields) {
      return this.forEachField(fields, function(path, vals) {
        return pushAt.apply(null, [target, path].concat(__slice.call(vals)));
      });
    };

    MongoOp.prototype.$pull = function() {
      throw new Error("This version of MongoOp does not implement $pull...\nLook for that in a future version.  You can use $pullAll instead.");
    };

    MongoOp.prototype.$pullAll = function(target, fields) {
      return this.forEachField(fields, function(path, val) {
        var collection, i, index, _results;
        collection = getAt(target, path);
        index = 0;
        _results = [];
        while (collection && index < collection.length) {
          i = index++;
          if (isEqual(collection[i], val)) {
            _results.push(collection.splice(i, 1));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    };

    MongoOp.prototype.$pop = function(target, fields) {
      return this.forEachField(fields, function(path) {
        return popAt(target, path);
      });
    };

    MongoOp.prototype.$set = function(target, fields) {
      return this.forEachField(fields, function(path, val) {
        setAt(target, path, val);
        return val;
      });
    };

    MongoOp.prototype.$unset = function(target, fields) {
      return this.forEachField(fields, function(path) {
        return deleteAt(target, path);
      });
    };

    MongoOp.prototype.$rename = function(target, fields) {
      return this.forEachField(fields, function(oldPath, newPath) {
        var val;
        val = getAt(target, oldPath);
        deleteAt(target, oldPath);
        return setAt(target, newPath, val);
      });
    };

    MongoOp.prototype.$inc = (function() {
      var $inc;
      $inc = function(val, amt) {
        return val += amt;
      };
      return function(target, fields) {
        return this.forEachField(fields, function(path, val) {
          return setAt(target, path, $inc(getAt(target, path), val));
        });
      };
    })();

    return MongoOp;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = MongoOp;
  } else if (typeof window !== "undefined" && window !== null) {
    window['MongoOp'] = MongoOp;
  }

}).call(this);
});

require.define("/node_modules/deep-equal/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/deep-equal/index.js",function(require,module,exports,__dirname,__filename,process){var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function objEquiv(a, b, opts) {
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return true;
}
});

require.define("/node_modules/deep-equal/lib/keys.js",function(require,module,exports,__dirname,__filename,process){exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
});

require.define("/node_modules/deep-equal/lib/is_arguments.js",function(require,module,exports,__dirname,__filename,process){var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};
});

require.define("/node_modules_koding/bongo-client/src/util.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  'use strict';

  var __slice = [].slice;

  module.exports = {
    extend: function() {
      var key, obj, rest, source, val, _i, _len;
      obj = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = rest.length; _i < _len; _i++) {
        source = rest[_i];
        for (key in source) {
          val = source[key];
          obj[key] = val;
        }
      }
      return obj;
    },
    asynchronizeOwnMethods: function(ofObject) {
      var result;
      result = {};
      Object.keys(ofObject).forEach(function(key) {
        var fn;
        if ('function' === typeof (fn = ofObject[key])) {
          return result[key] = function() {
            var callback, rest, _i;
            rest = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
            return callback(fn.apply(null, rest));
          };
        }
      });
      return result;
    }
  };

}).call(this);
});

require.define("/node_modules_koding/bongo-client/src/listenertree.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  'use strict';

  var ListenerTree,
    __slice = [].slice;

  module.exports = ListenerTree = (function() {
    var assureAt, getAt, pushAt, _ref;

    _ref = require('jspath'), assureAt = _ref.assureAt, pushAt = _ref.pushAt, getAt = _ref.getAt;

    function ListenerTree() {
      this.tree = Object.create(null);
    }

    ListenerTree.prototype.on = function(routingKey, listener) {
      assureAt(this.tree, routingKey, []);
      pushAt(this.tree, routingKey, listener);
      return this;
    };

    ListenerTree.prototype.off = function(routingKey, listener) {
      console.log('ListenerTree#off is still unimplemented.');
      return this;
    };

    ListenerTree.prototype.emit = function() {
      var listener, listeners, params, rest, routingKey, _i, _len;
      routingKey = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      listeners = getAt(this.tree, routingKey);
      params = rest.map(function(param) {
        try {
          return JSON.parse(param);
        } catch (e) {
          return param;
        }
      });
      if (listeners != null ? listeners.length : void 0) {
        for (_i = 0, _len = listeners.length; _i < _len; _i++) {
          listener = listeners[_i];
          listener.apply(null, params);
        }
      }
      return this;
    };

    return ListenerTree;

  })();

}).call(this);
});

require.define("/node_modules_koding/bongo-client/src/eventbus.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  'use strict';

  var EventBus;

  module.exports = EventBus = (function() {
    var ListenerTree, getGenericInstanceRoutingKey, getGenericStaticRoutingKey, getInstanceRoutingKey, getStaticRoutingKey;

    ListenerTree = require('./listenertree');

    function EventBus(mq) {
      this.mq = mq;
      this.tree = new ListenerTree;
      this.channels = {};
      this.counts = {};
    }

    EventBus.prototype.bound = require('koding-bound');

    EventBus.prototype.dispatch = function(routingKey, payload) {
      return this.tree.emit(routingKey, payload);
    };

    EventBus.prototype.addListener = function(getGenericRoutingKey, getRoutingKey, name, event, listener) {
      var channel, genericRoutingKey;
      if (this.channels[name] == null) {
        this.counts[name] = 0;
        genericRoutingKey = getGenericRoutingKey(name);
        channel = this.channels[name] = this.mq.subscribe(genericRoutingKey, {
          isReadOnly: true,
          mustAuthenticate: false
        });
      } else {
        channel = this.channels[name];
      }
      if (!channel.isListeningTo(event)) {
        channel.on(event, this.dispatch.bind(this, getRoutingKey(name, event)));
      }
      this.counts[name]++;
      return this.tree.on(getRoutingKey(name, event), listener);
    };

    EventBus.prototype.removeListener = function(getRoutingKey, name, event, listener) {
      var channel;
      if (0 === --this.counts[name]) {
        channel = this.channels[name];
        channel.close();
        delete this.channels[name];
      }
      return this.tree.off(getRoutingKey(name, event), listener);
    };

    getStaticRoutingKey = function(constructorName, event) {
      return "constructor." + constructorName + ".event." + event;
    };

    getGenericStaticRoutingKey = function(constructorName) {
      return "constructor." + constructorName + ".event";
    };

    EventBus.prototype.staticOn = function(konstructor, event, listener) {
      return this.addListener(getGenericStaticRoutingKey, getStaticRoutingKey, konstructor.name, event, listener);
    };

    EventBus.prototype.staticOff = function(konstructor, event, listener) {
      return this.removeListener(getStaticRoutingKey, konstructor.name, event, listener);
    };

    getInstanceRoutingKey = function(oid, event) {
      return "oid." + oid + ".event." + event;
    };

    getGenericInstanceRoutingKey = function(oid) {
      return "oid." + oid + ".event";
    };

    EventBus.prototype.on = function(inst, event, listener) {
      if (inst.getSubscribable()) {
        return this.addListener(getGenericInstanceRoutingKey, getInstanceRoutingKey, inst.getId(), event, listener);
      }
    };

    EventBus.prototype.off = function(inst, event, listener) {
      return this.removeListener(getInstanceRoutingKey, inst.getId(), event, listener);
    };

    return EventBus;

  })();

}).call(this);
});

require.define("/node_modules/koding-bound/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"index.js"}});

require.define("/node_modules/koding-bound/index.js",function(require,module,exports,__dirname,__filename,process){module.exports = require('./lib/koding-bound');});

require.define("/node_modules/koding-bound/lib/koding-bound/index.js",function(require,module,exports,__dirname,__filename,process){module.exports = function(method) {
  var boundMethod;
  if (this[method] == null) {
    throw new Error("@bound: unknown method! " + method);
  }
  boundMethod = "__bound__" + method;
  boundMethod in this || Object.defineProperty(this, boundMethod, {
    value: this[method].bind(this)
  });
  return this[boundMethod];
};
});

require.define("/node_modules_koding/bongo-client/src/opaquetype.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  var OpaqueType,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = OpaqueType = (function() {

    function OpaqueType(type) {
      var konstructor;
      konstructor = Function("return function " + type + "() {}")();
      __extends(konstructor, OpaqueType);
      return konstructor;
    }

    OpaqueType.isOpaque = function() {
      return true;
    };

    return OpaqueType;

  })();

}).call(this);
});

require.define("/node_modules_koding/bongo-client/src/signature.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  var Rest, Signature,
    __slice = [].slice;

  Rest = require('./rest');

  module.exports = Signature = (function() {
    var arrayRe, interpretType, restRe;

    arrayRe = /^\[(.)\]$/;

    restRe = /^R\((.)\)$/;

    function Signature(signatureStr) {
      var i, rest, type, _i, _len, _ref;
      if (!(this instanceof Signature)) {
        return new Signature(signatureStr);
      }
      this.paramTypes = (signatureStr.split(',')).map(interpretType);
      _ref = this.paramTypes;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        type = _ref[i];
        if (!type.isRest) {
          continue;
        }
        if (rest) {
          throw new Error("Multiple rest parameters are not allowed.");
        }
        this.restParamType = type;
        this.restParamIndex = i;
        this.paramTypesBefore = this.paramTypes.slice(0, i);
        this.paramTypesAfter = this.paramTypes.slice(i + 1, this.paramTypes.length + 1 || 9e9);
        rest = true;
      }
    }

    Signature.prototype.hasCallback = function() {
      return this.paramTypes[this.paramTypes.length - 1] === Function;
    };

    Signature.prototype.spread = function() {
      var rest;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.test(rest);
    };

    Signature.prototype.test = function(params) {
      if (!this.testLength(params)) {
        return false;
      }
      if (this.restParamType != null) {
        return this.testWithRest(params);
      } else {
        return this.testEach(params);
      }
    };

    Signature.prototype.testEach = function(params, types) {
      var i, param, _i, _len, _ref;
      if (types == null) {
        types = this.paramTypes;
      }
      for (i = _i = 0, _len = params.length; _i < _len; i = ++_i) {
        param = params[i];
        if (!this.testType(param, (_ref = types[i]) != null ? _ref : types.tag)) {
          return false;
        }
      }
      return true;
    };

    Signature.prototype.testWithRest = function(params) {
      var after, i, paramsAfter, paramsBefore, restParam;
      i = this.restParamIndex;
      after = params.length - this.paramTypesAfter.length;
      paramsBefore = params.slice(0, i);
      restParam = params.slice(i, after);
      paramsAfter = params.slice(after, params.length);
      if (!this.testEach(paramsBefore, this.paramTypesBefore)) {
        return false;
      }
      if (!this.testEach(restParam, this.restParamType)) {
        return false;
      }
      if (!this.testEach(paramsAfter, this.paramTypesAfter)) {
        return false;
      }
      return true;
    };

    Signature.prototype.testLength = function(params) {
      if (this.restParamType != null) {
        return this.paramTypesBefore.length + this.paramTypesAfter.length <= params.length;
      } else {
        return this.paramTypes.length === params.length;
      }
    };

    Signature.prototype.testType = function(param, type) {
      var p, _i, _len;
      switch (false) {
        case !(param === null || param === void 0):
          return true;
        case type !== Boolean:
          return 'boolean' === typeof param;
        case type !== Number:
          return 'number' === typeof param;
        case type !== String:
          return 'string' === typeof param;
        case type !== Function:
          return 'function' === typeof param;
        case type !== Object:
          return (Object(param)) === param;
        case !Array.isArray(type):
          if (!Array.isArray(param)) {
            return false;
          }
          for (_i = 0, _len = param.length; _i < _len; _i++) {
            p = param[_i];
            if (!this.testType(p, type[0])) {
              return false;
            }
          }
          return true;
        default:
          return false;
      }
    };

    interpretType = function(typeStr) {
      var arrType, m, restType, _;
      switch (false) {
        case typeStr !== 'O':
          return Object;
        case typeStr !== 'F':
          return Function;
        case typeStr !== 'B':
          return Boolean;
        case typeStr !== 'N':
          return Number;
        case typeStr !== 'S':
          return String;
        case !(m = typeStr.match(arrayRe)):
          _ = m[0], arrType = m[1];
          return [interpretType(arrType)];
        case !(m = typeStr.match(restRe)):
          _ = m[0], restType = m[1];
          return new Rest(interpretType(restType));
        default:
          throw new Error("Couldn't interpret type: type");
      }
    };

    return Signature;

  })();

}).call(this);
});

require.define("/node_modules_koding/bongo-client/src/rest.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  var Rest;

  module.exports = Rest = (function() {

    function Rest(paramType) {
      this.paramType = paramType;
    }

    Rest.prototype.isRest = true;

    return Rest;

  })();

}).call(this);
});

require.define("/node_modules_koding/bongo-client/src/promibackify.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  var __slice = [].slice;

  module.exports = function(fn) {
    var hasMandatoryCallback;
    hasMandatoryCallback = fn.signatures[0].hasCallback();
    return function() {
      var args, callback,
        _this = this;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if ('function' === typeof args[args.length - 1]) {
        callback = args.pop();
      }
      return new Promise(function(resolve, reject) {
        if (hasMandatoryCallback) {
          return fn.call.apply(fn, [_this].concat(__slice.call(args), [function() {
            var err, rest, result;
            err = arguments[0], result = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
            switch (false) {
              case err == null:
                return reject(err);
              case !rest.length:
                warn(new Error("Trailing callback parameters detected!"));
                return resolve(result);
              default:
                return resolve(result);
            }
          }]));
        } else {
          fn.apply(_this, args);
          return resolve();
        }
      }).nodeify(callback);
    };
  };

}).call(this);
});

require.define("/node_modules_koding/bongo-client/src/eventemitter/broker.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  'use strict';

  module.exports = (function() {
    var defineProperty, getPusherEvent;
    getPusherEvent = function(event) {
      if (Array.isArray(event)) {
        return event = event.join(':');
      } else {
        return event;
      }
    };
    defineProperty = Object.defineProperty;
    return {
      destroy: function() {
        if (this.channel == null) {
          return;
        }
        return this.mq.unsubscribe(this.channel);
      },
      removeListener: function(event, listener) {
        this.emit('listenerRemoved', event, listener);
        return this.constructor.__super__.prototype.removeListener.call(this, event, listener);
      }
    };
  })();

}).call(this);
});

require.define("/node_modules/sinkrow/package.json",function(require,module,exports,__dirname,__filename,process){module.exports = {"main":"lib/sinkrow/index.js"}});

require.define("/node_modules/sinkrow/lib/sinkrow/index.js",function(require,module,exports,__dirname,__filename,process){this.sequence = require('./sequence');

this.race = require('./race');

this.daisy = function(args) {
  process.nextTick(args.next = function() {
    var fn;
    if (fn = args.shift()) {
      return !!fn(args) || true;
    } else {
      return false;
    }
  });
  return args.next;
};

this.dash = function(args, cb) {
  var arg, count, length, _i, _len, _ref;
  if ('function' === typeof args) {
    _ref = [args, cb], cb = _ref[0], args = _ref[1];
  }
  length = args.length;
  if (length === 0) {
    process.nextTick(cb);
  } else {
    count = 0;
    args.fin = function() {
      if (++count === length) {
        return !!cb() || true;
      } else {
        return false;
      }
    };
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      process.nextTick(arg);
    }
  }
  return args.fin;
};
});

require.define("/node_modules/sinkrow/lib/sinkrow/sequence.js",function(require,module,exports,__dirname,__filename,process){var Sequence, slice;

Sequence = (function() {
  function Sequence(fn, cb) {
    this.fn = fn;
    this.cb = cb;
    this.times = 0;
    this.args = [];
  }

  Sequence.prototype.next = function(args) {
    var nextArgs, nextFn;
    if (!(nextArgs = this.args.shift())) {
      nextFn = this.cb;
    } else {
      nextFn = this.next.bind(this, nextArgs);
    }
    if (this.times--) {
      return this.fn.apply(this, args.concat(nextFn));
    }
  };

  Sequence.prototype.add = function(args) {
    if (!this.times++) {
      return process.nextTick(this.next.bind(this, args));
    } else {
      return this.args.push(args);
    }
  };

  return Sequence;

})();

slice = [].slice;

module.exports = function(fn, cb) {
  var sequence;
  sequence = new Sequence(fn, cb);
  return function() {
    return sequence.add(slice.call(arguments));
  };
};
});

require.define("/node_modules/sinkrow/lib/sinkrow/race.js",function(require,module,exports,__dirname,__filename,process){var Race,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

Race = (function() {
  function Race(fn, cb) {
    this.fn = fn;
    this.cb = cb;
    this.fin = __bind(this.fin, this);
    this.times = 0;
    this.finTimes = 0;
  }

  Race.prototype.fin = function() {
    if (this.times === ++this.finTimes) {
      return typeof this.cb === "function" ? this.cb.apply(this, arguments) : void 0;
    }
  };

  Race.prototype.add = function(args) {
    var i;
    i = this.times++;
    return this.fn.apply(this, [i].concat(args.concat(this.fin)));
  };

  return Race;

})();

module.exports = function(fn, cb) {
  var race;
  race = new Race(fn, cb);
  return function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return race.add(args);
  };
};
});

require.define("/node_modules_koding/bongo-client/src/cacheable.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  'use strict';

  var ModelLoader, dash, getModelLoader, handleBatch, handleByName, handleSingle;

  ModelLoader = require('./modelloader');

  dash = require('sinkrow').dash;

  module.exports = function() {
    switch (arguments.length) {
      case 2:
        return handleBatch.apply(this, arguments);
      case 3:
        return handleSingle.apply(this, arguments);
      default:
        throw new Error('Bongo#cacheable expects either 2 or 3 arguments.');
    }
  };

  getModelLoader = (function() {
    var loading_;
    loading_ = {};
    return function(constructor, id) {
      var loader, _base, _name;
      loading_[_name = constructor.name] || (loading_[_name] = {});
      return loader = (_base = loading_[constructor.name])[id] || (_base[id] = new ModelLoader(constructor, id));
    };
  })();

  handleByName = function(strName, callback) {
    if ('function' === typeof this.fetchName) {
      return this.fetchName(strName, callback);
    } else {
      return callback(new Error('Client must provide an implementation of fetchName!'));
    }
  };

  handleSingle = function(constructorName, _id, callback) {
    var constructor, model;
    constructor = 'string' === typeof constructorName ? this.api[constructorName] : 'function' === typeof constructorName ? constructorName : void 0;
    if (!constructor) {
      callback(new Error("Unknown type " + constructorName));
    } else {
      constructor.cache || (constructor.cache = {});
      if (model = constructor.cache[_id]) {
        callback(null, model);
      } else {
        getModelLoader(constructor, _id).load(function(err, model) {
          constructor.cache[_id] = model;
          return callback(err, model);
        });
      }
    }
  };

  handleBatch = function(batch, callback) {
    var models, queue,
      _this = this;
    if ('string' === typeof batch) {
      return handleByName.call(this, batch, callback);
    }
    models = [];
    queue = batch.map(function(single, i) {
      return function() {
        var constructorName, id, name, type;
        name = single.name, type = single.type, constructorName = single.constructorName, id = single.id;
        return handleSingle.call(_this, type || name || constructorName, id, function(err, model) {
          if (err) {
            return callback(err);
          } else {
            models[i] = model;
            return queue.fin();
          }
        });
      };
    });
    dash(queue, function() {
      return callback(null, models);
    });
  };

}).call(this);
});

require.define("/node_modules_koding/bongo-client/src/modelloader.coffee",function(require,module,exports,__dirname,__filename,process){(function() {
  'use strict';

  var EventEmitter, ModelLoader,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('microemitter').EventEmitter;

  module.exports = ModelLoader = (function(_super) {
    var load_;

    __extends(ModelLoader, _super);

    function ModelLoader(konstructor, _id) {
      this._id = _id;
      this.konstructor = konstructor;
    }

    load_ = function() {
      var _this = this;
      return this.konstructor.one({
        _id: this._id
      }, function(err, model) {
        return _this.emit('load', err, model);
      });
    };

    ModelLoader.prototype.load = function(listener) {
      this.once('load', listener);
      if (!this.isLoading) {
        this.isLoading = true;
        return load_.call(this);
      }
    };

    return ModelLoader;

  })(EventEmitter);

}).call(this);
});

require.define("/node_modules_koding/bongo-client/bongo.js",function(require,module,exports,__dirname,__filename,process){'use strict';

/*
Bongo.js
Unfancy models for MongoDB

(c) 2011 Koding, Inc.

@module: bongo-client
@author: Christopher Thorn <chris@koding.com>
 */

/*
@snippet.
@description: feature-detect the browser.
@todo: is there an improvement?
@foo
 */
var Bongo, EventEmitter, isBrowser,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

isBrowser = 'undefined' != typeof window;


/*
@class: bongo (client)
@description: client-side bongo.
 */

EventEmitter = require('microemitter').EventEmitter;

Bongo = (function(_super) {
  var BATCH_CHUNK_MS, CONNECTED, CONNECTING, DISCONNECTED, EventBus, JsPath, Model, NOTCONNECTED, OpaqueType, Scrubber, Signature, Store, Traverse, addGlobalListener, createBongoName, createId, dash, extend, getEventChannelName, getRevivingListener, guardMethod, race, sequence, slice, _ref, _ref1, _ref2, _ref3;

  __extends(Bongo, _super);

  _ref = [0, 1, 2, 3], NOTCONNECTED = _ref[0], CONNECTING = _ref[1], CONNECTED = _ref[2], DISCONNECTED = _ref[3];

  BATCH_CHUNK_MS = 300;

  Traverse = require('traverse');

  createId = Bongo.createId = require('hat');

  JsPath = Bongo.JsPath = require('jspath');

  Bongo.dnodeProtocol = require('koding-dnode-protocol');

  Bongo.dnodeProtocol.Scrubber = require('./src/scrubber');

  _ref1 = Bongo.dnodeProtocol, Store = _ref1.Store, Scrubber = _ref1.Scrubber;

  Bongo.EventEmitter = EventEmitter;

  Model = Bongo.Model = require('./src/model');

  Bongo.ListenerTree = require('./src/listenertree');

  EventBus = Bongo.EventBus = require('./src/eventbus');

  OpaqueType = require('./src/opaquetype');

  Signature = require('./src/signature');

  Bongo.promibackify = require('./src/promibackify');

  Model.prototype.mixin(require('./src/eventemitter/broker'));

  Model.prototype.off = Model.prototype.removeListener;

  Model.prototype.addGlobalListener = Model.prototype.on;

  slice = [].slice;

  extend = require('./src/util').extend;

  _ref2 = require('sinkrow'), race = _ref2.race, sequence = _ref2.sequence, dash = _ref2.dash;

  _ref3 = require('sinkrow'), Bongo.daisy = _ref3.daisy, Bongo.dash = _ref3.dash, Bongo.sequence = _ref3.sequence, Bongo.race = _ref3.race;

  Bongo.bound = require('koding-bound');

  Bongo.prototype.bound = require('koding-bound');

  createBongoName = function(resourceName) {
    return "" + (createId(128)) + ".unknown.bongo-" + resourceName;
  };

  function Bongo(options) {
    EventEmitter(this);
    this.mq = options.mq, this.getSessionToken = options.getSessionToken, this.getUserArea = options.getUserArea, this.fetchName = options.fetchName, this.resourceName = options.resourceName, this.apiEndpoint = options.apiEndpoint, this.useWebsockets = options.useWebsockets, this.batchRequests = options.batchRequests, this.apiDescriptor = options.apiDescriptor;
    if (this.useWebsockets == null) {
      this.useWebsockets = false;
    }
    if (this.batchRequests == null) {
      this.batchRequests = true;
    }
    if (this.getUserArea == null) {
      this.getUserArea = function() {};
    }
    this.localStore = new Store;
    this.remoteStore = new Store;
    this.readyState = NOTCONNECTED;
    this.stack = [];
    this.opaqueTypes = {};
    this.on('newListener', (function(_this) {
      return function(event, listener) {
        if (event === 'ready' && _this.readyState === CONNECTED) {
          return process.nextTick(function() {
            _this.emit('ready');
            return _this.off('ready');
          });
        }
      };
    })(this));
    if (this.batchRequests) {
      this.setOutboundTimer();
    }
    if (!this.useWebsockets) {
      process.nextTick(this.bound('xhrHandshake'));
    }
    process.nextTick((function(_this) {
      return function() {
        return _this.api = _this.createRemoteApiShims(_this.apiDescriptor);
      };
    })(this));
    if (this.mq != null) {
      this.eventBus = new EventBus(this.mq);
      this.mq.on('disconnected', (function(_this) {
        return function() {
          _this.disconnectedAt = Date.now();
          _this.emit('disconnected');
          return _this.readyState = DISCONNECTED;
        };
      })(this));
    }
  }

  Bongo.prototype.isConnected = function() {
    return this.readyState === CONNECTED;
  };

  Bongo.prototype.cacheable = require('./src/cacheable');

  Bongo.prototype.createRemoteApiShims = function(api) {
    var instance, name, options, shimmedApi, statik, _ref4;
    shimmedApi = {};
    for (name in api) {
      if (!__hasProp.call(api, name)) continue;
      _ref4 = api[name], statik = _ref4.statik, instance = _ref4.instance, options = _ref4.options;
      shimmedApi[name] = this.createConstructor(name, statik, instance, options);
    }
    return shimmedApi;
  };

  guardMethod = function(signatures, fn) {
    return function() {
      var rest, signature, _i, _len;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = signatures.length; _i < _len; _i++) {
        signature = signatures[_i];
        if (signature.test(rest)) {
          return fn.apply(this, rest);
        }
      }
      throw new Error("Unrecognized signature!");
    };
  };

  Bongo.prototype.wrapStaticMethods = (function() {
    var optimizeThese;
    optimizeThese = ['on', 'off'];
    return function(constructor, constructorName, methods) {
      var bongo;
      bongo = this;
      return (Object.keys(methods)).forEach(function(method) {
        var signatures, wrapper;
        signatures = methods[method].map(Signature);
        if (__indexOf.call(optimizeThese, method) >= 0) {
          method += '_';
        }
        wrapper = guardMethod(signatures, function() {
          var rest, rpc;
          rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          rpc = {
            type: 'static',
            constructorName: constructorName,
            method: method
          };
          return bongo.send(rpc, rest);
        });
        wrapper.signatures = signatures;
        return constructor[method] = Bongo.promibackify(wrapper);
      });
    };
  })();

  Bongo.prototype.wrapInstanceMethods = (function() {
    var optimizeThese;
    optimizeThese = ['on', 'addListener', 'off', 'removeListener', 'save'];
    return function(constructor, constructorName, methods) {
      var bongo;
      bongo = this;
      return (Object.keys(methods)).forEach(function(method) {
        var signatures, wrapper;
        signatures = methods[method].map(Signature);
        if (__indexOf.call(optimizeThese, method) >= 0) {
          method += '_';
        }
        wrapper = guardMethod(signatures, function() {
          var data, id, rest, rpc;
          rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          id = this.getId();
          if (id == null) {
            data = this.data;
          }
          rpc = {
            type: 'instance',
            constructorName: constructorName,
            method: method,
            id: id,
            data: data
          };
          return bongo.send(rpc, rest);
        });
        wrapper.signatures = signatures;
        return constructor.prototype[method] = Bongo.promibackify(wrapper);
      });
    };
  })();

  Bongo.prototype.registerInstance = function(inst) {
    inst.on('listenerRemoved', (function(_this) {
      return function(event, listener) {
        return _this.eventBus.off(inst, event, listener.bind(inst));
      };
    })(this));
    return inst.on('newListener', (function(_this) {
      return function(event, listener) {
        return _this.eventBus.on(inst, event, listener.bind(inst));
      };
    })(this));
  };

  getEventChannelName = function(name) {
    return "event-" + name;
  };

  getRevivingListener = function(bongo, ctx, listener) {
    return function() {
      var rest;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return listener.apply(ctx, bongo.revive(rest));
    };
  };

  addGlobalListener = function(konstructor, event, listener) {
    return this.eventBus.staticOn(konstructor, event, (function(_this) {
      return function() {
        var rest, revived;
        rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        revived = _this.revive(rest);
        return listener.apply(konstructor, revived);
      };
    })(this));
  };

  Bongo.prototype.reviveType = function(type, shouldWrap) {
    var revived, _base, _ref4, _ref5;
    if (Array.isArray(type)) {
      return this.reviveType(type[0], true);
    }
    if ('string' !== typeof type) {
      return type;
    }
    revived = (_ref4 = (_ref5 = this.api[type]) != null ? _ref5 : window[type]) != null ? _ref4 : (_base = this.opaqueTypes)[type] != null ? _base[type] : _base[type] = new OpaqueType(type);
    if (shouldWrap) {
      return [revived];
    } else {
      return revived;
    }
  };

  Bongo.prototype.reviveSchema = (function() {
    var isArray, keys, reviveSchema, reviveSchemaRecursively;
    keys = Object.keys;
    isArray = Array.isArray;
    reviveSchemaRecursively = function(bongo, schema) {
      return (keys(schema)).map(function(slot) {
        var type;
        type = schema[slot];
        if ((type && 'object' == typeof type) && !isArray(type)) {
          type = reviveSchemaRecursively(bongo, type);
        }
        return [slot, type];
      }).reduce(function(acc, _arg) {
        var slot, type;
        slot = _arg[0], type = _arg[1];
        acc[slot] = bongo.reviveType(type);
        return acc;
      }, {});
    };
    return reviveSchema = function(schema) {
      return reviveSchemaRecursively(this, schema);
    };
  })();

  Bongo.prototype.reviveOption = function(option, value) {
    switch (option) {
      case 'schema':
        return this.reviveSchema(value);
      default:
        return value;
    }
  };

  Bongo.prototype.createConstructor = function(name, staticMethods, instanceMethods, options) {
    var konstructor;
    konstructor = Function('bongo', "return function " + name + " () {\n  bongo.registerInstance(this);\n  this.init.apply(this, [].slice.call(arguments));\n  this.bongo_.constructorName = '" + name + "';\n}")(this);
    EventEmitter(konstructor);
    this.wrapStaticMethods(konstructor, name, staticMethods);
    __extends(konstructor, Model);
    konstructor.prototype.updateInstanceChannel = this.updateInstanceChannel;
    konstructor.on('newListener', addGlobalListener.bind(this, konstructor));
    process.nextTick((function(_this) {
      return function() {
        var option, _results;
        _results = [];
        for (option in options) {
          if (!__hasProp.call(options, option)) continue;
          _results.push(konstructor[option] = _this.reviveOption(option, options[option]));
        }
        return _results;
      };
    })(this));
    this.wrapInstanceMethods(konstructor, name, instanceMethods);
    return konstructor;
  };

  Bongo.prototype.getInstancesById = function() {};

  Bongo.prototype.getInstanceMethods = function() {
    return ['changeLoggedInState', 'updateSessionToken'];
  };

  Bongo.prototype.revive = function(obj) {
    var bongo, hasEncoder;
    bongo = this;
    hasEncoder = (typeof Encoder !== "undefined" && Encoder !== null ? Encoder.XSSEncode : void 0) != null;
    return new Traverse(obj).map(function(node) {
      var constructorName, instance, instanceId, konstructor, _ref4;
      if ((node != null ? node.bongo_ : void 0) != null) {
        _ref4 = node.bongo_, constructorName = _ref4.constructorName, instanceId = _ref4.instanceId;
        instance = bongo.getInstancesById(instanceId);
        if (instance != null) {
          return this.update(instance, true);
        }
        konstructor = bongo.api[node.bongo_.constructorName];
        if (konstructor == null) {
          return this.update(node);
        } else {
          return this.update(new konstructor(node));
        }
      } else if (hasEncoder && 'string' === typeof node) {
        return this.update(Encoder.XSSEncode(node));
      } else {
        return this.update(node);
      }
    });
  };

  Bongo.prototype.reviveFromSnapshots = (function() {
    var snapshotReviver;
    snapshotReviver = function(k, v) {
      if (k === '_events') {
        return;
      }
      return v;
    };
    return function(instances, callback) {
      var results;
      results = instances.map((function(_this) {
        return function(instance) {
          var e, revivee;
          revivee = null;
          try {
            if (instance.snapshot != null) {
              revivee = JSON.parse(instance.snapshot, snapshotReviver);
            }
          } catch (_error) {
            e = _error;
            console.warn("couldn't revive snapshot! " + instance._id);
            revivee = null;
          }
          if (!revivee) {
            return null;
          }
          return _this.revive(revivee);
        };
      })(this));
      results = results.filter(Boolean);
      return callback(null, results);
    };
  })();

  Bongo.prototype.handleRequest = function(message) {
    var callback, context, method, revived, scrubber, unscrubbed;
    if ((message != null ? message.method : void 0) === 'defineApi' && (this.api == null)) {
      return this.defineApi(message["arguments"][0]);
    } else if ((message != null ? message.method : void 0) === 'handshakeDone') {
      return this.handshakeDone();
    } else {
      method = message.method, context = message.context;
      scrubber = new Scrubber(this.localStore);
      unscrubbed = scrubber.unscrub(message, (function(_this) {
        return function(callbackId) {
          if (!_this.remoteStore.has(callbackId)) {
            _this.remoteStore.add(callbackId, function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _this.send(callbackId, args);
            });
          }
          return _this.remoteStore.get(callbackId);
        };
      })(this));
      revived = this.revive(unscrubbed);
      if (__indexOf.call(this.getInstanceMethods(), method) >= 0) {
        return this[method].apply(this, revived);
      } else if (!isNaN(+method)) {
        callback = this.localStore.get(method);
        return callback != null ? callback.apply(null, revived) : void 0;
      } else if (method !== 'auth.authOk') {
        return console.warn('Unhandleable message; dropping it on the floor.');
      }
    }
  };

  Bongo.prototype.reconnectHelper = function() {
    if (this.api != null) {
      this.readyState = CONNECTED;
      return this.emit('ready');
    }
  };

  Bongo.prototype.connectHelper = function(callback) {
    if (callback != null) {
      this.mq.once('connected', callback.bind(this));
    }
    this.channelName = createBongoName(this.resourceName);
    this.channel = this.mq.subscribe(this.channelName, {
      connectDirectly: true
    });
    this.channel.exchange = this.resourceName;
    this.channel.setAuthenticationInfo({
      serviceType: 'bongo',
      name: this.resourceName,
      clientId: this.getSessionToken()
    });
    this.channel.off('message', this.bound('handleRequest'));
    this.channel.on('message', this.bound('handleRequest'));
    this.reconnectHelper();
    this.channel.once('broker.subscribed', (function(_this) {
      return function() {
        return _this.stack.forEach(function(fn) {
          return fn.call(_this);
        });
      };
    })(this));
    return this.channel.on('broker.subscribed', (function(_this) {
      return function() {
        _this.emit('connected');
        if (_this.disconnectedAt) {
          _this.emit('reconnected', {
            disconnectedFor: Date.now() - _this.disconnectedAt
          });
          _this.disconnectedAt = null;
        }
        if (_this.lastMessage) {
          _this.channel.publish(_this.lastMessage);
          return _this.lastMessage = null;
        }
      };
    })(this));
  };

  Bongo.prototype.connect = function(callback) {
    if (this.mq == null) {
      throw new Error("no broker client");
    }
    switch (this.readyState) {
      case CONNECTED:
      case CONNECTING:
        return "already connected";
      case DISCONNECTED:
        this.readyState = CONNECTING;
        this.mq.connect();
        if (callback != null) {
          this.mq.on('connected', function() {
            return callback(null);
          });
        }
        break;
      default:
        this.readyState = CONNECTING;
        this.connectHelper(callback);
    }
    if (this.mq.autoReconnect) {
      return this.mq.once('disconnected', (function(_this) {
        return function() {
          return _this.mq.once('connected', function() {
            return _this.reconnectHelper();
          });
        };
      })(this));
    }
  };

  Bongo.prototype.disconnect = function(shouldReconnect, callback) {
    if (this.mq == null) {
      throw new Error("no broker client");
    }
    if ('function' === typeof shouldReconnect) {
      callback = shouldReconnect;
      shouldReconnect = false;
    }
    if (this.readyState === NOTCONNECTED || this.readyState === DISCONNECTED) {
      return "already disconnected";
    }
    if (callback != null) {
      this.mq.once('disconnected', callback.bind(this));
    }
    this.mq.disconnect(shouldReconnect);
    return this.readyState = DISCONNECTED;
  };

  Bongo.prototype.messageFailed = function(message) {
    return console.log('MESSAGE FAILED', message);
  };

  Bongo.prototype.getTimeout = function(message, clientTimeout) {
    if (clientTimeout == null) {
      clientTimeout = 5000;
    }
    return setTimeout(this.messageFailed.bind(this, message), clientTimeout);
  };

  Bongo.prototype.ping = function(callback) {
    if (this.readyState === CONNECTED && this.useWebsockets) {
      return this.send('ping', callback);
    }
  };

  Bongo.prototype.send = function(method, args) {
    var scrubber;
    if (!Array.isArray(args)) {
      args = [args];
    }
    if ((this.mq != null) && !this.channel) {
      throw new Error('No channel!');
    }
    scrubber = new Scrubber(this.localStore);
    return scrubber.scrub(args, (function(_this) {
      return function() {
        var message;
        message = scrubber.toDnodeProtocol();
        message.method = method;
        message.sessionToken = _this.getSessionToken();
        message.userArea = _this.getUserArea();
        return _this.sendHelper(message);
      };
    })(this));
  };

  Bongo.prototype.sendHelper = function(message) {
    var messageString;
    if (this.useWebsockets) {
      messageString = JSON.stringify(message);
      if (this.channel.isOpen) {
        return this.channel.publish(messageString);
      } else {
        this.lastMessage = messageString;
        return this.connect();
      }
    } else if (this.apiEndpoint) {
      if (this.batchRequests) {
        return this.enqueueMessage(message);
      } else {
        return this.sendXhr(this.apiEndpoint, 'POST', [message]);
      }
    }
  };

  Bongo.prototype.setOutboundTimer = function() {
    this.outboundQueue = [];
    return this.outboundTimer = setInterval((function(_this) {
      return function() {
        if (_this.outboundQueue.length) {
          _this.sendXhr(_this.apiEndpoint, 'POST', _this.outboundQueue);
        }
        return _this.outboundQueue.length = 0;
      };
    })(this), BATCH_CHUNK_MS);
  };

  Bongo.prototype.enqueueMessage = function(message) {
    return this.outboundQueue.push(message);
  };

  Bongo.prototype.sendXhr = function(url, method, queue) {
    var messageString, xhr;
    xhr = new XMLHttpRequest;
    xhr.open(method, url);
    xhr.setRequestHeader("Content-type", "application/json;charset=UTF-8");
    xhr.onreadystatechange = (function(_this) {
      return function() {
        var request, requests, _i, _len, _ref4, _results;
        if (xhr.status === 0) {
          return;
        }
        if (xhr.status >= 400) {
          _this.emit('error', new Error("XHR Error: " + xhr.status));
        }
        if (xhr.readyState !== 4) {
          return;
        }
        if ((_ref4 = xhr.status) !== 200 && _ref4 !== 304) {
          return;
        }
        requests = JSON.parse(xhr.response);
        _results = [];
        for (_i = 0, _len = requests.length; _i < _len; _i++) {
          request = requests[_i];
          if (request) {
            _results.push(_this.handleRequest(request));
          }
        }
        return _results;
      };
    })(this);
    messageString = JSON.stringify({
      channelName: this.channelName,
      queue: queue
    });
    return xhr.send(messageString);
  };

  Bongo.prototype.authenticateUser = function() {
    var clientId;
    clientId = this.getSessionToken();
    return this.send('authenticateUser', [clientId, this.bound('changeLoggedInState')]);
  };

  Bongo.prototype.handshakeDone = function() {
    if (this.readyState === CONNECTED) {
      return;
    }
    this.readyState = CONNECTED;
    this.emit('ready');
    return this.authenticateUser();
  };

  Bongo.prototype.defineApi = function(api) {
    if (api != null) {
      this.api || (this.api = this.createRemoteApiShims(api));
    }
    return this.handshakeDone();
  };

  Bongo.prototype.changeLoggedInState = function(state) {
    return this.emit('loggedInStateChanged', state);
  };

  Bongo.prototype.updateSessionToken = function(token) {
    return this.emit('sessionTokenChanged', token);
  };

  Bongo.prototype.fetchChannel = function(channelName, callback) {
    var channel;
    if (this.mq == null) {
      throw new Error("no broker client");
    }
    channel = this.mq.subscribe(channelName);
    return channel.once('broker.subscribed', function() {
      return callback(channel);
    });
  };

  Bongo.prototype.use = function(fn) {
    return this.stack.push(fn);
  };

  Bongo.prototype.monitorPresence = function(callbacks) {
    return this.send('monitorPresence', callbacks);
  };

  Bongo.prototype.subscribe = function(name, options, callback) {
    var channel;
    if (options == null) {
      options = {};
    }
    if (this.mq == null) {
      throw new Error("no broker client");
    }
    if (options.serviceType == null) {
      options.serviceType = 'application';
    }
    channel = this.mq.subscribe(name, options);
    options.name = name;
    options.clientId = this.getSessionToken();
    channel.setAuthenticationInfo(options);
    if (callback != null) {
      channel.once('broker.subscribed', function() {
        return callback(channel);
      });
    }
    return channel;
  };

  Bongo.prototype.xhrHandshake = function() {
    return this.send('xhrHandshake', (function(_this) {
      return function(api) {
        if (_this.api) {
          return _this.handshakeDone();
        } else {
          return _this.defineApi(api);
        }
      };
    })(this));
  };

  return Bongo;

})(EventEmitter);

if (!isBrowser && module) {
  module.exports = Bongo;
} else if (typeof window !== "undefined" && window !== null) {
  window['Bongo'] = Bongo;
}
});
require("/node_modules_koding/bongo-client/bongo.js");
})();

}();
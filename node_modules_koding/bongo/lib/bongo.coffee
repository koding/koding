###
Bongo.js
Unfancy models for MongoDB

(c) 2011 Koding, Inc.

@class: bongo
@description: the main klass of the library.
@author: Christopher Thorn <chris@koding.com>
###

{EventEmitter} = require 'events'

module.exports = class Bongo extends EventEmitter
  [READY, NOTREADY] = [0,1]

  Promise = require 'bluebird'

  # core
  url = require 'url'
  fs = Promise.promisifyAll require 'fs'
  nodePath = require 'path'

  require 'colors'

  @mongo          = require 'mongodb'
  {extend}        = require 'underscore'
  @JsPath = JsPath = require 'jspath'
  @Inflector      = require 'inflector'

  # lib
  # the base klass of the library:
  @Base = Base    = require './base'
  # the model klass of the library:
  @Model = Model  = require './model'
  ModelRegistry   = require './modelregistry'
  @ModelCursor    = require './modelcursor'
  # the rest of the basics:
  @Subcollection  = require './subcollection'
  @ObjectId       = require './objectid'
  @ObjectRef      = require './objectref'
  @Validator      = require './validator'
  @Register       = require './register'
  @util           = require './util'

  BongoKiteServer = require './kite-server'

  {daisy, @daisy, @dash, @sequence, @race} = require 'sinkrow'

  {@future} = require 'sinkrow-future'

  {Scrubber, Store} = require 'koding-dnode-protocol'

  Traverse = require 'traverse'

  EXCHANGE_OPTIONS =
    autoDelete  : yes
    durable     : no
    type        :'topic'

  @signature = require './signature'

  @secure =(fn)->
    fn.isSecurityEnabled = yes
    fn

  {@asynchronizeOwnMethods} = require './util'

  {BongoError}    = require './errortypes'

  Client = require './client'

  @throwIt = (it) ->
    console.error it  if it?
    process.exit 1

  constructor:(options)->
    {@mq, @mongo, @resourceName, @root, @fetchClient, @verbose, models, @kite} = options
    @setClient @mongo  if @mongo
    @localStore = new Store
    @remoteStore = new Store
    @clients = {}
    @models = {}
    @stack = []
    @services = {}
    #@initBlacklist options.blacklist

    @loadConstructors models

    @registerKite()  if @kite?

    @on 'error', Bongo.throwIt
    @mq?.ready => @mq.connection?.on 'error', (err) ->
      if err.code < 500
        console.error err
        return
      console.error 'AMQP error!'
      console.error err
      process.exit 1
    @setMaxListeners 0
    @emit 'newInstance', this
    @pendingUpdateInstancesMessages = {}
    @updateInstancesMessageThrottleMs = 100


  bound: require 'koding-bound'

  defineModel:(name, model)->
    @models[name] = model
    return  unless model.addBongo? this
    @emit 'newModel', name, model
    model.on 'needsPopulated', (def, path)=>
      path = if Array.isArray path then path else path.split '.'
      names = JsPath.getAt def, path
      unless Array.isArray names
        names = [names]
        JsPath.setAt def, path, names
      names.forEach (name, i)=>
        if target = @models[name]
          JsPath.setAt def, path.concat(i), target
      @on 'newModel', (newName, newModel)->
        if newName in names
          JsPath.setAt def, path.concat(names.indexOf newName), newModel

  findCode = (paths) ->
    Promise.map paths, (path) ->
      fs.statAsync(path).then (stats) ->
        # in the case that this is a directory, recurse into it
        if stats.isDirectory()
          fs.readdirAsync(path).map (dir) ->
            nodePath.join path, dir
          .then findCode
        # otherwise, just collect the path
        else [path]
    # flatten the result
    .reduce((a, b) -> a.concat b)
    .filter (path) -> /(\.coffee|\.js)$/.test path

  registerModel: (cons) ->
    if cons.name? and ('function' is typeof cons)
      @defineModel cons.name, cons
    else
      @defineModel name, konstructor  for own name, konstructor of cons

  loadConstructors: (consPaths) ->
    consPaths = [consPaths]  unless Array.isArray consPaths

    paths = consPaths.map (path) =>
      nodePath.join @root, path

    findCode(paths).map (codePath) =>
      Promise.try =>
        @registerModel require codePath
      .catch (err) ->
        throw new Error "Error loading a class: #{ codePath } #{ err.message }"
    .then =>
      @emit 'apiReady'

  getInstanceRoutingKey =(inst, event)->
    "oid.#{inst.getId()}.event.#{event}"

  getStaticRoutingKey =(konstructor, event)->
    "constructor.#{konstructor.name}.event.#{event}"

  handleEvent:(type, ctx, event, params)->
    switch type
      when 'instance'
        if event is 'notification'
          @publishEventToExchange event, params[0]
        if event is 'control'
          @publishToControlExchange event, params[0]
        else
          payload     = JSON.stringify params[0] or null
          routingKey  = getInstanceRoutingKey ctx, event
          @enqueueUpdateInstancesEvent routingKey, payload
      when 'static'
        if event is 'broadcast'
          [secretChannelId, message] = params
          @fetchBrokerExchange (brokerExchange)->
            messageStr = JSON.stringify message
            brokerExchange.publish secretChannelId, messageStr  if messageStr?
        else
          broadcastable = ctx.getBroadcastable()
          if !broadcastable? or broadcastable # TODO: this is insecure by default :(
            [data] = params
            data = JSON.stringify data
            @enqueueUpdateInstancesEvent getStaticRoutingKey(ctx, event), data

  enqueueUpdateInstancesEvent: (routingKey, message) ->

    unless @pendingUpdateInstancesMessages[routingKey]
      @pendingUpdateInstancesMessages[routingKey] = []

    len = @pendingUpdateInstancesMessages[routingKey].push message
    @triggerUpdateInstancesEvent routingKey  if len is 1

    return this

  triggerUpdateInstancesEvent:(routingKey) ->
    setTimeout =>
      { pendingUpdateInstancesMessages } = this
      messages = pendingUpdateInstancesMessages[routingKey]
      @pendingUpdateInstancesMessages[routingKey] = []
      if messages.length > 0
        @mq?.emit 'updateInstances', routingKey, JSON.stringify(messages), autoDelete: no
    , @updateInstancesMessageThrottleMs

    return this

  publishToControlExchange:(exchangeEvent, data)->
    options =
      autoDelete  : yes
      durable     : no
      type        :'fanout'
    @publishEventToExchange exchangeEvent, data, options

  publishEventToExchange: (exchangeEvent, data, options)->
    options or= EXCHANGE_OPTIONS
    # generally data has {routingKey, event, contents}
    {routingKey} = data
    delete data.routingKey
    @mq?.connection.exchange exchangeEvent, options, (exchange)->
      exchange.publish routingKey, data
      exchange.close() # Don't leak a channel!

  parseRoutingKey: do ->
    getEdgeMeaning = (i)->
      switch i
        when 0 then 'origin'
        when 1 then 'secretChannelId'
        when 2 then 'username'
        when 3 then 'service'
        when 4 then 'event'
        else        "additionalProperty#{i-4}"

    parseRoutingKey = (routingKey)->
      routingKey.split('.').reduce (acc, edge, i)->
        acc[getEdgeMeaning i] = edge
        acc
      , {}

  respondToClient:(routingKey, message)->
    message =\
      if Buffer.isBuffer(message) or 'string' is typeof message
        message
      else
        JSON.stringify message
    @fetchBrokerExchange (brokerExchange)->
      brokerExchange.publish routingKey, message

  getBrokerExchangeOptions:->
    type        : 'topic'
    autoDelete  : no
    durable     : no

  fetchBrokerExchange:(callback)->
    if @brokerExchange is null
      @once 'brokerExchangeReady', => @fetchBrokerExchange callback
    else unless @brokerExchange?
      @brokerExchange = null
      @mq?.connection.exchange 'broker', @getBrokerExchangeOptions(),
        (@brokerExchange)=>
          @emit 'brokerExchangeReady'
          callback brokerExchange
    else callback @brokerExchange

  authenticateUser:(clientId, callback)->
    @fetchClient clientId, (client)=>
      @emit 'authenticateUser', client, callback

  createPresenceMemberKey:->
    serviceGenericName  = @resourceName
    serviceUniqueName   = @resourceName #@getRabbitMqResourceName()
    "serviceType.bongo.serviceGenericName.#{serviceGenericName}.serviceUniqueName.#{serviceUniqueName}"

  connect:(callback=->)->
    @once 'connected', =>
      if @dbClientReady then callback()
      else @once 'dbClientReady', callback
    @mq.ready =>
      exchangeOptions = {type:'fanout', autoDelete: yes}
      @mq.connection.exchange @resourceName, exchangeOptions, (@exchange)=>
        @mq.connection.queue  @resourceName, (@queue)=>
          @emit 'connected'
          queue.bind exchange, ''
          queue.on 'queueBindOk', =>
            queue.subscribe( (message, headers, deliveryInfo)=>
              {routingKey} = deliveryInfo
              if routingKey is 'auth.join'
                @respondToClient message.routingKey,
                  method    : 'handshakeDone'
                  arguments : []
                  callbacks : {}
              else if routingKey is 'auth.leave' then # ignore
              else
                @handleRequest routingKey,
                  if message.data? then "#{message.data}"
                  else message
            ).addCallback (ok)=> @consumerTag = ok.consumerTag

  disconnect:(callback)->
    {queue} = this
    return callback new BongoError 'You are not connected!'  unless queue?
    queue.unsubscribe(@consumerTag).addCallback -> queue.close()
    delete @consumerTag
    delete @readyState = 0
    delete @queue
    callback? null

  revive:(data)->
    {models} = this
    new Traverse(data).forEach (node)->
      if data?.bongo_?
        konstructor = models[data.bongo_.constructorName]
        model =\
          try new konstructor data
          catch e then data
        @update model, yes
      else
        @update node

  handleRequest:(secretName, message, callback)->
    @emit 'message', { secretName, message }
    unless @dbClientReady
      @once 'dbClientReady', => @handleRequest secretName, message
      return
    console.log message.green  if @verbose
    message =
      try JSON.parse message
      catch e then message
    {method, sessionToken, userArea} = message
    scrubber = new Scrubber @localStore
    unscrubbed = scrubber.unscrub message, (callbackId)=>
      storeKey = "#{secretName}#{callbackId}"
      unless @remoteStore.has storeKey
        fn =
          if callback?
          then (args...) -> callback secretName, callbackId, args
          else (args...) => @handleResponse secretName, callbackId, args
        fn.autoCull = yes
        @remoteStore.add storeKey, fn
      @remoteStore.get storeKey
    @invokeMethod method, unscrubbed, userArea, sessionToken, secretName

  pong:(callback)-> callback? Date.now()

  invokeMethod:do->
    ###
    @helper apply()
    @private
    @description - apply the method, conditionally currying the "client" object
    ###
    apply = (bongo, ctx, method, args, sessionToken, userArea, client) ->
      unless ctx?
        bongo.handleUserError "bad instance! #{method}"
        return
      if 'function' is typeof method
        fn = method
      else if ctx? and 'string' is typeof method
        # prefer the method with the trailing dollar, since this should be, by
        # convention, the version of the method which implements security for
        # a given model, and provides a wrapper for it; otherwise, search for
        # the method with the exact name.
        fn = ctx["#{method}$"] ? ctx[method]
      unless fn?
        bongo.handleUserError "unknown method! #{method}"
        return
      if fn.isSecurityEnabled
        if client
          args = [client].concat args
          fn.apply ctx, args
        else
          bongo.fetchClient sessionToken, userArea, (client) ->
            args = [client].concat args
            fn.apply ctx, args
      else
        fn.apply ctx, args
    ###
    @implementation
    ###
    (method, args, userArea, sessionToken, secretName, client)->
      unless method?
        @handleUserError 'No such method'
      else if method is 'ping' then @pong args[0]
      else if method is 'monitorPresence' then @monitorPresence args[0]
      else if method is 'authenticateUser' then @authenticateUser args... # TODO: this doesn't need to be specialcase. C.T.
      else if method is 'xhrHandshake' then @xhrHandshake args...
      else if method?.method
        konstructor = Base.constructors[method.constructorName]
        unless konstructor?
          console.warn "No such constructor! #{method.constructorName}"
          return

        validCall = konstructor.testSignature method.type, method.method, args
        unless validCall
          console.warn "unrecognized signature:", method, args
          return

        switch method.type
          when 'static'
            if konstructor.hasSharedMethod method.method
              apply this, konstructor, method.method, args, sessionToken, userArea, client
            else
              @handleUserError "No such method! #{JSON.stringify method} #{args} #{secretName}"
          when 'instance'
            if konstructor::hasSharedMethod method.method
              if method.id
                konstructor.one? _id: method.id, (err, instance)=>
                  if err
                    @handleUserError err
                  else unless instance
                    console.warn "#{konstructor.name} instance with id #{method.id} is not found"
                    return
                  else
                    apply this, instance, method.method, args, sessionToken, userArea, client
              else if method.data
                instance = new konstructor method.data
                apply this, instance, method.method, args, sessionToken, userArea, client
            else
              @handleUserError "No such method! #{JSON.stringify method} #{args} #{secretName}"
          else
            @handleUserError 'Unknown method type!'
      else
        kallback = @localStore.get method
        if kallback?
          apply this, null, kallback, args, sessionToken, userArea, client
        else
          @handleUserError 'Unknown method type!'

  handleUserError:(message)->
    console.warn message
    @emit 'userError', message

  detectErrFirst:(cursor)->
    if cursor.path.length is 1 and
       cursor.path[0] is '0' and
       'string' is typeof cursor.node?.message

      # node_ instead of node since traverse strips out Error
      @emit 'errFirstDetected', cursor.node_

  scrubResponse: (callbackId, args, callback) ->
    scrubber = new Scrubber @localStore, @bound 'detectErrFirst'
    scrubber.scrub args, =>
      message = scrubber.toDnodeProtocol()
      message.method = callbackId
      callback message

  handleResponse: (secretName, callbackId, args) ->
    @scrubResponse callbackId, args, (message) =>
      @fetchBrokerExchange (brokerExchange) =>
        # when internal error send a generic error message to client
        if message?.arguments[0]?.internal?
          message.arguments[0] = {message:"Something went wrong!"}

        brokerExchange.publish secretName, JSON.stringify(message, @replacer)

  getMethodDescription:(konstructor)-> konstructor.getSharedMethods()

  describeApi:(callback)->
    api = {}
    # share the global constructors
    for own name, konstructor of Base.globalSharedConstructors
      api[name] = @getMethodDescription konstructor
    # share the constructors which are specific to this bongo instance
    for own name, konstructor of @models when konstructor.isShared
      api[name] = @getMethodDescription konstructor

    @callMiddleware api, -> callback api

  callMiddleware:(api, callback)->
    if @stack.length
      queue = @stack.map (fn)=>=>
        switch fn.length
          when 2 then fn.call this, api, -> queue.next()   # async style
          when 1 then fn.call this, api; queue.next()      # sync style
          else        callback new Error "Arity error! (got #{fn.length}; expected 1 or 2)"
      daisy queue, callback
    else
      callback api

  dispatchMethod:(contructorName, method, context, args)->
    # implement dispatch method

  getClient:-> Model.getClient()

  setClient:(rest...)->
    Model.setClient rest...
    Model.on 'dbClientReady', =>
      @dbClientReady = yes
      @emit 'dbClientReady'
    .on 'error', ->
      console.error "Model error!"
      console.error err
      process.exit 1

  use:(fn...)-> @stack.push fn...

  expressify: require './expressify'

  xhrHandshake: (callback) -> callback()

  registerKite: ->
    host = require('os').hostname()

    { name, username, environment, region, version, kontrol, kiteKey, port, prefix } = @kite

    SockJsServer = require 'kite.js/lib/kite-server/sockjs/server.js'
    SockJs = require 'node-sockjs-client'

    @kiteServer = new BongoKiteServer {
      name
      username
      environment
      region
      version
      serverClass: SockJsServer
      transportClass: SockJs
      prefix
    }

    .on 'method', ({ payload, callback }) =>
      token = @kiteServer.getToken()
      @kite.fetchClient token.claims.sub, (err, client) =>
        return @emit 'error', err  if err?
        @invokeMethod(
          payload.method
          [payload.arguments..., callback]
          client.context
          "n/a"
          "kite.js"
          client
        )

    .on 'error', (err) ->
      console.error "Kite server error!"
      console.error err
      process.exit 1

    @kiteServer.listen port

    @kiteServer.register
      host    : host
      kiteKey : kiteKey

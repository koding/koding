{ EventEmitter2 } = require 'eventemitter2'

methodNames = [
  'on', 'off', 'addListener', 'removeListener', 'removeAllListeners', 'onAny'
  'offAny', 'many', 'once', 'listeners', 'listenersAny', 'setMaxListeners', 'emit'
  'getEmitter'
]

contexts = []
emitters = []

module.exports = delegate = {}

for methodName in methodNames
  do (methodName) ->
    delegate[methodName] = (args...) ->
      context = this
      for item, index in contexts when item is context
        emitter = emitters[index]
      unless emitter
        emitter = new EventEmitter2
          wildcard      : yes
        emitter.setMaxListeners 0
        emitters.push emitter
        contexts.push context
      if methodName is 'getEmitter'
        emitter
      else
        emitter[methodName] args...

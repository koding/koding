{ dash } = require 'sinkrow'

Model = require './model'
Base = require './base'
ObjectId = require './objectid'

module.exports = class ObjectRef extends Model
  @share(true)

  @setSchema {
    constructorName : String
    id              : ObjectId
  }

  # ducktype ObjectRefs
  @isObjectRef = (item) -> item.id? and item.constructorName?

  @populate = (objectRefs, callback) ->
    objects = []
    queue = objectRefs.map (objectRef) ->
      ->
        ObjectRef(objectRef).populate (err, object) ->
          if err
            queue.fin(err)
          else
            objects.push object
            queue.fin()
    dash queue, -> callback null, objects


  constructor: ->
    return new ObjectRef arguments... unless this instanceof ObjectRef
    switch arguments.length
      when 1
        [seed] = arguments
        if seed instanceof Model
          constructorName = seed.constructor.name
          id              = seed.getId()
        else
          { constructorName, id } = seed
      when 2
        [constructorName, id] = arguments
    super { constructorName, id }

  populate:(callback) ->
    Base.constructors[@constructorName].one { _id: @id }, callback

  Base::toObjectRef = -> ObjectRef(this)

# coffeelint: disable=cyclomatic_complexity

# lib
ObjectId = require './objectid'

convertComplexSelector = (selector, konstructor, type, parents) ->
  casted = {}

  for own key, node of selector

    casted[key] = switch key
      when '$in', '$nin', '$all'
        ((konstructor.castValue i, type) for i in node)
      when '$gt', '$gte', '$lt', '$lte', '$ne'
        konstructor.castValue node, type
      when '$or', '$nor', '$and', '$elemMatch', '$not'
        if node instanceof RegExp then node
        else castAll node, konstructor, parents
      when '$not'
        if type is String then node
        else castAll node, konstructor, parents
      else
        node # leaving it untouched; moving on.

  return casted

castAll = (selector, konstructor, parents = []) ->

  casted = {}
  for own key, node of selector
    path      = parents.concat key
    pathName  = path.join '.'
    nodeType  = konstructor.types?[pathName]
    nodeType ?= ObjectId  if pathName is '_id'

    if nodeType? and node? and 'object' is typeof node
      stop = no

      for op in Object.keys node when /^\$/.test op
        casted[key] = convertComplexSelector node, konstructor, nodeType, path

        stop = yes
        break

      continue  if stop

    casted[key] = switch

      when key is '_id' and
           'string' is typeof node and
           not nodeType? and
           not konstructor.dontAutoCastId

        new ObjectId node

      when nodeType is String and node instanceof RegExp
        node

      when not parents.length and konstructor.castValue? and nodeType?
        konstructor.castValue node, nodeType

      else node

  return casted

module.exports =

  asynchronizeOwnMethods:(ofObject) ->
    result = {}
    Object.keys(ofObject).forEach (key) ->
      if 'function' is typeof fn = ofObject[key]
        result[key] = (rest..., callback) ->
          callback fn rest...
    result

  getUnusedKey: do ->
    getCandidate = (key, tryCount) -> key + tryCount
    (keys, key) ->
      candidate = key
      tryCount = 0
      while candidate in keys
        candidate = getCandidate key, tryCount++
      candidate

  partition: (list, fn) ->
    result = [[], []]
    result[Number not fn item].push item for item in list
    result

  convertComplexSelector: convertComplexSelector
  castAll: castAll

#!/usr/bin/env coffee


{Deploy, Release, AWS, cf, cloudformation} = require "./install/deploy.coffee"

argv        = require('minimist')(process.argv.slice(2))
eden        = require 'node-eden'
log         = console.log
timethat    = require 'timethat'
Connection  = require "ssh2"
fs          = require 'fs'
semver      = require 'semver'
{exec}      = require 'child_process'
request     = require 'request'
ec2         = new AWS.EC2()
elb         = new AWS.ELB()


tests = (IP,domain) ->
   return [
            # {url : "http://#{IP}:3000/"               , target: "webserver"              , expectString: "UA-6520910-8"}
            # {url : "http://#{IP}:3030/xhr"            , target: "socialworker"           , expectString: "Cannot GET"}
            # {url : "http://#{IP}:8008/subscribe"      , target: "broker"                 , expectString: "Cannot GET"}
            # {url : "http://#{IP}:5500/kite"           , target: "kloud"                  , expectString: "Welcome"}
            {url : "http://#{domain}/"                , target: "webserver-nginx"        , expectString: "UA-6520910-8"}
            {url : "http://#{domain}/xhr"             , target: "socialworker-nginx"     , expectString: "Cannot GET"}
            {url : "http://#{domain}/subscribe"       , target: "broker-nginx"           , expectString: "Cannot GET"}
            {url : "http://#{domain}/kloud/kite"      , target: "kloud-nginx"            , expectString: "Welcome"}
            {url : "https://#{domain}/"               , target: "webserver-nginx-ssl"    , expectString: "UA-6520910-8"}
            {url : "https://#{domain}/xhr"            , target: "socialworker-nginx-ssl" , expectString: "Cannot GET"}
            {url : "https://#{domain}/subscribe"      , target: "broker-nginx-ssl"       , expectString: "Cannot GET"}
            {url : "https://#{domain}/kloud/kite"     , target: "kloud-nginx-ssl"        , expectString: "Welcome"}
        ]


if argv.deploy
    d = new Date()
    log "fetching latest version tag. please wait... "

    Deploy.getNextVersion {},(err,version)->


        options =
            boxes           : argv.boxes              or 1
            boxtype         : argv.boxtype            or "t2.medium" #"m3.xlarge"
            versiontype     : argv.versiontype        or "patch"     # available options major, premajor, minor, preminor, patch, prepatch, or prerelease
            config          : argv.config             or "feature"   # prod | staging | sandbox
            version         : argv.version            or version
            githubuser      : argv.githubuser         or "koding"
            gitremote       : argv.gitremote          or "origin"

        options.hostname      = "#{options.config}--#{options.version.replace(/\./g,'-')}"

        cf_service_mode       = 1

        switch options.config
            when "feature"
                domain            = "koding.io"
                subdomain         = eden.eve().toLowerCase()
                options.hostname  = "#{options.config}--#{options.version.replace(/\./g,'-')}-#{subdomain}"
                fulldomain        = "#{subdomain}s.koding.io"

            when "sandbox"
                domain            = "koding.io"
                subdomain         = "sandbox"
                options.hostname  = "sandbox.koding.io"
                fulldomain        = "sandbox.koding.io"
                cf_service_mode   = 0

        KONFIG = require("./config/main.#{options.config}.coffee")
            hostname   : options.hostname
            tag        : options.version
            githubuser : options.githubuser

        #create the new tag
        log "deploying version #{options.version}"
        exec "git tag -a '#{options.version}' -m 'machine-settings-b64-zip-#{KONFIG.machineSettings}' && git push #{options.gitremote} --tags",(err,stdout,stderr)->

            if err
                log stderr
                throw err
                return


            switch options.config
                when "feature","sandbox"
                    # log JSON.stringify res,null,2


                    deployOptions =
                        params :
                            ImageId         : "ami-864d84ee" # Amazon ubuntu 14.04 "ami-1624987f" # Amazon Linux AMI x86_64 EBS
                            InstanceType    : options.boxtype
                            MinCount        : options.boxes
                            MaxCount        : options.boxes
                            SubnetId        : "subnet-b47692ed"
                            KeyName         : "koding-prod-deployment"
                            UserData        : new Buffer(KONFIG.runFile).toString('base64')
                        instanceName        : options.hostname
                        configName          : options.config
                        environment         : options.config
                        tag                 : options.version

                    Deploy.createInstances deployOptions,(err,res)->
                        InstanceId = res.Instances[0].InstanceId
                        log InstanceId
                        t = setInterval ->
                            ec2.describeInstances {InstanceIds:[InstanceId]},(err,inst)->
                                # log JSON.stringify inst,null,2
                                IP             = inst.Reservations?[0]?.Instances?[0]?.PublicIpAddress
                                PublicDnsName  = inst.Reservations?[0]?.Instances?[0]?.PublicDnsName

                                if PublicDnsName
                                    clearTimeout t

                                    Deploy.remoteTail "#{IP}","ubuntu", "/var/log/cloud-init-output.log" if options.config is "feature"

                                    Deploy.addDomainRecord
                                        domain: domain
                                        type : "A"
                                        name : subdomain
                                        content : IP
                                        service_mode : cf_service_mode
                                    ,(err,res)->

                                        # log "testing instance..."
                                        _IP = "koding:1q2w3e4r@#{IP}"
                                        _fulldomain = "koding:1q2w3e4r@#{fulldomain}"

                                        # _ti = 0
                                        # _t = setInterval ->
                                        #     Deploy.deployTest tests(_IP,_fulldomain),(err,res)->
                                        #         if res._allpassed
                                        #             clearInterval _t
                                        log res
                                        log "------------------------------------------------------------------"
                                        log "Deployment complete, give it 5 minutes... (depends on the boxtype)"
                                        log "------------------------------------------------------------------"
                                        log "URL: #{PublicDnsName} "
                                        log "------------------------------------------------------------------"
                                        log "URL: #{subdomain}.#{domain}         IP: #{IP}"
                                        log "------------------------------------------------------------------"
                                        #         else
                                        #             _ti++
                                        #             log "building #{fulldomain}: #{_ti*5} secs elapsed..."

                                        # ,5000
                                        # log arguments




                        ,5000


                when "prod"
                    template =
                        AWSTemplateFormatVersion: "2010-09-09"
                        Description: "Koding deployment on AWS"
                        Resources:
                            KodingAutoScale:
                                Type: "AWS::AutoScaling::AutoScalingGroup"
                                Properties:
                                    AvailabilityZones: ["us-east-1a"]
                                    LaunchConfigurationName: {Ref: "KodingLaunchConfig"}
                                    VPCZoneIdentifier: ["subnet-b47692ed"]
                                    LoadBalancerNames: ["koding-prod-deployment"]
                                    MinSize: options.boxes
                                    MaxSize: options.boxes
                                    DesiredCapacity: options.boxes
                                    Tags: [ Key: "Name", Value: {Ref: "AWS::StackName"}, PropagateAtLaunch: yes]

                            KodingLaunchConfig:
                                Type: "AWS::AutoScaling::LaunchConfiguration"
                                Properties:
                                    ImageId: "ami-864d84ee"
                                    InstanceType: options.boxtype
                                    KeyName: "koding-prod-deployment"
                                    SecurityGroups: ["sg-64126d01"]
                                    UserData:  "Fn::Base64": KONFIG.runFile

                    cloudformation.createStack
                        StackName    : options.hostname
                        OnFailure    : "DELETE"
                        TemplateBody : JSON.stringify template
                    ,(err,data) ->
                        log arguments

                        log "------------------------------------------------------------------"
                        log "Deployment complete, give it 5 minutes... (depends on the boxtype)"
                        log "------------------------------------------------------------------"
                        log "ELB: koding-prod-deployment-109498171.us-east-1.elb.amazonaws.com "
                        log "------------------------------------------------------------------"
                        log "URL: https://koding.io "
                        log "------------------------------------------------------------------"

                # log JSON.stringify res,null,2

                # res.Instances.forEach (instance)->
                #     IP = "koding:1q2w3e4r@#{instance.PublicIpAddress}"
                #     log "testing instance..."
                #     _t = setInterval ->
                #         Deploy.deployTest [
                #                 {url : "http://#{IP}:3000/"          , target: "webserver"          , expectString: "UA-6520910-8"}
                #                 {url : "http://#{IP}:3030/xhr"       , target: "socialworker"       , expectString: "Cannot GET"}
                #                 {url : "http://#{IP}:8008/subscribe" , target: "broker"             , expectString: "Cannot GET"}
                #                 {url : "http://#{IP}:5500/kite"      , target: "kloud"              , expectString: "Welcome"}
                #                 {url : "http://#{IP}/"               , target: "webserver-nginx"    , expectString: "UA-6520910-8"}
                #                 {url : "http://#{IP}/xhr"            , target: "socialworker-nginx" , expectString: "Cannot GET"}
                #                 {url : "http://#{IP}/subscribe"      , target: "broker-nginx"       , expectString: "Cannot GET"}
                #                 {url : "http://#{IP}/kloud/kite"     , target: "kloud-nginx"        , expectString: "Welcome"}
                #             ]
                #         ,(err,test_res)->
                #             log val for val in test_res

                #             if OK then runTests()

                #     ,10000

                # log "#{res.instanceName} is ready."
                # log "Box is ready at mosh root@#{res.instanceData.PublicIpAddress}"




# cleanup script - in case u need it. use it carefully, sonmez & devrim blew up entire koding.com today 8/14/2014

# cf.listDomainRecords "koding.io",(err,list)->
#     for i,k in list
#         do (i)->
#             unless i.name is "koding.io"
#                 log "deleted #{i.name}"
#                 cf.deleteDomainRecord "koding.io",i.rec_id,-> log "deleted #{i.name}"
#             else
#                 log "not deleted:#{i.name}"
